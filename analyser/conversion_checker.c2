module conversion_checker;

import ast local;
import ast_builder;
import diagnostics;
import ctv_analyser;
import src_loc local;

import stdio local;

//  0 = cannot happen (mostly Module/Alias type)
//  1 = Not allowed
//  2 = Builtin -> Builtin
//  3 = Builtin -> Pointer (only usize/u64/u32 -> void*)
//  4 = Pointer -> Builtin (only void* -> usize/u64/u32)
//  5 = Pointer -> Pointer
//  6 = Pointer -> Func (void* or Func*)
//  7 = Array -> Pointer
//  8 = Array -> Array
//  9 = Struct -> Struct
// 10 = Enum -> Builtin (check range)
// 11 = Func -> Pointer (void* or Func*)
// NOTE: Enum -> Enum is not allowed, since the ptr check already filters out the allowed ones
const u8[elemsof(TypeKind)][elemsof(TypeKind)] Conversions = {
    //  Builtin Pointer Array   Struct  Enum    Func   Alias    Module
    //  Builtin ->
    {   2,      3,      1,      1,      1,      1,      0,      0   },
    //  Pointer ->
    {   4,      5,      1,      1,      1,      6,      0,      0   },
    //  Array ->
    {   1,      7,      8,      1,      1,      1,      0,      0   },
    //  Struct ->
    {   1,      1,      1,      9,      1,      1,      0,      0   },
    //  Enum ->
    {   10,     1,      1,      1,      1,      1,      0,      0   },
    //  Function ->
    {   1,      11,     1,      1,      1,      1,      0,      0   },
    //  Alias ->
    {   0,      0,      0,      0,      0,      0,      0,      0   },
    //  Module ->
    {   0,      0,      0,      0,      0,      0,      0,      0   },
}

//  0 = should not happen? (same)
//  1 = ok
//  2 = incompatible
//  3 = sign-conversion
//  4 = loss of integer-precision
//  5 = float -> integer
//  6 = loss of FP-precision
const u8[elemsof(BuiltinKind)][elemsof(BuiltinKind)] BuiltinConversions = {
    //  Char   Int8   Int16  Int32  Int64  UInt8  UInt16 UInt32 UInt64 Flt32  Flt64  ISize  USize  Bool  Void
    //  1      2      3      4      5      6      7      8      9      10     11     12     13     14    15
    // Char ->
    {   0,     1,     1,     1,     1,     3,     3,     3,     3,     1,     1,     1,     3,     1,    2  },
    // Int8 ->
    {   1,     0,     1,     1,     1,     3,     3,     3,     3,     1,     1,     1,     3,     1,    2  },
    // Int16 ->
    {   4,     4,     0,     1,     1,     3,     3,     3,     3,     1,     1,     1,     3,     1,    2  },
    // Int32 ->
    {   4,     4,     4,     0,     1,     3,     3,     3,     3,     1,     1,     1,     3,     1,    2  },
    // Int64 ->
    {   4,     4,     4,     4,     0,     3,     3,     3,     3,     1,     1,     1,     3,     1,    2  },
    // UInt8 ->
    {   3,     3,     3,     3,     3,     0,     1,     1,     1,     1,     1,     3,     1,     1,    2  },
    // UInt16 ->
    {   3,     3,     3,     3,     3,     1,     0,     1,     1,     1,     1,     3,     1,     1,    2  },
    // UInt32 ->
    {   3,     3,     3,     3,     3,     1,     1,     0,     1,     1,     1,     3,     1,     1,    2  },
    // UInt64 ->
    {   3,     3,     3,     3,     3,     1,     1,     1,     0,     1,     1,     3,     1,     1,    2  },
    // Flt32 ->
    {   5,     5,     5,     5,     5,     5,     5,     5,     5,     0,     1,     5,     5,     2,    2  },
    // Flt64 ->
    {   5,     5,     5,     5,     5,     5,     5,     5,     5,     6,     0,     5,     5,     2,    2  },
    // ISize ->
    {   4,     4,     4,     4,     1,     3,     3,     3,     3,     1,     1,     0,     3,     1,    2  },
    // USize ->
    {   3,     3,     3,     3,     3,     1,     1,     1,     1,     1,     1,     3,     0,     1,    2  },
    // Bool ->
    {   1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,    2  },
    // Void ->
    {   2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,    0  },
}

public type Checker struct {
    diagnostics.Diags* diags;
    ast_builder.Builder* builder;

    // changes every check
    // TODO cannot store here, otherwise we cannot check recusively? (or pass Type*?)
    SrcLoc loc;
    QualType lhs;
    QualType rhs;
    Expr** expr_ptr;
    Expr* expr;
}

public func void Checker.init(Checker* c, diagnostics.Diags* diags, ast_builder.Builder* builder) {
    c.diags = diags;
    c.builder = builder;
}

// TODO (temp) store loc as well for diags, as well as original lhs/rhs for diags
public func bool Checker.check(Checker* c, QualType lhs,  QualType rhs, Expr** e_ptr, SrcLoc loc) {
    assert(lhs.ptr);
    assert(rhs.ptr);
#if 0
    printf("LHS\n");
    lhs.dump_full();
    printf("RHS\n");
    rhs.dump_full();
#endif
    // get 'canonical' type of both (only different for AliasTypes)
    const Type* ltype = lhs.getTypeOrNil();
    const Type* rtype = rhs.getTypeOrNil();
    QualType t1 = lhs.getCanonicalType();
    QualType t2 = rhs.getCanonicalType();
    const Type* lcanon = t1.getTypeOrNil();
    const Type* rcanon = t2.getTypeOrNil();

    if (lcanon == rcanon) {
        u32 lquals = lhs.getQuals();
        u32 rquals = rhs.getQuals();
        if (lcanon.getKind() == TypeKind.Pointer && ((~lquals & 0x3) & rquals)) {
            c.diags.report(c.loc, "conversion discards const qualifier");
            return false;
        }
        return true;
    }

    // TODO only store e_ptr (not e)
    c.lhs = lhs;
    c.rhs = rhs;
    c.expr_ptr = e_ptr;
    c.expr = *e_ptr;
    c.loc = loc;

    return c.checkTypes(lcanon, rcanon);
}

func bool Checker.checkTypes(Checker* c, const Type* lcanon, const Type* rcanon) {

    u8 res = Conversions[rcanon.getKind()][lcanon.getKind()];

    switch (res) {
    case 0: // cannot happen
        c.diags.report(c.loc, "SHOULD NOT HAPPEN (%u - %u)\n", lcanon.getKind(), rcanon.getKind());
        c.lhs.dump_full();
        c.rhs.dump_full();
        assert(0);
        return false;
    case 1: // not allowed
        c.diags.report(c.loc, "invalid type conversion from %s to %s", c.rhs.diagName(true), c.lhs.diagName(true));
        return false;
    case 2: //  2 = Builtin -> Builtin
        return c.checkBuiltins(lcanon, rcanon);
    case 3: //  3 = Builtin -> Pointer (only if usize/u64/u32)
        return c.checkBuiltin2Pointer(lcanon, rcanon);
    case 4: //  4 = Pointer -> Builtin (only if usize/u64/u32)
        return c.checkPointer2Builtin(lcanon, rcanon);
    case 5: //  5 = Pointer -> Pointer
        return c.checkPointers(lcanon, rcanon);
    //  6 = Pointer -> Func (void* or Func*)
    case 7: //  7 = Array -> Pointer
        //TODO remove this conversion (just make 0 in table)
        c.diags.note(c.loc, "SHOULD NOT HAPPEN (Array -> Ptr)");
        assert(0);
        return false;
    case 8: //  8 = Array -> Array
        c.diags.report(c.loc, "invalid type conversion from %s to %s", c.rhs.diagName(true), c.lhs.diagName(true));
        return false;
    case 9: //  9 = Struct -> Struct
        c.diags.report(c.loc, "conversion between struct of different types (%s to %s)", c.rhs.diagName(true), c.lhs.diagName(true));
        return false;
    case 10: // 10 = Enum -> Builtin (check range)
        return c.checkEnum2Int(lcanon, rcanon);
    // 11 = Func -> Pointer (void* or Func*)
    default:
        c.diags.note(c.loc, "TODO CONVERSION  %u)", res);
        return false;
    }

    return true;
}

func bool Checker.checkBuiltins(Checker* c, const Type* lcanon, const Type* rcanon) {
    // Note: lhs and rhs are not the same, otherwise ptr-check would have succeeded
    const BuiltinType* lbuiltin = cast<BuiltinType*>(lcanon);
    const BuiltinType* rbuiltin = cast<BuiltinType*>(rcanon);

    if (c.expr.isCtv()) {
        // TODO check value instead of type
        return true;
    }

    u8 res = BuiltinConversions[rbuiltin.getKind()][lbuiltin.getKind()];
    switch (res) {
    case 0:     // should not happen
        printf("BUILTIN SHOULD NOT HAPPEN (%u - %u)\n", lcanon.getKind(), rcanon.getKind());
        assert(0);
        return false;
    case 1:     // ok
        break;
    case 2:     // incompatible
        c.diags.report(c.loc, "invalid builtin conversion from %s to %s", c.rhs.diagName(true), c.lhs.diagName(true));
        return false;
    case 3:     // sign-conversion
        //c.diags.note(c.loc, "sign conversion");
        break;
    case 4:     // loss of integer-precision
        c.diags.note(c.loc, "loss of integer precision");
        break;
    case 5:     // float -> integer
        c.diags.note(c.loc, "float to integer conversion");
        break;
    case 6:     // loss of FP-precision
        c.diags.note(c.loc, "loss of floating-point precision");
        break;
    }

    return true;
}

func bool Checker.checkBuiltin2Pointer(Checker* c, const Type* lcanon, const Type* rcanon) {
    // Note: only allow usize/(u32/u64) -> void*
    const PointerType* ptr = cast<PointerType*>(lcanon);
    const BuiltinType* bi = cast<BuiltinType*>(rcanon);

    QualType inner = ptr.getInner();
    bool ok = inner.isVoidType();

    BuiltinKind kind = bi.getKind();
    // TODO or u32
    ok &= (kind == BuiltinKind.USize || kind == BuiltinKind.UInt64);

    if (!ok) {
        c.diags.report(c.loc, "incompatible integer to pointer conversion %s to %s",
                c.rhs.diagName(true), c.lhs.diagName(true));
        return false;
    }
    return true;
}

func bool Checker.checkPointer2Builtin(Checker* c, const Type* lcanon, const Type* rcanon) {
    // Note: only allow void* -> usize/(u32/u64) / bool
    const BuiltinType* bi = cast<BuiltinType*>(lcanon);

    BuiltinKind kind = bi.getKind();
    if (kind == BuiltinKind.Bool) {
        c.builder.insertImplicitCast(ImplicitCastKind.PointerToBoolean, c.expr_ptr, g_bool);
        return true;
    }

    const PointerType* ptr = cast<PointerType*>(rcanon);
    QualType inner = ptr.getInner();

    // TODO or u32 (arch)
    bool ok = inner.isVoidType();
    ok &= (kind == BuiltinKind.USize || kind == BuiltinKind.UInt64);

    if (!ok) {
        c.diags.report(c.loc, "incompatible pointer to integer conversion %s to %s",
                c.rhs.diagName(true), c.lhs.diagName(true));
        return false;
    }

    c.builder.insertImplicitCast(ImplicitCastKind.PointerToInteger, c.expr_ptr, g_usize);
    return true;
}

func bool Checker.checkPointers(Checker* c, const Type* lcanon, const Type* rcanon) {

    const PointerType* ltype = cast<PointerType*>(lcanon);
    const PointerType* rtype = cast<PointerType*>(rcanon);
/*
    if (ltype == rtype) { // this will only happen with AliasTypes
        printf("  SAME, diff quals\n");
        // TODO check quals
        return true;
    }
*/

    QualType linner = ltype.getInner();
    QualType rinner = rtype.getInner();
    // Note: no need to fully compare, since otherwise the pointers above would have been the same
    const Type* in1 = linner.getTypeOrNil();
    const Type* in2 = rinner.getTypeOrNil();
    if (in1 == in2) {
        u32 rquals = rinner.getQuals();
        if (rquals == 0) return true;

        u32 lquals = linner.getQuals();
        if (((~lquals) & rquals) & 0x3) {
            c.diags.report(c.loc, "pointer conversion discards const qualifier");
            return false;
        }
        return true;
    }

    // TODO dont allow ptr** -> void* or reverse
    if (in1.isVoidType()) {
        //printf("  ptr -> void*  allowed\n");
        return true;
    }
    if (in2.isVoidType()) {
        //printf("  void* -> ptr  allowed\n");
        return true;
    }

    //TODO check ptr-ptr, use ptr-inner-table
    c.diags.report(c.loc, "invalid pointer conversion from %s to %s", c.rhs.diagName(true), c.lhs.diagName(true));
    return false;
}

func bool Checker.checkEnum2Int(Checker* c, const Type* lcanon, const Type* rcanon) {
    // Note: enum constant values can never be negative
    const BuiltinType* bi = cast<BuiltinType*>(lcanon);
    u32 width = bi.getWidth();
    if (width  == 64) return true;  // 64-bit

    // NOTE: EnumConstDecls are CTV, but variables of the type are not!
    if (c.expr.isCtv()) {
        const ctv_analyser.Limit* limit = ctv_analyser.getLimit(width);

        ctv_analyser.Value value = ctv_analyser.get_value(c.expr);

        if (value.uvalue > limit.max_val) {
            c.diags.report(c.loc,  "constant value %lu out-of-bounds for type %s, range [%s, %s]",
                value.uvalue, c.lhs.diagName(false), limit.min_str, limit.max_str);
            return false;
        }
    } else {
        // compare impl type
        const EnumType* et = cast<EnumType*>(rcanon);
        const EnumTypeDecl* etd = et.getDecl();
        QualType impl = etd.getImplType();

        return c.check(c.lhs, impl, c.expr_ptr, c.loc);
    }

    return true;
}


/* Copyright 2022-2024 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module conversion_checker;

import ast local;
import ctv_analyser;

type ExprWidth struct {
    u8 width;   // in bits
    bool is_signed;
}

fn ExprWidth ExprWidth.mergeSmaller(ExprWidth* w1, ExprWidth* w2) {
    ExprWidth result;
    if (w2.width < w1.width) result.width = w2.width;
    else result.width = w1.width;
    result.is_signed = w1.is_signed || w2.is_signed;
    return result;
}

fn ExprWidth ExprWidth.mergeWider(ExprWidth* w1, ExprWidth* w2) {
    ExprWidth result;
    if (w2.width > w1.width) result.width = w2.width;
    else result.width = w1.width;
    result.is_signed = w1.is_signed || w2.is_signed;
    return result;
}

fn u8 val2width(u64 value) {
    //TODO find faster way
    if (value <= 65535) {
        if (value <= 255) {
            if (value <= 128) return 7;
            else return 8;
        }
        if (value <= 32767) return 15;
        else return 16;
    }
    if (value <= 4294967295) {
        if (value <= 2147483647) return 31;
        else return 32;
    }
    if (value <= 9223372036854775807) return 63;
    return 64;
}

fn ExprWidth getExprWidth(const Expr* e) {
    ExprWidth result = {}

    if (e.isCtv()) {
        Value v = ctv_analyser.get_value(e);
        if (v.isNegative()) {
            result.is_signed = true;
            result.width = val2width(cast<u64>(-v.svalue));
        } else {
            result.width = val2width(v.uvalue);
            result.is_signed = false;
        }
        return result;
    }

    switch (e.getKind()) {
    case IntegerLiteral:
        break;
    case FloatLiteral:
        break;
    case BooleanLiteral:
        break;
    case CharLiteral:
        break;
    case StringLiteral:
        break;
    case Nil:
        break;
    case Identifier:
        QualType qt = e.getType();
        qt = qt.getCanonicalType();
        if (qt.isBuiltin()) {
            BuiltinType* bi = qt.getBuiltin();
            result.width = cast<u8>(bi.getWidth());
            result.is_signed = bi.isSigned();
        } else {
            // pointer or something
            result.width = cast<u8>(ast.getWordSize() * 8);
            result.is_signed = true;
        }
        return result;
    case Type:
        break;
    case Call:
        return getTypeWidth(e.getType());
    case InitList:
        break;
    case FieldDesignatedInit:
        break;
    case ArrayDesignatedInit:
        break;
    case BinaryOperator:
        return getBinOpWidth(cast<BinaryOperator*>(e));
    case UnaryOperator:
        return getUnaryOpWidth(cast<UnaryOperator*>(e));
    case ConditionalOperator:
        return getCondOpWidth(cast<ConditionalOperator*>(e));
    case Builtin:
        break;
    case ArraySubscript: fallthrough;
    case Member:
        QualType qt = e.getType();
        qt = qt.getCanonicalType();
        assert(qt.isBuiltin());
        BuiltinType* bi = qt.getBuiltin();
        result.width = cast<u8>(bi.getWidth());
        result.is_signed = bi.isSigned();
        return result;
    case Paren:
        const ParenExpr* p = cast<ParenExpr*>(e);
        return getExprWidth(p.getInner());
    case BitOffset:
        break;
    case ExplicitCast:
        QualType qt = e.getType();
        qt = qt.getCanonicalType();
        assert(qt.isBuiltin());
        BuiltinType* bi = qt.getBuiltin();
        result.width = cast<u8>(bi.getWidth());
        result.is_signed = bi.isSigned();
        return result;
    case ImplicitCast:
        const ImplicitCastExpr* c = cast<ImplicitCastExpr*>(e);
        return getExprWidth(c.getInner());
    }

    e.dump();
    assert(0);
    return result;
}

fn ExprWidth getCondOpWidth(const ConditionalOperator* c) {
    ExprWidth lhs = getExprWidth(c.getLHS());
    ExprWidth rhs = getExprWidth(c.getRHS());
    return ExprWidth.mergeWider(&lhs, &rhs);
}

fn ExprWidth getUnaryOpWidth(const UnaryOperator* u) {
    ExprWidth w;
    switch (u.getOpcode()) {
    case PostInc: fallthrough;
    case PostDec: fallthrough;
    case PreInc:  fallthrough;
    case PreDec:
        return getExprWidth(u.getInner());
    case AddrOf:
        // TODO
        //w.width = ast.getWordSize() * 8;
        w.is_signed = false;
        break;
    case Deref:
        // must be pointer-type, return size of inner
        // TODO
        break;
    case Minus:
        w = getExprWidth(u.getInner());
        // TODO modify width?
        w.is_signed = true;
        break;
    case Not:
        w = getExprWidth(u.getInner());
        // TODO modify width?
        w.is_signed = false;
        break;
    case LNot:
        w.width = 1;
        w.is_signed = false;
        break;
    }
    return w;
}

fn ExprWidth getBinOpWidth(const BinaryOperator* b) {
    switch (b.getOpcode()) {
    case Multiply:
        break;
    case Divide:
        break;
    case Reminder:
        // TODO special
        break;
    case Add:
        break;
    case Subtract:
        break;
    case ShiftLeft:
        break;
    case ShiftRight:
        break;
    case LessThan:      fallthrough;
    case GreaterThan:   fallthrough;
    case LessEqual:     fallthrough;
    case GreaterEqual:  fallthrough;
    case Equal:         fallthrough;
    case NotEqual:
        ExprWidth result = { 1, 0 }
        return result;
    case And:
        ExprWidth l = getExprWidth(b.getLHS());
        ExprWidth r = getExprWidth(b.getRHS());
        return ExprWidth.mergeSmaller(&l, &r);
    case Xor:
        break;
    case Or:
        break;
    case LAnd:      fallthrough;
    case LOr:
        ExprWidth result = { 1, 0 }
        return result;
    case Assign:    fallthrough;
    case MulAssign: fallthrough;
    case DivAssign: fallthrough;
    case RemAssign: fallthrough;
    case AddAssign: fallthrough;
    case SubAssign: fallthrough;
    case ShlAssign: fallthrough;
    case ShrAssign: fallthrough;
    case AndAssign: fallthrough;
    case XorAssign: fallthrough;
    case OrAssign:
        return getExprWidth(b.getLHS());
    }

    ExprWidth lhs = getExprWidth(b.getLHS());
    ExprWidth rhs = getExprWidth(b.getRHS());
    return ExprWidth.mergeWider(&lhs, &rhs);
}

fn ExprWidth getTypeWidth(QualType qt) {
    assert(qt.isBuiltin());
    const BuiltinType* bi = qt.getBuiltin();
    ExprWidth result;
    result.width = cast<u8>(bi.getWidth());
    result.is_signed = bi.isSigned();
    return result;
}


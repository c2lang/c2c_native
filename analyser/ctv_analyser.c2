/* Copyright 2022 Bas van den Berg
*/

module ctv_analyser;

import ast local;

import string;


public type Value struct {
    bool is_signed;
    union {
        u64 uvalue;
        i64 svalue;
    }
}

public func bool Value.isNegative(const Value* v) {
    if (v.is_signed && v.svalue < 0) return true;
    return false;
}

type CTV_Analyser struct {
}

func void CTV_Analyser.init(CTV_Analyser* ca) {
    string.memset(ca, 0, sizeof(CTV_Analyser));
}

public func Value get_value(const Expr* e) {
    Value result = { 0 }

    assert(e.isCtv());

    switch (e.getKind()) {
    case IntegerLiteral:
        const IntegerLiteral* i = cast<IntegerLiteral*>(e);
        result.uvalue = i.getValue();
        break;
    case BooleanLiteral:
        const BooleanLiteral* b = cast<BooleanLiteral*>(e);
        result.uvalue = b.getValue();
        break;
    case CharLiteral:
        const CharLiteral* c = cast<CharLiteral*>(e);
        result.uvalue = c.getValue();
        break;
    case StringLiteral:
        assert(0);
        break;
    case Nil:
        break;
    case Identifier:
        const IdentifierExpr* i = cast<IdentifierExpr*>(e);
        return get_decl_value(i.getDecl());
    case Type: fallthrough;
    case Call: fallthrough;
    case InitList: fallthrough;
    case FieldDesignatedInit: fallthrough;
    case ArrayDesignatedInit:
        // should not happen
        break;
    case BinaryOperator:
        return get_binaryop_value(cast<BinaryOperator*>(e));
    case UnaryOperator:
        return get_unaryop_value(cast<UnaryOperator*>(e));
    case ConditionalOperator:
        // should not happen
        break;
    case Builtin:
        const BuiltinExpr* bi = cast<BuiltinExpr*>(e);
        result.uvalue = bi.getValue();
        break;
    case ArraySubscript:
        // TODO can be CTV?
        break;
    case Member:
        const MemberExpr* m = cast<MemberExpr*>(e);
        return get_decl_value(m.getFullDecl());
    case Paren:
        const ParenExpr* p = cast<ParenExpr*>(e);
        return get_value(p.getInner());
    case BitOffset:
        // TODO
        break;
    case ExplicitCast:
        const ImplicitCastExpr* i = cast<ImplicitCastExpr*>(e);
        // TODO truncateLiteral()
        return get_value(i.getInner());
    case ImplicitCast:
        const ImplicitCastExpr* i = cast<ImplicitCastExpr*>(e);
        return get_value(i.getInner());
    }

    return result;
}

func Value get_decl_value(const Decl* d) {
    assert(d);
    Value result = { 0 }
    switch (d.getKind()) {
    case EnumConstant:
        const EnumConstantDecl* ecd = cast<EnumConstantDecl*>(d);
        result.uvalue = ecd.getValue();
        break;
    case Var:
        const VarDecl* vd = cast<VarDecl*>(d);
        const Expr* initval = vd.getInit();
        assert(initval);
        return get_value(initval);
    default:
        assert(0);
        break;
    }
    return result;
}

func Value get_unaryop_value(const UnaryOperator* e) {
    Value result = { 0 }
    const Expr* inner = e.getInner();
    Value res2 = get_value(inner);

    switch (e.getOpcode()) {
    case PostInc:  fallthrough;
    case PostDec:  fallthrough;
    case PreInc:   fallthrough;
    case PreDec:
        // should not happen
        break;
    case AddrOf:   fallthrough;
    case Deref:
        // Allowed?
        break;
    case Minus:
        result.is_signed = true;
        result.svalue = res2.is_signed ? - res2.svalue : cast<i64>(- res2.uvalue);
        break;
    case Not:
        // Note: doesn't matter if we check svalue/uvalue
        result.svalue = (result.svalue == 0) ? 1 : 0;
        break;
    case LNot:
        // TODO cast to bool first?
        result.uvalue = res2.is_signed ? cast<u64>(~ res2.svalue) : ~ res2.uvalue;
        break;
    }
    return result;
}

func Value get_binaryop_value(const BinaryOperator* e) {
    Value result = { 0 }
    Value left = get_value(e.getLHS());
    Value right = get_value(e.getRHS());
    result.is_signed = left.is_signed;

    // Note: we take the signed/unsigned rvalue depending on whether the lhs value is sigend.
    // this is not completely correct

    switch (e.getOpcode()) {
    case Multiply:
        if (left.is_signed || right.is_signed) {
            // convert both values to signed
            i64 lval = (left.is_signed) ? left.svalue : cast<i64>(left.uvalue);
            i64 rval = (right.is_signed) ? right.svalue : cast<i64>(right.uvalue);
            result.svalue = lval * rval;
            result.is_signed = true;
        } else {
            result.uvalue = left.uvalue * right.uvalue;
        }
        break;
    case Divide:
        // Note: should already be checked!
        assert(right.svalue != 0);
        if (left.is_signed || right.is_signed) {
            // convert both values to signed
            i64 lval = (left.is_signed) ? left.svalue : cast<i64>(left.uvalue);
            i64 rval = (right.is_signed) ? right.svalue : cast<i64>(right.uvalue);
            result.svalue = lval / rval;
            result.is_signed = true;
        } else {
            result.uvalue = left.uvalue / right.uvalue;
        }
        break;
    case Reminder:
        // Note: should already be checked!
        assert(right.svalue != 0);
        if (left.is_signed) result.svalue = left.svalue % right.svalue;
        else result.uvalue = left.uvalue % right.uvalue;
        break;
    case Add:
        if (left.is_signed || right.is_signed) {
            // convert both values to signed
            i64 lval = (left.is_signed) ? left.svalue : cast<i64>(left.uvalue);
            i64 rval = (right.is_signed) ? right.svalue : cast<i64>(right.uvalue);
            result.svalue = lval + rval;
            result.is_signed = true;
        } else {
            result.uvalue = left.uvalue + right.uvalue;
        }
        break;
    case Subtract:
        // convert both values to signed
        i64 lval = (left.is_signed) ? left.svalue : cast<i64>(left.uvalue);
        i64 rval = (right.is_signed) ? right.svalue : cast<i64>(right.uvalue);
        result.svalue = lval - rval;
        result.is_signed = true;
        break;
    case ShiftLeft:
        // Note: neither may be negative, should already be checked
        // TODO warn about overflow
        result.uvalue = left.uvalue << right.uvalue;
        break;
    case ShiftRight:
        // Note: neither may be negative, should already be checked
        // Note: rhs value should be less than bitwidth of lhs type, should already be checked
        result.uvalue = left.uvalue >> right.uvalue;
        break;
    case LessThan:
        result.is_signed = false;
        if (left.is_signed) result.svalue = left.svalue < right.svalue;
        else result.uvalue = left.uvalue < right.uvalue;
        break;
    case GreaterThan:
        result.is_signed = false;
        if (left.is_signed) result.svalue = left.svalue > right.svalue;
        else result.uvalue = left.uvalue > right.uvalue;
        break;
    case LessEqual:
        result.is_signed = false;
        if (left.is_signed) result.svalue = left.svalue <= right.svalue;
        else result.uvalue = left.uvalue <= right.uvalue;
        break;
    case GreaterEqual:
        result.is_signed = false;
        if (left.is_signed) result.svalue = left.svalue >= right.svalue;
        else result.uvalue = left.uvalue >= right.uvalue;
        break;
    case Equal:
        result.is_signed = false;
        if (left.is_signed) result.svalue = left.svalue == right.svalue;
        else result.uvalue = left.uvalue == right.uvalue;
        break;
    case NotEqual:
        result.is_signed = false;
        if (left.is_signed) result.svalue = left.svalue != right.svalue;
        else result.uvalue = left.uvalue != right.uvalue;
        break;
    case And:
        result.is_signed = false;
        if (left.is_signed) result.svalue = left.svalue & right.svalue;
        else result.uvalue = left.uvalue & right.uvalue;
        break;
    case Xor:
        result.is_signed = false;
        if (left.is_signed) result.svalue = left.svalue ^ right.svalue;
        else result.uvalue = left.uvalue ^ right.uvalue;
        break;
    case Or:
        result.is_signed = false;
        if (left.is_signed) result.svalue = left.svalue | right.svalue;
        else result.uvalue = left.uvalue | right.uvalue;
        break;
    case LAnd:
        result.is_signed = false;
        if (left.is_signed) result.svalue = left.svalue && right.svalue;
        else result.uvalue = left.uvalue && right.uvalue;
        break;
    case LOr:
        result.is_signed = false;
        if (left.is_signed) result.svalue = left.svalue || right.svalue;
        else result.uvalue = left.uvalue || right.uvalue;
        break;
    case Assign:    fallthrough;
    case MulAssign: fallthrough;
    case DivAssign: fallthrough;
    case RemAssign: fallthrough;
    case AddAssign: fallthrough;
    case SubASsign: fallthrough;
    case ShlAssign: fallthrough;
    case ShrASsign: fallthrough;
    case AndAssign: fallthrough;
    case XorAssign: fallthrough;
    case OrAssign:
        assert(0);
        break;
    }
    return result;
}


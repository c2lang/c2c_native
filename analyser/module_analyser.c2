/* Copyright 2022 Bas van den Berg
*/

module module_analyser;

import ast_context;
import ast_builder;
import ast local;
import ctv_analyser;
import diagnostics;
import module_list;
import scope;

import string;
import stdlib;
import ctype;
import stdio; // TEMP

const u32 MaxDepth = 8;

// TEMP here until we have templates
type NameVector struct {
    u32* data;
    u32 count;
    u32 capacity;
}

func void NameVector.init(NameVector* v, u32 capacity) {
    v.data = nil;
    v.count = 0;
    v.capacity = capacity / 2; // workaround resize
    v.resize();
}

func void NameVector.free(NameVector* v) {
    stdlib.free(v.data);
    v.count = 0;
    v.capacity = 0;
    v.data = nil;
}

func void NameVector.resize(NameVector* v) {
    v.capacity = v.capacity == 0 ? 4 : v.capacity * 2;
    void* data2 = stdlib.malloc(v.capacity * sizeof(u32));
    if (v.data) {
        string.memcpy(data2, v.data, v.count * sizeof(u32));
        stdlib.free(v.data);
    }
    v.data = data2;
}

func u32 NameVector.add(NameVector* v, u32 name_idx) {
    if (v.count == v.capacity) v.resize();

    u32 index = v.count;
    v.data[index] = name_idx;
    v.count++;
    return index;
}

func u32 NameVector.get(const NameVector* v, u32 idx) {
    return v.data[idx];
}

func bool NameVector.find(NameVector* v, u32 name_idx, u32* index) {
    for (u32 i=0; i<v.count; i++) {
        if (v.data[i] == name_idx) {
            *index = i;
            return true;
        }
    }
    return false;
}

type StackLayer struct {
    Decl* decl;
    scope.Scope* scope;
}

type Analyser struct {
    Module* mod;
    diagnostics.Diags* diags;
    ast_context.Context* context;
    ast_builder.Builder* builder;
    module_list.ModList* allmodules;

    // collect struct-functions
    u32 prefix_cache_name;
    u32 prefix_cache_idx;
    // Vector<const char*> prefixes;
    NameVector prefixes;
    StructDecls struct_decls;

    // Type + Vars analysis
    StackLayer[MaxDepth] checkStack;
    u32 checkIndex;
    scope.Scope* scope; // points to top layer in stack
}

public func void check(diagnostics.Diags* diags,
                       ast_context.Context* context,
                       ast_builder.Builder* builder,
                       module_list.ModList* allmodules,
                       Module* mod)
{
    Analyser ma;
    string.memset(&ma, 0, sizeof(ma));
    ma.diags = diags;
    ma.context = context;
    ma.builder = builder;
    ma.allmodules = allmodules;
    ma.mod = mod;

    //stdio.printf("analysing module %s\n", ma.mod.getName());

    mod.visitASTs(Analyser.createGlobalScope, &ma);

    // NOTE: C2C Analyser::step1()
    // step 3a: collect incremental arrays
    // TODO use visitIncrArrays()

    // step 3b: collect struct functions
    mod.visitStructFunctions(Analyser.handleStructFunc, &ma);

    for (u32 i=0; i<ma.struct_decls.count; i++) {
        const StructDeclInfo* info = &ma.struct_decls.data[i];
        StructTypeDecl* fd = cast<StructTypeDecl*>(info.decl);
        fd.setStructFunctions(ma.context, info.functions.getDecls(), info.functions.size());
    }

    ma.prefixes.free();  // Note: free here already (safe to be freed twice)
    ma.struct_decls.free();

    // NOTE: C2C Analyser::step2()
    // analyse types
    mod.visitTypeDecls(Analyser.handleTypeDecl, &ma);

    mod.visitVarDecls(Analyser.handleVarDecl, &ma);

    mod.visitStaticAsserts(Analyser.handleStaticAssert, &ma);

    mod.visitFunctions(Analyser.analyseFunctionProto, &ma);

    // NOTE: C2C Analyser::step3()
    // TODO only for non-interface components
    //mod.visitFunctions(Analyser.analyseFunctionBodies, &ma);

    mod.visitASTs(Analyser.deleteScope, &ma);
    ma.free();
}

func void Analyser.free(Analyser* ma) {
    ma.prefixes.free();
    ma.struct_decls.free();
}

func void Analyser.createGlobalScope(void* arg, AST* a) {
    Analyser* ma = arg;
    scope.Scope* s = scope.create(ma.allmodules,
                                  ma.diags,
                                  a.getImports(),
                                  ma.mod,
                                  ma.mod.getSymbols());
    a.setPtr(s);
}

func void Analyser.deleteScope(void* arg, AST* a) {
    scope.Scope* s = a.getPtr();
    a.setPtr(nil);
    s.free();
}

func void Analyser.handleStructFunc(void* arg, FunctionDecl* d) {
    Analyser* ma = arg;
    IdentifierExpr* prefix = d.getPrefix();
    u32 prefix_name_idx = prefix.getNameIdx();
    assert(prefix);

    u32 index = 0;
    if (prefix_name_idx == ma.prefix_cache_name) {
        index = ma.prefix_cache_idx;
    } else {
        // search data structure
        bool found = false;
        found = ma.prefixes.find(prefix_name_idx, &index);

        if (!found) {
            Decl* decl = ma.mod.findType(prefix_name_idx);
            if (!decl) {
                // TODO search for all symbols for nice Diag
                ma.diags.report(prefix.asExpr().getLoc(), "unknown type '%s'", prefix.getName());
                return;
            }
            if (decl.getKind() != DeclKind.StructType) {
                ma.diags.report(prefix.asExpr().getLoc(), "struct-functions type must be a structs/union");
                return;
            }
            index = ma.prefixes.add(prefix_name_idx);
            ma.struct_decls.addDecl(decl);
        }
        ma.prefix_cache_name = prefix_name_idx;
        ma.prefix_cache_idx = index;
    }

    // TODO check for duplicate names
    ma.struct_decls.addFunc(index, d);
    prefix.setDecl(ma.struct_decls.getDecl(index));
}

func void Analyser.analyseFunctionProto(void* arg, FunctionDecl* d) {
    Analyser* ma = arg;

    ma.analyseGlobalDecl(cast<Decl*>(d));
}

func void Analyser.analyseFunctionBodies(void* arg, FunctionDecl* d) {
    Analyser* ma = arg;

    ma.analyseFunctionBody(d);
}

func void Analyser.analyseGlobalDecl(Analyser* ma, Decl* d) {
    if (d.isChecked()) return;

    if (!ma.pushCheck(d)) return;

    switch (d.getKind()) {
    case Function:
        ma.analyseFunction(cast<FunctionDecl*>(d));
        break;
    case Import:
        break;
    case StructType:
        ma.analyseStructType(cast<StructTypeDecl*>(d));
        break;
    case EnumType:
        ma.analyseEnumType(cast<EnumTypeDecl*>(d));
        break;
    case EnumConstant:
        // TODO
        break;
    case FunctionType:
        ma.analyseFunctionType(d);
        break;
    case AliasType:
        ma.analyseAliasType(cast<AliasTypeDecl*>(d));
        break;
    case Var:
        ma.analyseGlobalVarDecl(cast<VarDecl*>(d));
        break;
    case StaticAssert:
        break;
    }

    d.setChecked();
    ma.popCheck();
}

func void Analyser.handleTypeDecl(void* arg, Decl* d) {
    Analyser* ma = arg;
    ma.analyseGlobalDecl(d);
}

func void Analyser.handleStaticAssert(void* arg, Decl* d) {
    Analyser* ma = arg;
    StaticAssertDecl* sa = cast<StaticAssertDecl*>(d);
    Expr* lhs = sa.getLhs();
    Expr* rhs = sa.getRhs();

    ma.analyseExpr(&lhs, false);
    ma.analyseExpr(&rhs, false);

    if (!lhs.isCtv()) {
        ma.diags.reportRange(lhs.getLoc(), lhs.getRange(), "static_assert element is not a compile-time value");
    }
    if (!rhs.isCtv()) {
        ma.diags.reportRange(rhs.getLoc(), rhs.getRange(), "static_assert element is not a compile-time value");
    }

    // TODO check
}

func void Analyser.handleVarDecl(void* arg, VarDecl* v) {
    Analyser* ma = arg;
    ma.analyseGlobalDecl(v.asDecl());
}

func void Analyser.analyseGlobalVarDecl(Analyser* ma, VarDecl* v) {
    Decl* d = v.asDecl();

    // Note: d.getType() is 0 here! (use refType)
    TypeRef* ref = v.getTypeRef();

    QualType res = ma.analyseTypeRef(ref);

    if (res.isInvalid()) return;
    d.setType(res);

    // /check name
    {
        const char* name = d.getName();
        if (res.isConstant()) {
            if (ctype.islower(name[0])) {
                ma.diags.report(d.getLoc(), "a global constant name must start with an upper case character");
                // Note: dont return
            }
        } else {
            if (ctype.isupper(name[0])) {
                ma.diags.report(d.getLoc(), "a global variable name must start with an lower case character");
                // Note: dont return
            }
        }
    }

    if (v.hasInit()) {
        QualType qt_noflags = QualType.init2(res.getType());
        ma.analyseInitExpr(v.getInit2(), qt_noflags);
        Expr* initval = v.getInit();
        initval.setType(qt_noflags);
    }
}

func bool Analyser.analyseInitExpr(Analyser* ma, Expr** e_ptr, QualType expectedType) {
    Expr* e = *e_ptr;

    InitListExpr* ile = (e.getKind() == ExprKind.InitList) ? cast<InitListExpr*>(e) : nil;

    ArrayType* at = expectedType.getTypeOrNil().asArray();
    if (at) {
        // TODO
    }

    if (ile) {
        return ma.analyseInitListExpr(ile, expectedType);
    }

    //if (e.getKind() == ExprKind.ArrayDesignatedInit) ..
    // TODO DesignatedInitExpr

    QualType res2 = ma.analyseExpr(e_ptr, true);
    if (res2.isInvalid()) return false;

    e = *e_ptr; // re-read since ImplicitCasts could have been inserted

    if (!e.isCtc()) {
        ma.diags.reportRange(e.getLoc(), e.getRange(), "initializer element is not a compile-time constant");
        return false;
    }

    if (!e.isCtv() && expectedType.needsCtvInit()) {
        ma.diags.reportRange(e.getLoc(), e.getRange(), "initializer element is not a compile-time value");
        return false;
    }

    // TODO check type
    return true;
}

func bool Analyser.pushCheck(Analyser* ma, Decl* d) {
    for (u32 i=0; i<ma.checkIndex; i++) {
        if (ma.checkStack[i].decl == d) {
            for (u32 j=i; j<ma.checkIndex; j++) {
                ma.diags.report(d.getLoc(), "circular declaration dependency %s", d.getName());
            }
            // TODO use longjmp here?
            return false;
        }
    }
    // set correct scope for the current Decl (might be in different file than current Decl)
    ma.scope = d.getAST().getPtr();
    ma.checkStack[ma.checkIndex].decl = d;
    ma.checkStack[ma.checkIndex].scope = ma.scope;
    ma.checkIndex++;
    d.setCheckState(DeclCheckState.InProgress);
    return true;
}

func void Analyser.popCheck(Analyser* ma) {
    assert(ma.checkIndex > 0);
    ma.checkIndex--;
    if (ma.checkIndex > 0) ma.scope = ma.checkStack[ma.checkIndex-1].scope;
    else ma.scope = nil;
}

func bool Analyser.analyseInitListExpr(Analyser* ma, InitListExpr* ile, QualType expectedType) {
    // Note: expectedType can be struct or array type

    if (expectedType.isArrayType()) {
        return ma.analyseInitListArray(ile, expectedType);
    }

    if (expectedType.isStructType()) {
        return ma.analyseInitListStruct(ile, expectedType);
    }

    Expr* e = cast<Expr*>(ile);
    ma.diags.report(e.getLoc(), "cannot initialize variable of type %s with initializer list", expectedType.diagName());
    return false;
}

func bool Analyser.analyseInitListArray(Analyser* ma, InitListExpr* ile, QualType expectedType) {
    Expr* e = cast<Expr*>(ile);
    u32 numValues = ile.getNumValues();
    Expr** values = ile.getValues();

    ArrayType* at = expectedType.getArrayType();
    QualType et = at.getElemType();

    bool ok = true;
    bool ctc = true;
    for (u32 i=0; i<numValues; i++) {
        ok |= ma.analyseInitExpr(&values[i], et);
        ctc |= values[i].isCtc();
        // TODO DesignatedInitExpr
    }

    if (ctc) e.setCtc();
    if (!ok) return false;

    // determine real array size
    // TODO handle designators

    if (at.hasSize()) {
        u32 arraySize = at.getSize();
        if (numValues > arraySize) {
            ma.diags.report(values[arraySize].getLoc(), "excess elements in array initializer");
            return false;
        }
    } else {
        // TODO
    }

    return ok;
}

func bool Analyser.analyseInitListStruct(Analyser* ma, InitListExpr* ile, QualType expectedType) {
    // NOTE: expectedType is StructType
    //u32 numValues = ile.getNumValues();
    //Expr** values = ile.getValues();

    // TODO
    return true;
}

func void Analyser.analyseStructType(Analyser* ma, StructTypeDecl* d) {
    NameVector names;
    names.init(d.getNumMembers());

    NameVector locs;
    locs.init(d.getNumMembers());

    ma.analyseStructNames(d, &names, &locs);

    names.free();
    locs.free();

    ma.analyseStructMembers(d);
}

func void Analyser.analyseStructMembers(Analyser* ma, StructTypeDecl* d) {
    u32 count = d.getNumMembers();
    Decl** members = d.getMembers();

    for (u32 i=0; i<count; i++) {
        Decl* member = members[i];
        if (member.getKind() == DeclKind.Var) {
            VarDecl* vd = cast<VarDecl*>(member);
            // Note: dont push to stack, because can self-ref to StructType
            member.setCheckState(DeclCheckState.InProgress);
            ma.analyseStructMember(vd);

            // TODO optional BitField expr
            member.setCheckState(DeclCheckState.Checked);
        } else if (member.getKind() == DeclKind.StructType) {
            StructTypeDecl* sub = cast<StructTypeDecl*>(member);
            ma.analyseStructMembers(sub);
            member.setCheckState(DeclCheckState.Checked);
        }
    }

    // TODO use ctv_analyser to get struct size, set it to struct
}

func void Analyser.analyseStructNames(Analyser* ma, StructTypeDecl* d, NameVector* names, NameVector* locs) {
    // note: already checked that struct doesn't have 0 members
    u32 count = d.getNumMembers();
    Decl** members = d.getMembers();

    for (u32 i=0; i<count; i++) {
        // there can more members in anonymous sub-structs
        Decl* member = members[i];
        u32 name_idx = member.getNameIdx();
        u32 old_index;

        StructTypeDecl* sub = nil;
        if (member.getKind() == DeclKind.StructType) sub = cast<StructTypeDecl*>(member);

        if (name_idx == 0) {
            // can be anonymous sub-struct/union or anonymous bit-field
            if (member.getKind() == DeclKind.StructType) {
                ma.analyseStructNames(sub, names, locs);
            }
        } else {
            if (names.find(name_idx, &old_index)) {
                ma.diags.report(member.getLoc(), "duplicate %s member '%s'", d.isStruct() ? "struct" : "union", member.getName());
                ma.diags.note(locs.get(old_index), "previous declaration is here");
                return;
            }
            names.add(name_idx);
            locs.add(member.getLoc());

            if (member.getKind() == DeclKind.StructType) {
                NameVector sub_names;
                sub_names.init(sub.getNumMembers());
                NameVector sub_locs;
                sub_locs.init(sub.getNumMembers());
                ma.analyseStructNames(sub, &sub_names, &sub_locs);
                sub_names.free();
                sub_locs.free();
            }
        }
    }
}

func void Analyser.analyseFunctionType(Analyser* ma, Decl* d) {
    FunctionTypeDecl* ftd = cast<FunctionTypeDecl*>(d);
    FunctionDecl* fd = ftd.getFunction();

    ma.analyseFunction(fd);
}

func void Analyser.analyseFunction(Analyser* ma, FunctionDecl* fd) {
    // return type
    QualType qt = ma.analyseTypeRef(fd.getTypeRef());
    if (qt.isInvalid()) return;

    fd.setRType(qt);

    // analyse params
    u32 num_params = fd.getNumParams();
    for (u32 i=0; i<num_params; i++) {
        VarDecl* v = fd.getParam(i);
        TypeRef* ref = v.getTypeRef();

        QualType res = ma.analyseTypeRef(ref);
        if (res.isInvalid()) continue;

        v.asDecl().setType(res);
        // TODO analyse default value
    }
}

func void Analyser.analyseAliasType(Analyser* ma, AliasTypeDecl* d) {
    TypeRef* ref = d.getTypeRef();
    QualType res = ma.analyseTypeRef(ref);
    QualType qt = d.asDecl().getType();
    // Note: type is always AliasType
    Type* at = qt.getTypeOrNil();
    QualType canon = res.getCanonicalType();
    canon.copyQuals(res);
    at.setCanonicalType(canon);
}

func void Analyser.analyseEnumType(Analyser* ma, EnumTypeDecl* d) {
    u32 num_constants = d.getNumConstants();
    EnumConstantDecl** constants = d.getConstants();
    u32 value = 0;

    // TODO we need a file-dependent lookup here, to see which imports we can use!
    for (u32 i=0; i<num_constants; i++) {
        EnumConstantDecl* c = constants[i];

        // check for duplicate names
        const char* name = c.asDecl().getName();
        for (u32 j=0; j<i; j++) {
            const Decl* other = constants[j].asDecl();
            if (other.getName() == name) {
                ma.diags.report(c.asDecl().getLoc(), "duplicate enum constant name '%s'", name);
                ma.diags.note(other.getLoc(), "previous declaration is here");
                // TODO ma.diags.info(constants[j].asDecl().getLoc(), "other declaration is here");
                return;
            }
        }

        Expr* initval = c.getInit();
        if (initval) {
            QualType res = ma.analyseExpr(c.getInit2(), true);
            initval = c.getInit();  // re-read in case of ImplicitCast has been inserted
            if (!initval.isCtv()) {
                ma.diags.reportRange(initval.getLoc(), initval.getRange(), "initializer is not a compile-time value");
                return;
            }
            ctv_analyser.Value ctv = ctv_analyser.get_value(initval);
            if (ctv.uvalue < value) {
                ma.diags.report(initval.getLoc(), "enum constants need to increase (value %u, previous %u)", ctv.uvalue, value-1);
                return;
            }
            value = cast<u32>(ctv.uvalue);
        }
        // TODO check if constants fit in impl type
        c.setValue(value);
        c.asDecl().setChecked();
        value++;
    }
}

func void Analyser.analyseStructMember(Analyser* ma, VarDecl* v) {
    Decl* d = v.asDecl();

    TypeRef* ref = v.getTypeRef();

    // TODO pass public
    QualType res = ma.analyseTypeRef(ref);
    if (res.isInvalid()) return;
    d.setType(res);

    // TODO check attributes

    // TODO check initValue
}

func QualType Analyser.analyseUserTypeRef(Analyser* ma, TypeRef* ref) {
    const Ref* prefix = ref.getPrefix();
    const Ref* user = ref.getUser();

    Decl* d = nil;
    if (prefix) {
        Module* mod = ma.scope.findModule(prefix.name_idx, prefix.loc);
        if (!mod) return QualType.init0();

        d = ma.scope.findGlobalSymbolInModule(mod, user.name_idx, user.loc);
    } else {
        d = ma.scope.findType(user.name_idx, user.loc);
    }
    if (!d) return QualType.init0();

    if (!d.isTypeDecl()) {
        ma.diags.report(user.loc, "%s is not a type", ast.idx2name(user.name_idx));
        return QualType.init0();
    }

    // TODO need used_public?
    bool external = (ma.mod != d.getModule());
    if (!d.isPublic() && external) {
        ma.diags.report(user.loc, "%s is not public", ast.idx2name(user.name_idx));
        return QualType.init0();
    }

    bool full = (ref.getNumPointers() == 0);
    DeclCheckState state = d.getCheckState();

    if (full && state == DeclCheckState.InProgress) {
        ma.diags.report(user.loc, "circular declaration");
        return QualType.init0();
    }

    if (full && state != DeclCheckState.Checked) {
        ma.analyseGlobalDecl(d);
    }

    d.setUsed();
    if (/* used_public || */ external) d.setUsedPublic();

    QualType qt = d.getType();
    // TODO longjmp?
    if (qt.isValid()) ref.setDest(qt.getIndex());

    return qt;
}

func QualType Analyser.analyseTypeRef(Analyser* ma, TypeRef* ref) {
    //ref.dump();
    QualType resolved = { 0 }
    if (ref.isUser()) {
        resolved = ma.analyseUserTypeRef(ref);
        if (resolved.isInvalid()) return resolved;
        assert(resolved.hasCanonicalType());
    } else {
        BuiltinTypeKind kind = ref.getBuiltinKind();
        resolved = ma.builder.actOnBuiltinType(kind);
    }

    if (ref.isConst()) resolved.setConst();
    if (ref.isVolatile()) resolved.setVolatile();

    u32 num_ptrs = ref.getNumPointers();
    for (u32 i=0; i<num_ptrs; i++) {
        resolved = ma.builder.actOnPointerType(resolved) ;
    }

    u32 num_arrays = ref.getNumArrays();
    for (u32 i=0; i<num_arrays; i++) {
        Expr* sizeExpr = ref.getArray(i);  // note: ImplicitCast could have been inserted
        u32 size = 0;
        if (sizeExpr) {
            ma.analyseExpr(ref.getArray2(i), true);
            sizeExpr = ref.getArray(i);  // note: ImplicitCast could have been inserted

            if (!sizeExpr.isCtv()) {
                ma.diags.reportRange(sizeExpr.getLoc(), sizeExpr.getRange(), "array size is not a compile-time value");
            } else {
                ctv_analyser.Value value = ctv_analyser.get_value(sizeExpr);
                if (value.isNegative()) {
                    ma.diags.reportRange(sizeExpr.getLoc(), sizeExpr.getRange(), "array size has negative value %d", value.svalue);
                }
                size = cast<u32>(value.uvalue);
            }
        }
        //NOTE: we dont store ref.isIncrArray() (yet)
        resolved = ma.builder.actOnArrayType(resolved, sizeExpr != nil, size);
    }

    //resolved.dump();
    //resolved.dump_full();
    return resolved;
}

#if 0
func QualType Analyser.analyseType(Analyser* ma, QualType qt, bool full) {
    if (qt.hasCanonicalType()) return qt;

    QualType resolved = { 0 }

    Type* t = qt.getType();
    switch (t.getKind()) {
    case Builtin:
        return qt;
    case Pointer:
        PointerType* pt = cast<PointerType*>(t);
        QualType inner = pt.getInner();
        QualType res = ma.analyseType(inner, false);
        if (res.isInvalid()) break;

        if (!res.hasCanonicalType()) {
            stdio.printf("PTR MISSING CANONICAL\n");
            res.dump_full();
        }
        assert(res.hasCanonicalType());

        if (inner.ptr == res.ptr) {
            resolved = qt;
            t.setCanonicalType(qt);
        } else {
            Type* ptrType = ast.getPointerType(res);
            if (!ptrType.hasCanonicalType()) {
                ptrType.setCanonicalType(QualType.init2(ptrType));
            }
            resolved.set(ptrType);
        }
        break;
    case Array:
        ArrayType* at = cast<ArrayType*>(t);
        QualType inner = at.getElemType();
        QualType res = ma.analyseType(inner, true);
        if (res.isInvalid()) break;

        if (!res.hasCanonicalType()) {
            stdio.printf("ARRAY MISSING CANONICAL\n");
            res.dump_full();
        }
        assert(res.hasCanonicalType());

        if (at.hasSizeExpr()) {
            QualType res2 = ma.analyseExpr(at.getSizeExpr2(), false);
            if (res2.isInvalid()) break;

            Expr* sizeExpr = at.getSizeExpr();
            if (!sizeExpr.isCtv()) {
                ma.diags.reportRange(sizeExpr.getLoc(), sizeExpr.getRange(), "array size is not a compile-time value");
                break;
            }

            ctv_analyser.Value value = ctv_analyser.get_value(sizeExpr);
            if (value.isNegative()) {
                ma.diags.reportRange(sizeExpr.getLoc(), sizeExpr.getRange(), "array size has negative value %d", value.svalue);
                break;
            }
            at.setSize(cast<u32>(value.uvalue));
        }

        if (inner.ptr == res.ptr) {
            t.setCanonicalType(qt);
            resolved = qt;
        } else {
            // TODo use builder
            Type* t2 = cast<Type*>(ArrayType.create(ma.context, res, at.hasSize(), at.getSize()));
            //Type* t2 = cast<Type*>(ArrayType.create(ma.context, res, at.isIncremental(), at.getSizeExpr()));
            resolved.set(t2);
            t2.setCanonicalType(resolved);
        }
        break;
    case Struct:
        assert(0); // cannot happen
        break;
    case Enum:
        assert(0); // cannot happen
        break;
    case Function:
        assert(0); // cannot happen
        break;
    case Alias:
        assert(0); // cannot happen?
        break;
    case Module:
        assert(0); // cannot happen
        break;
    }

    return resolved;
}
#endif


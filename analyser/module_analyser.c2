/* Copyright 2022 Bas van den Berg
*/

module module_analyser;

import ast_context;
import ast local;
import ctv_analyser;
import diagnostics;
import module_list;
import scope;

import string;
import stdlib;

const u32 MaxDepth = 8;

// TEMP here until we have templates
type NameVector struct {
    u32* data;
    u32 count;
    u32 capacity;
}

func void NameVector.init(NameVector* v, u32 capacity) {
    v.data = nil;
    v.count = 0;
    v.capacity = capacity / 2; // workaround resize
    v.resize();
}

func void NameVector.free(NameVector* v) {
    stdlib.free(v.data);
    v.count = 0;
    v.capacity = 0;
    v.data = nil;
}

func void NameVector.resize(NameVector* v) {
    v.capacity = v.capacity == 0 ? 4 : v.capacity * 2;
    void* data2 = stdlib.malloc(v.capacity * sizeof(u32));
    if (v.data) {
        string.memcpy(data2, v.data, v.count * sizeof(u32));
        stdlib.free(v.data);
    }
    v.data = data2;
}

func u32 NameVector.add(NameVector* v, u32 name_idx) {
    if (v.count == v.capacity) v.resize();

    u32 index = v.count;
    v.data[index] = name_idx;
    v.count++;
    return index;
}

func u32 NameVector.get(const NameVector* v, u32 idx) {
    return v.data[idx];
}

func bool NameVector.find(NameVector* v, u32 name_idx, u32* index) {
    for (u32 i=0; i<v.count; i++) {
        if (v.data[i] == name_idx) {
            *index = i;
            return true;
        }
    }
    return false;
}

type StackLayer struct {
    Decl* decl;
    scope.Scope* scope;
}

type ModuleAnalyser struct {
    Module* mod;
    diagnostics.Diags* diags;
    ast_context.Context* context;
    module_list.ModList* allmodules;

    // collect struct-functions
    u32 prefix_cache_name;
    u32 prefix_cache_idx;
    // Vector<const char*> prefixes;
    NameVector prefixes;
    StructDecls struct_decls;

    // Type + Vars analysis
    StackLayer[MaxDepth] checkStack;
    u32 checkIndex;
    scope.Scope* scope; // points to top layer in stack
}

public func void check(diagnostics.Diags* diags, ast_context.Context* context, module_list.ModList* allmodules, Module* mod) {
    ModuleAnalyser ma;
    string.memset(&ma, 0, sizeof(ma));
    ma.diags = diags;
    ma.context = context;
    ma.allmodules = allmodules;
    ma.mod = mod;

    //stdio.printf("analysing module %s\n", ma.mod.getName());

    mod.visitASTs(ModuleAnalyser.createGlobalScope, &ma);

    // NOTE: C2C ModuleAnalyser::step1()
    // step 3a: collect incremental arrays
    // TODO use visitIncrArrays()

    // step 3b: collect struct functions
    mod.visitStructFunctions(ModuleAnalyser.handleStructFunc, &ma);

    for (u32 i=0; i<ma.struct_decls.count; i++) {
        const StructDeclInfo* info = &ma.struct_decls.data[i];
        StructTypeDecl* fd = cast<StructTypeDecl*>(info.decl);
        fd.setStructFunctions(ma.context, info.functions.getDecls(), info.functions.size());
    }

    ma.prefixes.free();  // Note: free here already (safe to be freed twice)
    ma.struct_decls.free();

    // NOTE: C2C ModuleAnalyser::step2()
    // analyse types
    mod.visitTypeDecls(ModuleAnalyser.handleTypeDecl, &ma);

    mod.visitVarDecls(ModuleAnalyser.handleVarDecl, &ma);

    // analyse vars
    // analyse static asserts
    // analyse function protos

    // NOTE: C2C ModuleAnalyser::step3()
    // analyse functionbodies

    mod.visitASTs(ModuleAnalyser.deleteScope, &ma);
    ma.free();
}

func void ModuleAnalyser.free(ModuleAnalyser* ma) {
    ma.prefixes.free();
    ma.struct_decls.free();
}

func void ModuleAnalyser.createGlobalScope(void* arg, AST* a) {
    ModuleAnalyser* ma = arg;
    scope.Scope* s = scope.create(ma.allmodules,
                                  ma.diags,
                                  a.getImports(),
                                  ma.mod,
                                  ma.mod.getSymbols());
    a.setPtr(s);
}

func void ModuleAnalyser.deleteScope(void* arg, AST* a) {
    scope.Scope* s = a.getPtr();
    a.setPtr(nil);
    s.free();
}

func void ModuleAnalyser.handleStructFunc(void* arg, FunctionDecl* d) {
    ModuleAnalyser* ma = arg;
    IdentifierExpr* prefix = d.getPrefix();
    u32 prefix_name_idx = prefix.getNameIdx();
    assert(prefix);

    u32 index = 0;
    if (prefix_name_idx == ma.prefix_cache_name) {
        index = ma.prefix_cache_idx;
    } else {
        // search data structure
        bool found = false;
        found = ma.prefixes.find(prefix_name_idx, &index);

        if (!found) {
            Decl* decl = ma.mod.findType(prefix_name_idx);
            if (!decl) {
                // TODO search for all symbols for nice Diag
                ma.diags.report(prefix.asExpr().getLoc(), "unknown type '%s'", prefix.getName());
                return;
            }
            if (decl.getKind() != DeclKind.StructType) {
                ma.diags.report(prefix.asExpr().getLoc(), "struct-functions type must be a structs/union");
                return;
            }
            index = ma.prefixes.add(prefix_name_idx);
            ma.struct_decls.addDecl(decl);
        }
        ma.prefix_cache_name = prefix_name_idx;
        ma.prefix_cache_idx = index;
    }

    // TODO check for duplicate names
    ma.struct_decls.addFunc(index, d);
    prefix.setDecl(ma.struct_decls.getDecl(index));
}

func void ModuleAnalyser.analyseGlobalDecl(ModuleAnalyser* ma, Decl* d) {
    if (d.isChecked()) return;

    if (!ma.pushCheck(d)) return;

    switch (d.getKind()) {
    case Function:
        break;
    case Import:
        break;
    case StructType:
        ma.analyseStructType(cast<StructTypeDecl*>(d));
        break;
    case EnumType:
        ma.analyseEnumType(cast<EnumTypeDecl*>(d));
        break;
    case EnumConstant:
        // TODO
        break;
    case FunctionType:
        // TODO
        break;
    case AliasType:
        break;
    case Var:
        ma.analyseGlobalVarDecl(cast<VarDecl*>(d));
        break;
    case StaticAssert:
        break;
    }

    d.setChecked();
    ma.popCheck();
}

func void ModuleAnalyser.handleTypeDecl(void* arg, Decl* d) {
    ModuleAnalyser* ma = arg;
    ma.analyseGlobalDecl(d);
}

func void ModuleAnalyser.handleVarDecl(void* arg, VarDecl* v) {
    ModuleAnalyser* ma = arg;
    ma.analyseGlobalDecl(v.asDecl());
}

func void ModuleAnalyser.analyseGlobalVarDecl(ModuleAnalyser* ma, VarDecl* v) {
    Decl* d = v.asDecl();

    QualType qt = d.getType();
    //qt.dump_full();

    QualType res = ma.analyseType(qt, true);
    //res.dump_full();

    if (res.isInvalid()) return;
    d.setType(res);

    if (v.hasInit()) {
        ma.analyseInitExpr(v.getInit2(), res);
        // TODO possibly insert a cast (FunctionPtrDecay, etc)
        // TODO check for other cast here as well
        Expr* initval = v.getInit();
        initval.setType(res);
    }
}

func void ModuleAnalyser.analyseInitExpr(ModuleAnalyser* ma, Expr** e_ptr, QualType expectedType) {
    Expr* e = *e_ptr;
    ArrayType* at = expectedType.getTypeOrNil().asArray();
    if (at) {
        // TODO
        return;
    }
    InitListExpr* ile = nil;
    if (e.getKind() == ExprKind.InitList) {
        // TODO
        return;
    }
    QualType res2 = ma.analyseExpr(e_ptr, true);
    if (res2.isInvalid()) return;

    e = *e_ptr; // re-read since ImplicitCasts could have been inserted
    if (!e.isCtv()) {
        ma.diags.report(e.getLoc(), "initializer is not a compile-time value");
        return;
    }
    // TODO check type
}

func bool ModuleAnalyser.pushCheck(ModuleAnalyser* ma, Decl* d) {
    for (u32 i=0; i<ma.checkIndex; i++) {
        if (ma.checkStack[i].decl == d) {
            for (u32 j=i; j<ma.checkIndex; j++) {
                ma.diags.report(d.getLoc(), "circular declaration dependency %s", d.getName());
            }
            // TODO use longjmp here?
            return false;
        }
    }
    // set correct scope for the current Decl (might be in different file than current Decl)
    ma.scope = d.getAST().getPtr();
    ma.checkStack[ma.checkIndex].decl = d;
    ma.checkStack[ma.checkIndex].scope = ma.scope;
    ma.checkIndex++;
    d.setCheckState(DeclCheckState.InProgress);
    return true;
}

func void ModuleAnalyser.popCheck(ModuleAnalyser* ma) {
    assert(ma.checkIndex > 0);
    ma.checkIndex--;
    if (ma.checkIndex > 0) ma.scope = ma.checkStack[ma.checkIndex-1].scope;
    else ma.scope = nil;
}

func void ModuleAnalyser.analyseStructType(ModuleAnalyser* ma, StructTypeDecl* d) {
    NameVector names;
    names.init(d.getNumMembers());

    NameVector locs;
    locs.init(d.getNumMembers());

    ma.analyseStructNames(d, &names, &locs);

    names.free();
    locs.free();

    ma.analyseStructMembers(d);
}

func void ModuleAnalyser.analyseStructMembers(ModuleAnalyser* ma, StructTypeDecl* d) {
    u32 count = d.getNumMembers();
    Decl** members = d.getMembers();

    for (u32 i=0; i<count; i++) {
        Decl* member = members[i];
        if (member.getKind() == DeclKind.Var) {
            VarDecl* vd = cast<VarDecl*>(member);
            // Note: dont push to stack, because can self-ref to StructType
            member.setCheckState(DeclCheckState.InProgress);
            ma.analyseStructMember(vd);

            // TODO optional BitField expr
            member.setCheckState(DeclCheckState.Checked);
        } else if (member.getKind() == DeclKind.StructType) {
            StructTypeDecl* sub = cast<StructTypeDecl*>(member);
            ma.analyseStructMembers(sub);
            member.setCheckState(DeclCheckState.Checked);
        }
    }

    // TODO use ctv_analyser to get struct size, set it to struct
}

func void ModuleAnalyser.analyseStructNames(ModuleAnalyser* ma, StructTypeDecl* d, NameVector* names, NameVector* locs) {
    // note: already checked that struct doesn't have 0 members
    u32 count = d.getNumMembers();
    Decl** members = d.getMembers();

    for (u32 i=0; i<count; i++) {
        // there can more members in anonymous sub-structs
        Decl* member = members[i];
        u32 name_idx = member.getNameIdx();
        u32 old_index;

        StructTypeDecl* sub = nil;
        if (member.getKind() == DeclKind.StructType) sub = cast<StructTypeDecl*>(member);

        if (name_idx == 0) {
            // can be anonymous sub-struct/union or anonymous bit-field
            if (member.getKind() == DeclKind.StructType) {
                ma.analyseStructNames(sub, names, locs);
            }
        } else {
            if (names.find(name_idx, &old_index)) {
                ma.diags.report(member.getLoc(), "duplicate %s member '%s'", d.isStruct() ? "struct" : "union", member.getName());
                ma.diags.note(locs.get(old_index), "previous declaration is here");
                return;
            }
            names.add(name_idx);
            locs.add(member.getLoc());

            if (member.getKind() == DeclKind.StructType) {
                NameVector sub_names;
                sub_names.init(sub.getNumMembers());
                NameVector sub_locs;
                sub_locs.init(sub.getNumMembers());
                ma.analyseStructNames(sub, &sub_names, &sub_locs);
                sub_names.free();
                sub_locs.free();
            }
        }
    }
}

func void ModuleAnalyser.analyseEnumType(ModuleAnalyser* ma, EnumTypeDecl* d) {
    u32 num_constants = d.getNumConstants();
    EnumConstantDecl** constants = d.getConstants();
    u32 value = 0;

    // TODO we need a file-dependent lookup here, to see which imports we can use!
    for (u32 i=0; i<num_constants; i++) {
        EnumConstantDecl* c = constants[i];

        // check for duplicate names
        const char* name = c.asDecl().getName();
        for (u32 j=0; j<i; j++) {
            const Decl* other = constants[j].asDecl();
            if (other.getName() == name) {
                ma.diags.report(c.asDecl().getLoc(), "duplicate enum constant name '%s'", name);
                ma.diags.note(other.getLoc(), "previous declaration is here");
                // TODO ma.diags.info(constants[j].asDecl().getLoc(), "other declaration is here");
                return;
            }
        }

        Expr* initval = c.getInit();
        if (initval) {
            QualType res = ma.analyseExpr(c.getInit2(), true);
            initval = c.getInit();  // re-read in case of ImplicitCast has been inserted
            if (!initval.isCtv()) {
                ma.diags.report(initval.getLoc(), "initializer is not a compile-time value");
                return;
            }
            ctv_analyser.Value ctv = ctv_analyser.get_value(initval);
            if (ctv.uvalue < value) {
                ma.diags.report(initval.getLoc(), "enum constants need to increase (value %u, previous %u)", ctv.uvalue, value-1);
                return;
            }
            value = cast<u32>(ctv.uvalue);
        }
        // TODO check if constants fit in impl type
        c.setValue(value);
        c.asDecl().setChecked();
        value++;
    }
}

func void ModuleAnalyser.analyseStructMember(ModuleAnalyser* ma, VarDecl* d) {
    QualType qt = d.asDecl().getType();

    // TODO pass public, location
    QualType res = ma.analyseType(qt, true);

    // TODO check attributes

    // TODO check initValue
}


func QualType ModuleAnalyser.analyseDecl(ModuleAnalyser* ma, Decl* d) {
    QualType resolved = { 0 }
    // TODO
    return resolved;
}

func QualType ModuleAnalyser.analyseType(ModuleAnalyser* ma, QualType qt, bool full) {
    if (qt.hasCanonicalType()) return qt;

    QualType resolved = { 0 }

    Type* t = qt.getType();
    switch (t.getKind()) {
    case Builtin:
        return qt;
    case Pointer:
        PointerType* pt = cast<PointerType*>(t);
        QualType inner = pt.getInner();
        QualType res = ma.analyseType(inner, false);
        if (res.isInvalid()) break;
        if (inner.ptr == res.ptr) {
            resolved = qt;
            t.setCanonicalType(qt);
        } else {
            Type* t2 = res.getTypeOrNil();
            Type* ptrType = t2.getPtrType();
            if (!ptrType) {
                ptrType = cast<Type*>(PointerType.create(ma.context, res));
                ptrType.setCanonicalType(resolved);
                t2.setPtrType(ptrType);
            }
            resolved.set(ptrType);
        }
        break;
    case Array:
        ArrayType* at = cast<ArrayType*>(t);
        QualType inner = at.getElemType();
        QualType res = ma.analyseType(inner, true);
        if (res.isInvalid()) break;

        Expr* size = at.getSizeExpr();
        if (size) {
            QualType res2 = ma.analyseExpr(at.getSizeExpr2(), false);
            if (res2.isInvalid()) break;
            // TODO check if ok / ctv
            size = at.getSizeExpr();    // re-read in case of ImplicitCast insertion
        }

        if (inner.ptr == res.ptr) {
            resolved = qt;
            t.setCanonicalType(res);
        } else {
            Type* t2 = cast<Type*>(ArrayType.create(ma.context, res, at.isIncremental(), at.getSizeExpr()));
            resolved.set(t2);
            t2.setCanonicalType(resolved);
        }
        break;
    case Ref:
        resolved = ma.analyseRefType(cast<RefType*>(t), full);
        break;
    case Struct:
        assert(0); // cannot happen
        break;
    case Enum:
        assert(0); // cannot happen
        break;
    case Function:
        assert(0); // cannot happen
        break;
    case Module:
        assert(0); // cannot happen
        break;
    }

    return resolved;
}

func QualType ModuleAnalyser.analyseRefType(ModuleAnalyser* ma, RefType* rt, bool full) {
    IdentifierExpr* prefix = rt.getPrefix();
    IdentifierExpr* ref = rt.getRef();

    Decl* d = nil;

    if (prefix) { // module.Type
        Module* mod = ma.scope.findModule(prefix.getNameIdx(), prefix.asExpr().getLoc());
        if (!mod) return QualType.init0();

        d = ma.scope.findGlobalSymbolInModule(mod, ref.getNameIdx(), ref.asExpr().getLoc());
        prefix.setKind(IdentifierKind.Module);
    } else {    // Type
        d = ma.scope.findType(ref.getNameIdx(), ref.asExpr().getLoc());
    }
    if (!d) return QualType.init0();

    if (!d.isTypeDecl()) {
        ma.diags.report(ref.asExpr().getLoc(), "%s is not a type", ref.getName());
        return QualType.init0();
    }

    // TODO need used_public?
    bool external = (ma.mod != d.getModule());
    if (!d.isPublic() && external) {
        ma.diags.report(ref.asExpr().getLoc(), "%s is not public", ref.getName());
        return QualType.init0();
    }

    DeclCheckState state = d.getCheckState();
    if (full && state == DeclCheckState.InProgress) {
        ma.diags.report(prefix.asExpr().getLoc(), "circular declaration");
        return QualType.init0();
    }

    if (full && state != DeclCheckState.Checked) {
        QualType q = ma.analyseDecl(d);
        // TODO longjmp?
        if (q.isInvalid()) return QualType.init0();
    }

    d.setUsed();
    if (/* used_public || */ external) d.setUsedPublic();

    ref.setDecl(d);
    ref.setKind(IdentifierKind.Type);

    QualType result = d.getType();
    // TODO add const/volatile flags (copy in 1 step)
    return result;
}


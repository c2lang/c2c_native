/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module module_analyser;

import ast local;
import size_analyser;
import src_loc local;

fn QualType Analyser.analyseBuiltin(Analyser* ma, Expr** e_ptr) {
    Expr* e = *e_ptr;
    BuiltinExpr* b = cast<BuiltinExpr*>(e);

    switch (b.getKind()) {
    case Sizeof:
        return ma.analyseSizeof(b);
    case Elemsof:
        return ma.analyseElemsof(b);
    case EnumMin:   fallthrough;
    case EnumMax:
        return ma.analyseEnumMinMax(b);
    case OffsetOf:
        return ma.analyseOffsetOf(b);
    case ToContainer:
        return ma.analyseToContainer(b);
    }

    return QualType_Invalid;
}

fn QualType Analyser.analyseSizeof(Analyser* ma, BuiltinExpr* e) {
    Expr* inner = e.getInner();
    assert(inner);

    bool savedPublic = ma.usedPublic;
    ma.usedPublic = false;
    QualType qt;
    if (inner.isType()) {
        TypeExpr* te = cast<TypeExpr*>(inner);
        TypeRef* ref = te.getTypeRef();
        qt = ma.analyseTypeRef(ref);
        inner.setType(qt);
    } else {
        // is Identifier/memberExpr, could still be Type!

        qt = ma.analyseExpr(&inner, false, 0); // dont set side
        if (qt.isInvalid()) return QualType_Invalid;

        // TODO extract to function
        if (qt.isStruct()) {
            StructType* st = qt.getStructType();
            const StructTypeDecl* std = st.getDecl();
            if (std.isOpaque()) {
                const Decl* d = cast<Decl*>(std);
                bool is_external = ma.mod != d.getModule();
                if (is_external) {
                    ma.error(inner.getLoc(), "opaque type '%s' used by value", qt.diagName());
                }
            }
        }
    }
    ma.usedPublic = savedPublic;
    if (qt.isInvalid()) return QualType_Invalid;

    size_analyser.TypeSize info = size_analyser.sizeOfType(qt);
    e.setUValue(info.size);
    return builtins[BuiltinKind.UInt32];
}

fn QualType Analyser.analyseElemsof(Analyser* ma, BuiltinExpr* b) {
    // could be EnumType or array VarDecl

    Expr* inner = b.getInner();
    bool savedPublic = ma.usedPublic;
    ma.usedPublic = false;
    QualType qt = ma.analyseExpr(&inner, false, RHS);
    ma.usedPublic = savedPublic;
    if (qt.isInvalid()) return qt;

    const ArrayType* at = qt.getArrayTypeOrNil();
    if (at) {
        b.setUValue(at.getSize());
        return builtins[BuiltinKind.UInt32];
    }
    const EnumType* et = qt.getEnumTypeOrNil();
    if (et) {
        const EnumTypeDecl* etd = et.getDecl();
        b.setUValue(etd.getNumConstants());
        return builtins[BuiltinKind.UInt32];
    }
    ma.error(inner.getLoc(), "elemsof can only be used on arrays/enums");
    return QualType_Invalid;
}

fn QualType Analyser.analyseEnumMinMax(Analyser* ma, BuiltinExpr* b) {
    Expr* inner = b.getInner();
    QualType qt = ma.analyseExpr(&inner, false, RHS);
    if (qt.isInvalid()) return QualType_Invalid;

    EnumType* et = qt.getEnumTypeOrNil();
    if (!et) {
        const char* kind = (b.getKind() == BuiltinExprKind.EnumMin) ? "enum_min" : "enum_max";
        ma.error(inner.getLoc(), "%s can only be used on enum types", kind);
        return QualType_Invalid;
    }

    EnumTypeDecl* etd = et.getDecl();
    u32 num = etd.getNumConstants();
    EnumConstantDecl** constants = etd.getConstants();

    u32 index = 0;
    if (b.getKind() == BuiltinExprKind.EnumMax) index = num-1;
    // Since enum constants must be in-order return value of first/last
    b.setValue(constants[index].getValue());

    return etd.getImplType();
}

fn QualType Analyser.analyseOffsetOf(Analyser* ma, BuiltinExpr* b) {
    Expr* e = cast<Expr*>(b);
    Expr* inner = b.getInner();
    QualType qt = ma.analyseExpr(&inner, false, RHS);
    if (qt.isInvalid()) return QualType_Invalid;

    e.setType(builtins[BuiltinKind.UInt32]);

    StructType* st = qt.getStructTypeOrNil();
    if (!st) {
        ma.error(inner.getLoc(), "offsetof can only be used on struct types");
        return QualType_Invalid;
    }

    StructTypeDecl* std = st.getDecl();
    if (!ma.checkOpaque(std, inner.getLoc())) return QualType_Invalid;

    Expr* member = b.getOffsetOfMember();
    Decl* d = ma.findMemberOffset(b, std, member);
    if (!d) return QualType_Invalid;
    return e.getType();
}

fn QualType Analyser.analyseToContainer(Analyser* ma, BuiltinExpr* b) {
    // syntax: Type* to_container(Type, member, member*)
    //         const Type* to_container(Type, member, const member*)
    Expr* inner = b.getInner();
    QualType qt = ma.analyseExpr(&inner, false, RHS);
    if (qt.isInvalid()) return QualType_Invalid;

    StructType* st = qt.getStructTypeOrNil();
    if (!st) {
        ma.error(inner.getLoc(), "to_container can only be used on struct types");
        return QualType_Invalid;
    }

    StructTypeDecl* std = st.getDecl();
    if (!ma.checkOpaque(std, inner.getLoc())) return QualType_Invalid;

    // check member
    Expr* member = b.getToContainerMember();
    Decl* d = ma.findMemberOffset(b, std, member);
    if (!d) return QualType_Invalid;
    QualType qmem = d.getType();
    qmem = ma.builder.actOnPointerType(qmem);

    // check ptr
    QualType qptr = ma.analyseExpr(b.getToContainerPointer2(), false, RHS);
    if (qptr.isInvalid()) return QualType_Invalid;

    // Note: 3rd argument may be const ptr, but result will be const ptr as well then
    Expr* eptr = b.getToContainerPointer();
    if (!ma.checker.check(qptr, qmem, b.getToContainerPointer2(), eptr.getLoc())) {
        return QualType_Invalid;
    }

    if (qptr.isConstPtr()) qt.setConst();
    return ma.builder.actOnPointerType(qt);
}

fn Decl* Analyser.findMemberOffset(Analyser* ma, BuiltinExpr* b, StructTypeDecl* std, Expr* member) {
    u32 base_offset = 0;
    Decl* d = nil;

    if (member.isIdentifier()) {
        IdentifierExpr* i = cast<IdentifierExpr*>(member);
        u32 name_idx = i.getNameIdx();

        d = ma.findStructMemberOffset(std, name_idx, member.getLoc(), &base_offset);
        if (!d) return nil;

        base_offset += decl2offset(d);
        i.setDecl(d);
        d.setUsed();
        member.setLValue();
        i.setKind(IdentifierKind.StructMember);
    } else {
        assert(member.isMember());
        MemberExpr* m = cast<MemberExpr*>(member);
        for (u32 i=0; i<m.getNumRefs(); i++) {
            u32 name_idx = m.getNameIdx(i);
            SrcLoc loc = m.getLoc(i);
            d = ma.findStructMemberOffset(std, name_idx, loc, &base_offset);
            if (!d) return nil;

            if (d.isStructType()) std = cast<StructTypeDecl*>(d);
            base_offset += decl2offset(d);
            d.setUsed();
            m.setDecl(d, i);
        }
        m.setKind(IdentifierKind.StructMember);
    }
    member.setType(d.getType());
    b.setUValue(base_offset);
    return d;
}

fn Decl* Analyser.findStructMemberOffset(Analyser* ma, StructTypeDecl* s, u32 name_idx, SrcLoc loc, u32* base) {
    Decl* d = s.findMember(name_idx, base);
    if (!d) {
        ma.memberError(name_idx, loc, s);
        return nil;
    }

    return d;
}

fn u32 decl2offset(const Decl* d) {
    if (d.isVariable()) {
        VarDecl* vd = cast<VarDecl*>(d);
        return vd.getOffset();
    }
    assert(d.isStructType());
    StructTypeDecl* std = cast<StructTypeDecl*>(d);
    return std.getOffset();
}


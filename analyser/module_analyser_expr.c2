/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module module_analyser;

import ast local;
import ast_builder;
import size_analyser;
import src_loc local;
import scope;

import stdio;

// TODO move to AnalyserUtils
func QualType getPointerFromArray(ast_builder.Builder* builder, QualType q) {
    // Dont get canonical
    const ArrayType* a = cast<ArrayType*>(q.getTypeOrNil());
    QualType elem = a.getElemType();
    QualType res = builder.actOnPointerType(elem);
    return res;
}

func QualType Analyser.analyseExpr(Analyser* ma, Expr** e_ptr, bool need_rvalue, u32 side) {
    assert(e_ptr);
    QualType result = ma.analyseExprInner(e_ptr, side);
    if (result.isInvalid()) return result;

    Expr* e = *e_ptr;
    e.setType(result);

    if (need_rvalue && e.isLValue()) {
        QualType qt = result;

        if (qt.isArrayType()) {
            result = getPointerFromArray(ma.builder, qt);
            ma.builder.insertImplicitCast(ImplicitCastKind.ArrayToPointerDecay, e_ptr, result);
        } else {
            ma.builder.insertImplicitCast(ImplicitCastKind.LValueToRValue, e_ptr, qt);
        }
    }

    return result;
}

func QualType Analyser.analyseExprInner(Analyser* ma, Expr** e_ptr, u32 side) {
    Expr* e = *e_ptr;

    switch (e.getKind()) {
    case IntegerLiteral:
        return e.getType();
    case FloatLiteral:
        return e.getType();
    case BooleanLiteral:
        return g_bool;
    case CharLiteral:
        return g_i8;
    case StringLiteral:
        return e.getType(); // already set in creator
    case Nil:
        return g_void_ptr;
    case Identifier:
        Decl* d = ma.analyseIdentifier(e_ptr, side);
        if (!d) break;
        return d.getType();
    case Type:
        break;
    case Call:
        return ma.analyseCallExpr(e_ptr);
    case InitList:
        (*e_ptr).dump();
        assert(0);
        break;
    case FieldDesignatedInit:
        (*e_ptr).dump();
        assert(0);
        break;
    case ArrayDesignatedInit:
        assert(0);
        break;
    case BinaryOperator:
        return ma.analyseBinaryOperator(e_ptr);
    case UnaryOperator:
        return ma.analyseUnaryOperator(e_ptr, side);
    case ConditionalOperator:
        return ma.analyseConditionalOperator(e_ptr);
    case Builtin:
        return ma.analyseBuiltin(e_ptr);
    case ArraySubscript:
        return ma.analyseArraySubscriptExpr(e_ptr, side);
    case Member:
        return ma.analyseMemberExpr(e_ptr, side);
    case Paren:
        ParenExpr* p = cast<ParenExpr*>(e);
        QualType qt = ma.analyseExpr(p.getInner2(), false, side);
        Expr* inner = p.getInner();
        e.copyConstantFlags(inner);
        e.copyValType(inner);
        return qt;
    case BitOffset:
        break;
    case ExplicitCast:
        return ma.analyseExplicitCast(e_ptr);
    case ImplicitCast:
        break;
    }
    return QualType_Invalid;
}

func Decl* Analyser.analyseIdentifier(Analyser* ma, Expr** e_ptr, u32 side) {
    Expr* e = *e_ptr;
    IdentifierExpr* i = cast<IdentifierExpr*>(e);
    Decl* d = ma.scope.find(i.getNameIdx(), e.getLoc(), ma.usedPublic);
    if (!d) {
        ma.has_error = true;
        return nil;
    }

    if (!d.isChecked()) {
        ma.analyseGlobalDecl(d);
        // TODO need result
    }

    QualType qt = d.getType();
    assert(qt.isValid());
    e.setType(qt);
    i.setDecl(d);

    if (side & RHS) d.setUsed();
    else {
        // parameters are used if LHS|RHS
        if (d.isVarDecl()) {
            VarDecl* vd = cast<VarDecl*>(d);
            if (vd.isParameter()) d.setUsed();
        }
    }

    IdentifierKind kind = ma.setExprFlags(e_ptr, d);
    i.setKind(kind);

    return d;
}

func void create_template_name(char* name, const char* orig, u16 idx) {
    stdio.sprintf(name, "%s_%u_", orig, idx);
}

func void Analyser.opaque_callback(void* arg, SrcLoc loc, Decl* d) {
    Analyser* ma = arg;
    QualType qt = d.getType(); // lazy way to get from decl -> fullname
    ma.error(loc," using opaque type '%s'", qt.diagName());
}

func FunctionDecl* Analyser.instantiateTemplateFunction(Analyser* ma, CallExpr* call, FunctionDecl* fd) {
    TypeRef* template_arg = call.getTemplateArg();
    QualType templateType = ma.analyseTypeRef(template_arg);
    if (templateType.isInvalid()) return nil;

    FunctionDecl* instance = ma.mod.findInstance(fd, templateType);
    if (!instance) {
        // note: template_arg decl is set here
        bool used_opaque = false;
        StructType* st = templateType.getStructTypeOrNil();
        if (st) {
            StructTypeDecl* std = st.getDecl();
            Decl* d = cast<Decl*>(std);
            used_opaque = (std.isOpaque() && d.getModule() != ma.mod);
        }
        Instantiator inst = {
            .c = ma.context,
            .ref = template_arg,
            .template_name = fd.getTemplateNameIdx(),
            .used_opaque = used_opaque,
            .arg = ma,
            .on_error = Analyser.opaque_callback,
        }
        instance = fd.instantiate(&inst);
        Decl* d = cast<Decl*>(instance);
        ma.analyseFunction(instance);
        if (ma.has_error) return nil;
        d.setChecked();

        // Note: we need a separate scope for the body
        Module* template_mod = fd.asDecl().getModule();
        Analyser* analyser = create(ma.diags, ma.context, ma.astPool, ma.builder, ma.allmodules, ma.warnings);
        analyser.setMod(template_mod);
        scope.Scope* tmpScope = scope.create(ma.allmodules,
                                             ma.diags,
                                             d.getAST().getImports(),
                                             template_mod,
                                             template_mod.getSymbols(),
                                             !ma.warnings.no_unused_variable);
        analyser.analyseFunctionBody(instance, tmpScope);
        tmpScope.free();
        analyser.free();

        if (ma.has_error) return nil;

        u16 instance_idx = ma.mod.addInstance(fd, templateType, instance);
        instance.setTemplateInstanceIdx(instance_idx);
        char[64] name;
        create_template_name(name, d.getName(), instance_idx);
        instance.setInstanceName(ma.astPool.addStr(name, true));
    }
    call.setTemplateIdx(instance.getTemplateInstanceIdx());

    return instance;
}

func QualType Analyser.analyseCallExpr(Analyser* ma, Expr** e_ptr) {
    Expr* e = *e_ptr;
    CallExpr* call = cast<CallExpr*>(e);
    Expr** fn = call.getFunc2();
    Expr* origFn = call.getFunc();  // store here to avoid the likely inserted FunctionPointerDecay cast
    QualType qt = ma.analyseExpr(fn, true, RHS);
    if (qt.isInvalid()) return QualType_Invalid;

    if (origFn.isNValue()) {
        ma.errorRange(origFn.getLoc(), origFn.getRange(), "called object is not a function of function pointer");
        return QualType_Invalid;
    }

    FunctionType* ft = qt.getFunctionTypeOrNil();
    if (!ft) {
        Expr* fn2 = call.getFunc();
        ma.errorRange(fn2.getLoc(), fn2.getRange(), "called object type %s is not a function or function pointer", qt.diagName());

        return QualType_Invalid;
    }

    /* two ways of calling a struct function:
        1. Struct.test(s);
        2. Struct s; s.test();
    */

    FunctionDecl* fd = ft.getDecl();
    fd.asDecl().setUsed();

    if (fd.isTemplate()) {
        if (!call.getTemplateArg()) {
            ma.errorRange(e.getLoc(), e.getRange(), "function %s requires a template argument", fd.asDecl().getFullName());
            return QualType_Invalid;
        }
        fd = ma.instantiateTemplateFunction(call, fd);
        if (!fd) return QualType_Invalid;
    } else {
        if (call.getTemplateArg()) {
            ma.errorRange(e.getLoc(), e.getRange(), "function %s is not a template function", fd.asDecl().getFullName());
            return QualType_Invalid;
        }
    }

    u32 func_num_args = fd.getNumParams();
    u32 call_num_args = call.getNumArgs();

    u32 funcIndex = 0;
    u32 callIndex = 0;

    bool isStructFuncCall = false;  // Not for static struct functions!

    QualType baseType;
    if (origFn.getKind() == ExprKind.Member) {
        // Note: use origFn to avoid the added FunctionPointerDecay cast
        const MemberExpr* m = cast<MemberExpr*>(origFn);
        if (m.isStaticStructFunc()) {
            call.setCallsStaticStructFunc();
        }
        if (m.isStructFunc()) {
            isStructFuncCall = true;
            call.setCallsStructFunc();
            baseType = m.getBaseType();
            func_num_args--;
            funcIndex = 1;
        }
    }

    VarDecl** func_args = fd.getParams();
    Expr** call_args = call.getArgs();

    if (isStructFuncCall) {
        assert(fd.getNumParams() >= 1);
        // check for pointer conversion (const -> non-const)
        VarDecl* arg0 = func_args[0];
        QualType expectedType = arg0.asDecl().getType();
        // make it pointer type if not, because struct function calls are allowed on non-ptr type
        if (!baseType.isPointerType()) {
            baseType = ma.builder.actOnPointerType(baseType);
        }
        bool ok = ma.checker.check(expectedType, baseType, e_ptr, e.getLoc());
        if (!ok) return QualType_Invalid;
    }

    u32 min_args = (func_num_args < call_num_args) ? func_num_args : call_num_args;

    for (u32 i=0; i<min_args; i++) {
        QualType callType = ma.analyseExpr(&call_args[callIndex], true, RHS);
        if (callType.isInvalid()) return QualType_Invalid;

        VarDecl* vd = func_args[funcIndex];

        Expr* call_arg = call_args[callIndex];
        bool ok = ma.checker.check(vd.asDecl().getType(), callType, &call_args[callIndex], call_arg.getLoc());
        if (!ok) return QualType_Invalid;
        callIndex++;
        funcIndex++;
    }

    if (call_num_args > func_num_args) {
        if (!fd.isVariadic()) {
            Expr* call_arg = call_args[callIndex];
            // NOTE: ignoring default args (will be remove anyways)
            ma.error(call_arg.getLoc(), "too many arguments to function call, expected %u, have %u", func_num_args, call_num_args);
            // TODO full name (prefix)
            ma.note(fd.asDecl().getLoc(), "'%s' declared here", fd.asDecl().getName());
            return QualType_Invalid;
        }
        for (u32 i=min_args; i<call_num_args; i++) {
            QualType callType = ma.analyseExpr(&call_args[callIndex], true, RHS);
            if (callType.isInvalid()) return QualType_Invalid;
            if (callType.isVoidType()) {
                Expr* call_arg = call_args[callIndex];
                ma.error(call_arg.getLoc(), "passing 'void' as variadic argument is invalid");
                return QualType_Invalid;
            }
            callIndex++;
        }
    } else if (call_num_args < func_num_args) {
        ma.error(call.getEndLoc(), "too few arguments to function call, expected %u, have %u", func_num_args, call_num_args);
        // TODO full name (prefix)
        ma.note(fd.asDecl().getLoc(), "'%s' declared here", fd.asDecl().getName());
        return QualType_Invalid;
    }

    return fd.getRType();
}

func IdentifierKind Analyser.setExprFlags(Analyser* ma, Expr** e_ptr, Decl* d) {
    Expr* e = *e_ptr;
    IdentifierKind kind = IdentifierKind.Unresolved;
    switch (d.getKind()) {
    case Function:
        e.setCtc();
        e.setRValue();
        ma.builder.insertImplicitCast(ImplicitCastKind.FunctionToPointerDecay, e_ptr, d.getType());
        kind = IdentifierKind.Function;
        break;
    case Import:
        e.setCtc();
        kind = IdentifierKind.Module;
        break;
    case StructType:
        kind = IdentifierKind.Type;
        break;
    case EnumType:
        e.setCtc();
        kind = IdentifierKind.Type;
        break;
    case EnumConstant:
        e.setCtc();
        e.setCtv();
        e.setRValue();
        kind = IdentifierKind.EnumConstant;
        break;
    case FunctionType:
        e.setCtc();
        kind = IdentifierKind.Type;
        break;
    case AliasType:
        kind = IdentifierKind.Type;
        break;
    case Var:
        VarDecl* vd = cast<VarDecl*>(d);
        QualType t = vd.asDecl().getType();
        if (vd.isGlobal()) e.setCtc();
        e.setLValue();
        const Expr* init_ = vd.getInit();
        if (init_ && t.isConst() && init_.isCtv()) e.setCtv();
        switch (vd.getKind()) {
        case GlobalVar: fallthrough;
        case LocalVar:  fallthrough;
        case FunctionParam:
            kind = IdentifierKind.Var;
            break;
        case StructMember:
            kind = IdentifierKind.StructMember;
            break;
        }
        break;
    case StaticAssert:
        break;
    case ArrayValue:
        break;
    }
    return kind;
}

// Note: this function should only be called from analyseInitListArray directly!
func bool Analyser.analyseArrayDesignatedInit(Analyser* ma, Expr* e, QualType expectedType) {
    ArrayDesignatedInitExpr* ad = cast<ArrayDesignatedInitExpr*>(e);

    QualType qt = ma.analyseExpr(ad.getDesignator2(), false, RHS);
    if (qt.isInvalid()) return false;

    Expr* de = ad.getDesignator();
    if (!de.isCtv()) {
        ma.errorRange(de.getLoc(), de.getRange(), "array index is not a compile-time value");
        return false;
    }

    qt = ma.analyseExpr(ad.getInit2(), false, RHS);
    if (qt.isInvalid()) return false;

    Expr* val = ad.getInit();

    if (!ma.curFunction) {
        if (!val.isCtc()) {
            ma.errorRange(val.getLoc(), val.getRange(), "initializer element is not a compile-time constant");
            return false;
        }

        if (!val.isCtv() && expectedType.needsCtvInit()) {
            ma.errorRange(val.getLoc(), val.getRange(), "initializer element is not a compile-time value");
            return false;
        }
    }

    ma.checker.check(expectedType, qt, ad.getInit2(), val.getLoc());

    val = ad.getInit(); // re-read because of ImplicitCasts
    e.copyConstantFlags(val);
    e.setType(expectedType);
    return true;
}

func IdentifierKind getInnerExprAddressOf(Expr* e) {
    // TODO change return type to IdentifierKind, use Unresolved for not-IdentifiersExpr/MemberExpr

    switch (e.getKind()) {
    case IntegerLiteral:    fallthrough;
    case FloatLiteral:      fallthrough;
    case BooleanLiteral:    fallthrough;
    case CharLiteral:       fallthrough;
    case StringLiteral:     fallthrough;
    case Nil:
        break;
    case Identifier:
        IdentifierExpr* i = cast<IdentifierExpr*>(e);
        return i.getKind();
    case Type:              fallthrough;
    case Call:              fallthrough;
    case InitList:          fallthrough;
    case FieldDesignatedInit:   fallthrough;
    case ArrayDesignatedInit:
        break;
    case BinaryOperator:
        assert(0); // TODO
        break;
    case UnaryOperator:
        assert(0); // TODO
        break;
    case ConditionalOperator:
        assert(0); // TODO
        break;
    case Builtin:
        break;
    case ArraySubscript:
        ArraySubscriptExpr* a = cast<ArraySubscriptExpr*>(e);
        return getInnerExprAddressOf(a.getBase());
    case Member:
        MemberExpr* m = cast<MemberExpr*>(e);
        return m.getKind();
    case Paren:
        ParenExpr* p = cast<ParenExpr*>(e);
        return getInnerExprAddressOf(p.getInner());
    case BitOffset:
        return IdentifierKind.Unresolved;
    case ExplicitCast:
        ExplicitCastExpr* c = cast<ExplicitCastExpr*>(e);
        return getInnerExprAddressOf(c.getInner());
    case ImplicitCast:
        ImplicitCastExpr* c = cast<ImplicitCastExpr*>(e);
        return getInnerExprAddressOf(c.getInner());
    }

    return IdentifierKind.Unresolved;
}

func bool Analyser.getIdentifierKind(Analyser* ma, Expr* e) {
    IdentifierKind kind = getInnerExprAddressOf(e);
    const char* arg = "";
    switch (kind) {
    case Unresolved:
        QualType qt = e.getType();
        ma.error(e.getLoc(), "cannot take the address of an rvalue of type %s", qt.diagName());
        return false;
    case Module:
        arg = "a module";
        break;
    case Function:
        // NOTE: C2 does not allow address of function like C
        arg = "a function";
        break;
    case Type:
        arg = "a type";
        break;
    case Var:
        return true;
    case EnumConstant:
        arg = "an enum constant";
        break;
    case StructMember:
        return true;
    case Label:
        arg = "a label";
        break;
    }
    ma.error(e.getLoc(), "cannot take the address of %s", arg);
    return false;
}

func QualType Analyser.analyseUnaryOperator(Analyser* ma, Expr** e_ptr, u32 side) {
    Expr* e = *e_ptr;
    UnaryOperator* u = cast<UnaryOperator*>(e);

    bool need_rvalue = true;

    // TODO need rvalue stuff
    switch (u.getOpcode()) {
    case PostInc:   fallthrough;
    case PostDec:   fallthrough;
    case PreInc:    fallthrough;
    case PreDec:
        if (!ma.curFunction) {
            ma.errorRange(e.getLoc(), e.getRange(), "initializer element is not a compile-time constant");
            return QualType_Invalid;
        }
        need_rvalue = false;
        side |= LHS;
        break;
    case AddrOf:
        need_rvalue = false;
        side |= LHS;
        break;
    case Deref:     fallthrough;
    case Minus:     fallthrough;
    case Not:       fallthrough;
    case LNot:
        side |= RHS;
        break;
    }

    QualType t = ma.analyseExpr(u.getInner2(), need_rvalue, side);
    if (t.isInvalid()) {
        return QualType_Invalid;
    }

    e = *e_ptr; // re-read in case of ImplicitCast insertions
    Expr* inner = u.getInner();

    if (t.isVoidType()) {
        ma.error(e.getLoc(), "invalid argument type %s to unary expression", "'void'");
        return QualType_Invalid;
    }

    switch (u.getOpcode()) {
    case PostInc:
        // TODO check if ptr/builtin
        if (!ma.checkAssignment(inner, t, "increment operand", e.getLoc())) return QualType_Invalid;
        break;
    case PostDec:
        // TODO check if ptr/builtin
        if (!ma.checkAssignment(inner, t, "decrement operand", e.getLoc())) return QualType_Invalid;
        break;
    case PreInc:
        // TODO check if ptr/builtin
        if (!ma.checkAssignment(inner, t, "increment operand", e.getLoc())) return QualType_Invalid;
        break;
    case PreDec:
        // TODO check if ptr/builtin
        if (!ma.checkAssignment(inner, t, "decrement operand", e.getLoc())) return QualType_Invalid;
        break;
    case AddrOf:
        if (!ma.getIdentifierKind(inner)) return QualType_Invalid;
        QualType canon = t.getCanonicalType();
        t = ma.builder.actOnPointerType(canon);
        e.setCtc();
        break;
    case Deref:
        if (t.isPointerType()) {
            e.setLValue();
            t = t.getCanonicalType();
            const PointerType* p = t.getPointerType();
            // TODO copy flags from inner
            return p.getInner();
        } else {
            ma.error(e.getLoc(), "indirection requires pointer operand (%s invalid)", t.diagName());
            return QualType_Invalid;
        }
        break;
    case Minus:     fallthrough;
    case Not:
        e.copyConstantFlags(inner);
        t = usualUnaryConversions(inner);
        break;
    case LNot:
        e.copyConstantFlags(inner);
        return g_bool;
    }

    return t;
}

// 0  cannot happen
// 1  invalid
// 2  builtin - builtin
// 3  builtin - enum -> int
// 4  pointer - pointer
// 5  struct - struct
// 6  enum - builtin -> int
// 7  enum - enum
const u8[elemsof(TypeKind)][elemsof(TypeKind)] CondOpTable = {
    //  Builtin Pointer Array   Struct  Enum    Func   Alias  Module
    //  Builtin += / -=
    {   2,      1,      0,      1,      3,      0,     0,     0  },
    //  Pointer += / -=
    {   1,      4,      0,      1,      1,      1,     0,     0  },
    //  Array += / -=
    {   0,      0,      0,      0,      0,      0,     0,     0  },
    //  Struct += / -=
    {   1,      1,      0,      5,      1,      1,     0,     0  },
    //  Enum += / -=
    {   6,      1,      0,      1,      7,      1,     0,     0  },
    //  Function += / -=
    {   0,      0,      0,      1,      0,      0,     0,     0  },
    // Alias + Module are zero
}
func QualType Analyser.analyseConditionalOperator(Analyser* ma, Expr** e_ptr) {
    Expr* e = *e_ptr;
    ConditionalOperator* cond = cast<ConditionalOperator*>(e);
    QualType qt = ma.analyseExpr(cond.getCond2(), true, RHS);
    if (qt.isInvalid()) return QualType_Invalid;

    ma.checker.check(g_bool, qt, cond.getCond2(), cond.getCond().getLoc());

    QualType lhs = ma.analyseExpr(cond.getLHS2(), true, RHS);
    QualType rhs = ma.analyseExpr(cond.getRHS2(), true, RHS);
    if (lhs.isInvalid() || rhs.isInvalid()) return QualType_Invalid;

    QualType lcanon = lhs.getCanonicalType();
    QualType rcanon = rhs.getCanonicalType();
    assert(lcanon.isValid());
    assert(rcanon.isValid());

    u8 res = CondOpTable[lcanon.getKind()][rcanon.getKind()];
    switch (res) {
    case 0: // cannot happen
        break;
    case 1: // invalid
        ma.error(e.getLoc(), "invalid operands to ternary operator (%s and %s)", lhs.diagName(), rhs.diagName());
        return QualType_Invalid;
    case 2: // builtin - builtin
        // TODO do integer promotions, check for void, float etc
        return lhs;
    case 3: // builtin - enum -> int
        // TODO do integer promotions, check for void, float etc
        return lhs;
    case 4: // pointer - pointer
        // TODO check if same type
        return lhs;
    case 5: // struct - struct
        bool ok = ma.checker.check(lhs, rhs, e_ptr, e.getLoc());
        if (!ok) return QualType_Invalid;
        return lhs;
    case 6: // enum - builtin -> int
        // TODO do integer promotions, check for void, float etc
        return rhs;
    case 7: // enum - enum
        bool ok = ma.checker.check(lhs, rhs, e_ptr, e.getLoc());
        if (!ok) return QualType_Invalid;
        return lhs;
    }
    assert(0);
    return QualType_Invalid;
}

func bool Analyser.checkAssignment(Analyser* ma, Expr* assignee, QualType tleft, const char* msg, SrcLoc loc) {
    if (tleft.isConst()) {
        ma.error(loc, "cannot assign to variable with const-qualified type '%s'", tleft.diagName());
        return false;
    }

    if (!assignee.isLValue()) {
        ma.error(loc, "lvalue required as %s", msg);
        return false;
    }

    // TODO check arraytype

    return true;
}

// TODO move
func QualType usualUnaryConversions(Expr* e) {
    QualType qt = e.getType();
    QualType canon = qt.getCanonicalType();

    if (canon.isBuiltinType()) {
        BuiltinType* bi = canon.getBuiltinType();
        if (bi.isPromotableIntegerType()) return g_i32;
    } else if (canon.isPointerType()) {
        // TODO depend on arch width
        return g_u64;
    }

    return qt;
}

func QualType Analyser.analyseMemberExpr(Analyser* ma, Expr** e_ptr, u32 side) {
    Expr* e = *e_ptr;
    MemberExpr* m =cast<MemberExpr*>(e);

    Decl* base = nil;
    SrcLoc lastLoc = 0;
    ValType valtype = ValType.NValue;
    CallKind ck = CallKind.Invalid; // TODO convert to bool isSFCall

    Expr* exprBase = m.getExprBase();
    if (exprBase) {
        // note: no ImplicitCast can be added
        QualType qt = ma.analyseExpr(&exprBase, false, side);
        if (qt.isInvalid()) return QualType_Invalid;

        base = ma.analyseMemberBase(exprBase.getLoc(), qt, false);
        if (!base) return QualType_Invalid;

        valtype = exprBase.getValType();
    }

    u32 refcount = m.getNumRefs();
    for (u32 i=0; i<refcount; i++) {
        u32 name_idx = m.getNameIdx(i);
        SrcLoc loc = m.getLoc(i);

        Decl* d = nil;
        if (!base) {
            d = ma.scope.find(name_idx, loc, ma.usedPublic);
        } else {
            if (base.getKind() == DeclKind.Var) {
                // for variables, take Type's kind
                base = ma.analyseMemberBase(loc, base.getType(), false);
                if (!base) return QualType_Invalid;

                valtype = ValType.LValue;
            }
            QualType baseType = base.getType();
            switch (base.getKind()) {
            case Function:
                //const FunctionDecl* fd = cast<FunctionDecl*>(base);
                // always error?
                valtype = ValType.RValue;
                break;
            case Import:
                ImportDecl* id = cast<ImportDecl*>(base);
                d = ma.scope.findGlobalSymbolInModule(id.getDest(), name_idx, loc);
                break;
            case StructType:
                StructType* st = baseType.getStructType();
                d = ma.findStructMember(st.getDecl(), name_idx, loc, true);
                if (d) {
                    if (d.getKind() == DeclKind.Function) {
                        FunctionDecl* fd = cast<FunctionDecl*>(d);
                        CallKind callkind = fd.getCallKind();
                        assert(callkind != CallKind.Normal);
                        switch (valtype) {
                        case NValue:
                            if (callkind != CallKind.StaticStructFunc) {
                                // sometimes handy to be able to (see Type.fullPrint())
                                //ma.error(loc, "non-static struct functions need an instantiation of type");
                                //return QualType_Invalid;
                            }
                            ck = CallKind.StaticStructFunc;
                            break;
                        case RValue:
                            // TODO fallthrough?
                            if (callkind == CallKind.StaticStructFunc) {
                                ma.error(loc, "cannot access static struct function through variable");
                                return QualType_Invalid;
                            }
                            assert(callkind == CallKind.StructFunc);
                            ck = CallKind.StructFunc;
                            break;
                        case LValue:
                            if (callkind == CallKind.StaticStructFunc) {
                                ma.error(loc, "cannot access static struct function through variable");
                                return QualType_Invalid;
                            }
                            assert(callkind == CallKind.StructFunc);
                            ck = CallKind.StructFunc;
                            break;
                        }
                    } else {
                        if (!ma.checkOpaque(st.getDecl(), loc)) return QualType_Invalid;
                        // StructTypeDecl for substruct or VarDecl for normal members
                        if (valtype == ValType.NValue) {
                            ma.error(loc, "member access needs an instantiation of type '%s'", baseType.diagName());
                            return QualType_Invalid;
                        }
                    }
                }
                break;
            case EnumType:
                EnumTypeDecl* etd = cast<EnumTypeDecl*>(base);
                EnumConstantDecl* ecd = etd.findConstant(name_idx);
                if (!ecd) {
                    ma.error(e.getLoc(), "enum %s has no constant %s", base.getName(), m.getName(0));
                    return QualType_Invalid;
                }
                // TODO do self-initialization checking

                d = cast<Decl*>(ecd);
                break;
            case EnumConstant:
                ma.error(lastLoc, "invalid member reference base");
                return QualType_Invalid;
            case FunctionType:
                assert(0);  // can this happen?
                break;
            case AliasType:
                assert(0);  // can this happen?
                break;
            case Var:
                assert(0); // can this happen?
                break;
            case StaticAssert:
                assert(0);
                break;
            case ArrayValue:
                assert(0);
                break;
            }
        }

        if (!d) {
            ma.has_error = true;
            return QualType_Invalid;
        }

        lastLoc = loc;
        // Note: this can happen in arraysizeExpr: var[test.number] a; (as global/struct-member)
        if (!d.isChecked()) {
            ma.analyseGlobalDecl(d);
            // TODO need result
        }

        if (side & RHS) d.setUsed();
        m.setDecl(d, i);
        base = d;
    }

    if (ck == CallKind.Invalid && base.getKind() == DeclKind.Function) ck = CallKind.Normal;
    if (ck == CallKind.StructFunc) m.setIsStructFunc();
    if (ck == CallKind.StaticStructFunc) m.setIsStaticStructFunc();
    // Note: dont call setValType here, done in setExprFlags
    IdentifierKind kind = ma.setExprFlags(e_ptr, base);
    m.setKind(kind);
    e.setType(base.getType());
    if (e.isCtv()) e.setRValue(); // TODO still needed after setExprFlags?
    return base.getType();
}

func Decl* Analyser.analyseMemberBase(Analyser* ma, SrcLoc loc, QualType baseType, bool ptr_deref) {
    const Type* t = baseType.getTypeOrNil();
    switch (t.getKind()) {
    case Builtin:
        break;
    case Pointer:
        if (ptr_deref) break;
        PointerType* pt = cast<PointerType*>(t);
        return ma.analyseMemberBase(loc, pt.getInner(), true);
    case Array:
        break;
    case Struct:
        StructType* st = baseType.getStructType();
        StructTypeDecl* std = st.getDecl();
        return cast<Decl*>(std);
    case Enum:
        assert(0); // TODO
        break;
    case Function:
        break;
    case Alias:
        assert(0); // TODO
        break;
    case Module:
        assert(0);
        break;
    }
    ma.error(loc, "invalid member reference base");
    return nil;
}

func QualType Analyser.analyseExplicitCast(Analyser* ma, Expr** e_ptr) {
    Expr* e = *e_ptr;
    ExplicitCastExpr* c = cast<ExplicitCastExpr*>(e);
    TypeRef* ref = c.getTypeRef();
    QualType destType = ma.analyseTypeRef(ref);

    QualType srcType = ma.analyseExpr(c.getInner2(), true, RHS);

    if (srcType.isInvalid() || destType.isInvalid()) return QualType_Invalid;

    Expr* inner = c.getInner();
    e.copyConstantFlags(inner);
    e.copyValType(inner);

    // TODO check if explicit is allowed between types
    // ma.checker.checkCast(destType, srcType, inner);

    return destType;
}

func QualType Analyser.analyseBuiltin(Analyser* ma, Expr** e_ptr) {
    Expr* e = *e_ptr;
    BuiltinExpr* b = cast<BuiltinExpr*>(e);

    switch (b.getKind()) {
    case Sizeof:
        return ma.analyseSizeof(b);
    case Elemsof:
        return ma.analyseElemsof(b);
    case EnumMin:   fallthrough;
    case EnumMax:
        return ma.analyseEnumMinMax(b);
    case OffsetOf:
        return ma.analyseOffsetOf(b);
    case ToContainer:
        return ma.analyseToContainer(b);
    }

    return QualType_Invalid;
}

func QualType Analyser.analyseArraySubscriptExpr(Analyser* ma, Expr** e_ptr, u32 side) {
    Expr* e = *e_ptr;
    ArraySubscriptExpr* sub = cast<ArraySubscriptExpr*>(e);

    QualType q = ma.analyseExpr(sub.getBase2(), true, side);
    if (q.isInvalid()) return q;

    // Derefence alias types
    // TODO

    if (!q.isPointerType()) {
        ma.errorRange(e.getLoc(), e.getRange(), "subscripted value is not an array or pointer");
        return QualType_Invalid;
    }

    QualType qidx = ma.analyseExpr(sub.getIndex2(), true, RHS);
    if (qidx.isInvalid()) return qidx;

    PointerType* pt = q.getPointerType();
    return pt.getInner();
}

func QualType Analyser.analyseEnumMinMax(Analyser* ma, BuiltinExpr* b) {
    Expr* inner = b.getInner();
    QualType qt = ma.analyseExpr(&inner, false, RHS);
    if (qt.isInvalid()) return QualType_Invalid;

    EnumType* et = qt.getEnumTypeOrNil();
    if (!et) {
        const char* kind = (b.getKind() == BuiltinExprKind.EnumMin) ? "enum_min" : "enum_max";
        ma.error(inner.getLoc(), "%s can only be used on enum types", kind);
        return QualType_Invalid;
    }

    EnumTypeDecl* etd = et.getDecl();
    u32 num = etd.getNumConstants();
    EnumConstantDecl** constants = etd.getConstants();

    u32 index = 0;
    if (b.getKind() == BuiltinExprKind.EnumMax) index = num-1;
    // Since enum constants must be in-order return value of first/last
    b.setValue(constants[index].getValue());

    return etd.getImplType();
}

func u32 decl2offset(const Decl* d) {
    if (d.getKind() == DeclKind.Var) {
        VarDecl* vd = cast<VarDecl*>(d);
        return vd.getOffset();
    }
    assert(d.getKind() == DeclKind.StructType);
    StructTypeDecl* std = cast<StructTypeDecl*>(d);
    return std.getOffset();
}

func Decl* Analyser.findMemberOffset(Analyser* ma, BuiltinExpr* b, StructTypeDecl* std, Expr* member) {
    u32 base_offset = 0;
    Decl* d = nil;

    if (member.getKind() == ExprKind.Identifier) {
        IdentifierExpr* i = cast<IdentifierExpr*>(member);
        u32 name_idx = i.getNameIdx();

        d = ma.findStructMemberOffset(std, name_idx, member.getLoc(), &base_offset);
        if (!d) return nil;

        base_offset += decl2offset(d);
        i.setDecl(d);
        d.setUsed();
        member.setLValue();
        i.setKind(IdentifierKind.StructMember);
    } else {
        assert(member.getKind() == ExprKind.Member);
        MemberExpr* m = cast<MemberExpr*>(member);
        for (u32 i=0; i<m.getNumRefs(); i++) {
            u32 name_idx = m.getNameIdx(i);
            SrcLoc loc = m.getLoc(i);
            d = ma.findStructMemberOffset(std, name_idx, loc, &base_offset);
            if (!d) return nil;

            if (d.getKind() == DeclKind.StructType) std = cast<StructTypeDecl*>(d);
            base_offset += decl2offset(d);
            d.setUsed();
            m.setDecl(d, i);
        }
        m.setKind(IdentifierKind.StructMember);
    }
    member.setType(d.getType());
    b.setUValue(base_offset);
    return d;
}

func QualType Analyser.analyseOffsetOf(Analyser* ma, BuiltinExpr* b) {
    Expr* e = cast<Expr*>(b);
    Expr* inner = b.getInner();
    QualType qt = ma.analyseExpr(&inner, false, RHS);
    if (qt.isInvalid()) return QualType_Invalid;

    e.setType(g_u32);

    StructType* st = qt.getStructTypeOrNil();
    if (!st) {
        ma.error(inner.getLoc(), "offsetof can only be used on struct types");
        return QualType_Invalid;
    }

    StructTypeDecl* std = st.getDecl();
    if (!ma.checkOpaque(std, inner.getLoc())) return QualType_Invalid;

    Expr* member = b.getOffsetOfMember();
    Decl* d = ma.findMemberOffset(b, std, member);
    if (!d) return QualType_Invalid;
    return e.getType();
}

func QualType Analyser.analyseToContainer(Analyser* ma, BuiltinExpr* b) {
    // syntax: Type* to_container(Type, member, member*)
    //         const Type* to_container(Type, member, const member*)
    Expr* inner = b.getInner();
    QualType qt = ma.analyseExpr(&inner, false, RHS);
    if (qt.isInvalid()) return QualType_Invalid;

    StructType* st = qt.getStructTypeOrNil();
    if (!st) {
        ma.error(inner.getLoc(), "to_container can only be used on struct types");
        return QualType_Invalid;
    }

    StructTypeDecl* std = st.getDecl();
    if (!ma.checkOpaque(std, inner.getLoc())) return QualType_Invalid;

    // check member
    Expr* member = b.getToContainerMember();
    Decl* d = ma.findMemberOffset(b, std, member);
    if (!d) return QualType_Invalid;
    QualType qmem = d.getType();
    qmem = ma.builder.actOnPointerType(qmem);

    // check ptr
    QualType qptr = ma.analyseExpr(b.getToContainerPointer2(), false, RHS);
    if (qptr.isInvalid()) return QualType_Invalid;

    // Note: 3rd argument may be const ptr, but result will be const ptr as well then
    Expr* eptr = b.getToContainerPointer();
    if (!ma.checker.check(qptr, qmem, b.getToContainerPointer2(), eptr.getLoc())) {
        return QualType_Invalid;
    }

    if (qptr.isConstPtr()) qt.setConst();
    return ma.builder.actOnPointerType(qt);
}

func QualType Analyser.analyseSizeof(Analyser* ma, BuiltinExpr* e) {
    Expr* inner = e.getInner();
    assert(inner);

    QualType qt;
    if (inner.getKind() == ExprKind.Type) {
        TypeExpr* te = cast<TypeExpr*>(inner);
        TypeRef* ref = te.getTypeRef();
        qt = ma.analyseTypeRef(ref);
        inner.setType(qt);
    } else {
        // is Identifier/memberExpr, could still be Type!
        qt = ma.analyseExpr(&inner, false, RHS);
    }
    if (qt.isInvalid()) return QualType_Invalid;

    size_analyser.TypeSize info = size_analyser.sizeOfType(qt);
    e.setUValue(info.size);
    return g_u32;
}

func QualType Analyser.analyseElemsof(Analyser* ma, BuiltinExpr* b) {
    // could be EnumType or array VarDecl

    Expr* inner = b.getInner();
    QualType qt = ma.analyseExpr(&inner, false, RHS);
    if (qt.isInvalid()) return qt;

    const ArrayType* at = qt.getArrayTypeOrNil();
    if (at) {
        b.setUValue(at.getSize());
        return g_u32;
    }
    const EnumType* et = qt.getEnumTypeOrNil();
    if (et) {
        const EnumTypeDecl* etd = et.getDecl();
        b.setUValue(etd.getNumConstants());
        return g_u32;
    }
    ma.error(inner.getLoc(), "elemsof can only be used on arrays/enums");
    return QualType_Invalid;
}

func void Analyser.memberError(Analyser* ma, u32 name_idx, SrcLoc loc, StructTypeDecl* s) {
    ma.error(loc, "no member named '%s' in %s '%s'",
        idx2name(name_idx),
        s.isStruct() ? "struct" : "union",
        s.asDecl().getName());
}

// TODO move somewhere else
func Decl* Analyser.findStructMember(Analyser* ma, StructTypeDecl* s, u32 name_idx, SrcLoc loc, bool allow_funcs) {
    Decl* d = s.findAny(name_idx);
    if (!d || (!allow_funcs && d.getKind() == DeclKind.Function)) {
        ma.memberError(name_idx, loc, s);
        return nil;
    }

    return d;
}

// TODO move somewhere else
func Decl* Analyser.findStructMemberOffset(Analyser* ma, StructTypeDecl* s, u32 name_idx, SrcLoc loc, u32* base) {
    Decl* d = s.findMember(name_idx, base);
    if (!d) {
        ma.memberError(name_idx, loc, s);
        return nil;
    }

    return d;
}


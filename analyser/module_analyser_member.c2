/* Copyright 2022-2024 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module module_analyser;

import ast local;
import src_loc local;

fn QualType Analyser.analyseMemberExpr(Analyser* ma, Expr** e_ptr, u32 side) {
    Expr* e = *e_ptr;
    MemberExpr* m =cast<MemberExpr*>(e);

    SrcLoc baseLoc = 0;
    ValType valtype = ValType.NValue;
    QualType baseType = QualType_Invalid;

    CallKind ck = CallKind.Invalid; // TODO convert to bool isSFCall

    if (m.hasExpr()) {
        Expr* exprBase = m.getExprBase();
        // note: no ImplicitCast can be added
        baseType = ma.analyseExpr(&exprBase, false, side);
        if (baseType.isInvalid()) return QualType_Invalid;

        valtype = exprBase.getValType();

        //stdio.printf("EXPR BASE\n");
        //baseType.dump();
    }

    Decl* d = nil;
    u32 refcount = m.getNumRefs();
    for (u32 i=0; i<refcount; i++) {
        u32 name_idx = m.getNameIdx(i);
        SrcLoc loc = m.getLoc(i);

        //stdio.printf("  [%d/%d] %s\n", i, refcount, m.getName(i));

        if (baseType.isInvalid()) {
            d = ma.scope.find(name_idx, loc, ma.usedPublic);
            if (!d) {
                ma.has_error = true;
                return QualType_Invalid;
            }

            // Note: this can happen in arraysizeExpr: var[test.number] a; (as global/struct-member)
            if (!d.isChecked()) {
                if (!ma.analyseGlobalDecl(d)) return QualType_Invalid;
            }
            baseType = d.getType();
            valtype = decl2valtype(d);
        } else {
            QualType canon = baseType.getCanonicalType();
            TypeKind kind = ma.analyseBaseType(canon);

            bool is_ptr = canon.isPointer();
            bool inner_const = false;

            // Deref pointer here for casting to real types
            const Type* t = canon.getTypeOrNil();
            if (is_ptr) {
                PointerType* pt = cast<PointerType*>(t);
                QualType inner = pt.getInner();
                inner_const = inner.isConst();
                t = inner.getTypeOrNil();
            }

            switch (kind) {
            // TODO put others in default / fallthrough
            case Struct:
                //stdio.printf("STRUCT BASE (ptr %d, const %d, inner const %d)\n", is_ptr, baseType.isConst(), inner_const);
                StructType* st = cast<StructType*>(t);
                StructTypeDecl* std = st.getDecl();
                d = ma.analyseStructMemberAccess(std, name_idx, loc, valtype, side, &ck);
                if (!d) return QualType_Invalid;

                // simulate 'dereference' pointers and adding LValueToRValue (possibly strips const)
                bool is_const = baseType.isConst();
                baseType = d.getType();
                if (is_ptr) is_const = inner_const;
                // NOTE: for struct function calls, the base does not get an LValueToRValue cast,
                // so dont set base-const here
                if (is_ptr && ck != CallKind.Invalid) is_const = false;
                m.setConstBase(is_const);
                if (is_const && ck == CallKind.Invalid) baseType.setConst();

                // no need to update valtype
                break;
            case Enum:
                //stdio.printf("ENUM BASE\n");
                if (valtype != ValType.NValue) {    // variable of Enum type (eg Enum a; a.x)
                    // TODO reset msg to normal invalid base
                    ma.error(baseLoc, "invalid member reference base (enum constant/variable)");
                    return QualType_Invalid;
                }
                EnumType* et = cast<EnumType*>(t);
                EnumTypeDecl* etd = et.getDecl();
                EnumConstantDecl* ecd = etd.findConstant(name_idx);
                if (!ecd) {
                    ma.error(loc, "enum '%s' has no constant '%s'", d.getFullName(), m.getLastMemberName());
                    return QualType_Invalid;
                }
                d = cast<Decl*>(ecd);
                // no need to update baseType
                valtype = ValType.RValue;
                break;
            case Alias:
                assert(0);
                break;
            case Module:
                //stdio.printf("MODULE BASE\n");
                ModuleType* mt = cast<ModuleType*>(t);
                d = ma.scope.findSymbolInModule(mt.getModule(), name_idx, loc);
                if (!d) {
                    ma.has_error = true;
                    return QualType_Invalid;
                }
                baseType = d.getType();
                valtype = decl2valtype(d);
                break;
            default:
                ma.error(baseLoc, "invalid member reference base");
                return QualType_Invalid;
            }
        }

        baseLoc = loc;

        // Note: a.b.c  = 1; -> b is always used, c only if in RHS
        if (i == refcount -1) {
            if (side & RHS) d.setUsed();
        } else {
            d.setUsed();
        }
        m.setDecl(d, i);

        //baseType.dump();
    }

    if (ck == CallKind.Invalid && d.isFunction()) ck = CallKind.Normal;
    if (ck == CallKind.StructFunc) m.setIsStructFunc();
    if (ck == CallKind.StaticStructFunc) m.setIsStaticStructFunc();
    // Note: dont call setValType here, done in setExprFlags
    IdentifierKind kind = ma.setExprFlags(e_ptr, d);
    m.setKind(kind);
    e.setType(baseType);
    if (e.isCtv()) e.setRValue(); // TODO still needed after setExprFlags?

    //e.dump();
    return baseType;
}

fn Decl* Analyser.analyseStructMemberAccess(Analyser* ma, StructTypeDecl* std, u32 name_idx, SrcLoc loc, ValType valtype, u32 side, CallKind* ck) {
    *ck = CallKind.Invalid; // TODO convert to bool isSFCall
    Decl* d = ma.findStructMember(std, name_idx, loc, true);
    if (!d) return nil;

    if (!d.isChecked()) {
        if (!ma.analyseGlobalDecl(d)) return nil;
    }

    if (d.isFunction()) {
        FunctionDecl* fd = cast<FunctionDecl*>(d);
        CallKind callkind = fd.getCallKind();
        assert(callkind != CallKind.Normal);
        switch (valtype) {
        case NValue:
            if (callkind != CallKind.StaticStructFunc) {
                // sometimes handy to be able to (see Type.fullPrint())
                //ma.error(loc, "non-static struct functions need an instantiation of type");
                //return QualType_Invalid;
            }
            *ck = CallKind.StaticStructFunc;
            break;
        case RValue:
            // TODO fallthrough?
            if (callkind == CallKind.StaticStructFunc) {
                ma.error(loc, "cannot access static struct function through variable");
                return nil;
            }
            assert(callkind == CallKind.StructFunc);
            *ck = CallKind.StructFunc;
            break;
        case LValue:
            if (callkind == CallKind.StaticStructFunc) {
                ma.error(loc, "cannot access static struct function through variable");
                return nil;
            }
            assert(callkind == CallKind.StructFunc);
            *ck = CallKind.StructFunc;
            break;
        }
        if (!ma.scope.checkAccess(d, loc)) return nil;
    } else {
        if (!ma.checkOpaque(std, loc)) return nil;
        // StructTypeDecl for substruct or VarDecl for normal members
        // TODO FIX THIS (do in outer?)
#if 1
        if (side && valtype == ValType.NValue) {
            QualType t = std.asDecl().getType();
            ma.error(loc, "member access needs an instantiation of type '%s'", t.diagName());
            return nil;
        }
#endif
    }
    return d;
}

fn TypeKind Analyser.analyseBaseType(Analyser* ma, QualType baseType) {
    const Type* t = baseType.getTypeOrNil();
    // 'deref' pointer once
    if (t.isPointerType()) {
        PointerType* pt = cast<PointerType*>(t);
        baseType = pt.getInner();
        t = baseType.getTypeOrNil();
    }
    return t.getKind();
}


fn ValType decl2valtype(const Decl* d) {
    switch (d.getKind()) {
    case Function:
        return ValType.RValue;
    case Import:        fallthrough;
    case StructType:    fallthrough;
    case EnumType:      fallthrough;
    case EnumConstant:  fallthrough;
    case FunctionType:  fallthrough;
    case AliasType:
        break;
    case Variable:
        return ValType.LValue;
    }
    return ValType.NValue;
}


/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module module_analyser;

import ast local;
import scope;

func void Analyser.analyseFunctionBody(Analyser* ma, FunctionDecl* fd, scope.Scope* s) {
    if (fd.isTemplate()) return;  // only analyse on instantiation

    CompoundStmt* body = fd.getBody();
    // TODO assert (should not be called for interface components)
    if (!body) return;

    Decl* d = cast<Decl*>(fd);
    ma.pushCheck(d, s, fd);

    ma.scope.reset();
    ma.scope.enter(scope.Function | scope.Decl);
    u32 num_params = fd.getNumParams();
    VarDecl** params = fd.getParams();
    for (u32 i=0; i<num_params; i++) {
        Decl* p = cast<Decl*>(params[i]);
        if (p.getNameIdx()) {
            bool error = ma.scope.add(p);
            if (error) return;   // no need to set ma.has_error. NOTE: pushCheck remains!
        }
    }

    ma.has_error = false;
    // TODO use JumpBuf to return from error?
    ma.analyseCompoundStmt(body);

    // check for return stmt if function returns a value
    QualType rtype = fd.getRType();
    if (!rtype.isVoidType()) {
        Stmt* last = body.getLastStmt();
        if (!last || (last.getKind() != StmtKind.Return)) {
            ma.error(body.getEndLoc(), "control reaches end of non-void function");
        }
    }

    if (!ma.warnings.no_unused_parameter) {
        for (u32 i=0; i<num_params; i++) {
            Decl* p = cast<Decl*>(params[i]);
            if (!p.isUsed() && p.getNameIdx()) {
                // TODO check attribute?
                ma.warn(p.getLoc(), "unused parameter '%s'", p.getName());
            }
        }
    }

    ma.scope.exit();
    ma.popCheck();
}

func void Analyser.analyseStmt(Analyser* ma, Stmt* s, bool checkEffect) {
    switch (s.getKind()) {
    case Return:
        ma.analyseReturnStmt(s);
        break;
    case Expr:
        // TODO need a different set, since this one uses the Stack of Globals
        ma.analyseExpr(cast<Expr**>(&s), false, 0);
        Expr* e = cast<Expr*>(s);
        if (checkEffect && !e.hasEffect()) ma.errorRange(e.getLoc(), e.getRange(), "expression without effect");
        break;
    case If:
        ma.analyseIfStmt(s);
        break;
    case While:
        ma.analyseWhileStmt(s);
        break;
    case Do:
        ma.analyseDoStmt(s);
        break;
    case For:
        ma.analyseForStmt(s);
        break;
    case Switch:
        ma.analyseSwitchStmt(s);
        break;
    case Case:
        assert(0);
        break;
    case Default:
        assert(0);
        break;
    case Break:
        ma.analyseBreakStmt(s);
        break;
    case Continue:
        ma.analyseContinueStmt(s);
        break;
    case Fallthrough:
        ma.analyseFallthroughStmt(s);
        break;
    case Label:
        break;
    case Goto:
        break;
    case Compound:
        ma.scope.enter(scope.Decl);
        ma.analyseCompoundStmt(cast<CompoundStmt*>(s));
        ma.scope.exit();
        break;
    case Decl:
        ma.analyseDeclStmt(s);
        break;
    case Assert:
        ma.analyseAssertStmt(s);
        break;
    }
}

func void Analyser.analyseSwitchStmt(Analyser* ma, Stmt* s) {
    SwitchStmt* sw = cast<SwitchStmt*>(s);

    ma.scope.enter(scope.Decl);
    QualType ct = ma.analyseCondition(sw.getCond2());
    if (ma.has_error) return;

    bool is_sswitch = sw.isSSwitch();
    const u32 numCases = sw.getNumCases();
    Stmt** cases = sw.getCases();

    //ma.scope.enter(scope.Break);

    EnumType* et = ct.getEnumTypeOrNil();
    EnumTypeDecl* etd = nil;
    if (et) etd = et.getDecl();

    DefaultStmt* defaultStmt = nil;
    for (u32 i=0; i<numCases; i++) {
        Stmt* stmt = cases[i];
        if (stmt.getKind() == StmtKind.Case) {
            bool ok = ma.analyseCaseStmt(stmt, etd, i+1 == numCases, is_sswitch);
            if (!ok) return;
        } else { // default
            if (defaultStmt) {
                ma.error(defaultStmt.getLoc(), "multiple default labels");
                return;
            }
            defaultStmt = cast<DefaultStmt*>(stmt);
            bool ok = ma.analyseDefaultStmt(stmt, is_sswitch);
            if (!ok) return;
            if (i+1 != numCases) {
                ma.error(defaultStmt.getLoc(), "default case must be last in switch");
                return;
            }
        }
    }

    //ma.scope.exit();
    ma.scope.exit();

    // TODO for enum: check for uncovered cases
    // TODO otherwise: check for dups

    // TODO Idea: use original EnumConstantDecls to reset/set-bit to check if already used?
    //  only disadvantage is that we dont know the previous location then
}

func bool Analyser.analyseCaseStmt(Analyser* ma, Stmt* s, EnumTypeDecl* etd, bool lastCase, bool is_sswitch) {
    CaseStmt* c = cast<CaseStmt*>(s);

    Expr* cond = c.getCond();
    if (etd) {
        if (cond.getKind() != ExprKind.Identifier) {
            if (cond.getKind() == ExprKind.Member) {
                ma.error(cond.getLoc(), "enum constant may not be prefixed in case statement");
            } else {
                ma.error(cond.getLoc(), "condition must be an enum constant when using enum type in switch");
            }
            return false;
        }

        IdentifierExpr* i = cast<IdentifierExpr*>(cond);
        EnumConstantDecl* ecd = etd.findConstant(i.getNameIdx());
        if (!ecd) {
            ma.error(cond.getLoc(), "enum %s has no constant %s", etd.asDecl().getName(), i.getName());
            return false;
        }
        Decl* d = cast<Decl*>(ecd);
        d.setUsed();
        QualType qt = d.getType();
        cond.setType(qt);
        cond.setCtc();
        cond.setCtv();
        cond.setRValue();
        i.setDecl(d);
        i.setKind(IdentifierKind.EnumConstant);
    } else {
        Expr* orig = c.getCond();
        QualType qt = ma.analyseExpr(c.getCond2(), true, RHS);
        if (qt.isInvalid()) return false;
        cond.setType(qt);

        if (is_sswitch) {
            if (orig.getKind() != ExprKind.Nil && orig.getKind() != ExprKind.StringLiteral) {
                ma.error(cond.getLoc(), "sswitch case can only have a string literal or nil as condition");
                return false;
            }
        } else {
            if (!cond.isCtv()) {
                ma.error(cond.getLoc(), "case condition is not compile-time constant");
                return false;
            }
        }
    }

    u32 flags = scope.Decl | scope.Break;
    if (!is_sswitch) flags |= scope.Fallthrough;
    ma.scope.enter(flags);
    u32 count = c.getNumStmts();
    Stmt** stmts = c.getStmts();
    bool has_decls = false;
    for (u32 i=0; i<count; i++) {
        Stmt* st = stmts[i];
        ma.analyseStmt(st, false);
        if (ma.has_error) return false; // note: scope stays!

        if (st.getKind() == StmtKind.Decl) has_decls = true;
        if (st.getKind() == StmtKind.Fallthrough) {
            FallthroughStmt* f = cast<FallthroughStmt*>(st);
            if (lastCase) {
                ma.error(f.getLoc(), "'fallthrough' statement in last case");
                return false; // note: scope stays!
            }
            if (i+1 != count) {
                ma.error(f.getLoc(), "'fallthrough' statement must be last statement in case");
                return false; // note: scope stays!
            }
        }
    }
    if (has_decls) c.setHasDecls();
    ma.scope.exit();
    return true;
}

func bool Analyser.analyseDefaultStmt(Analyser* ma, Stmt* s, bool is_sswitch) {
    DefaultStmt* def = cast<DefaultStmt*>(s);

    u32 flags = scope.Decl | scope.Break;
    if (!is_sswitch) flags |= scope.Fallthrough;
    ma.scope.enter(flags);
    u32 count = def.getNumStmts();
    Stmt** stmts = def.getStmts();
    bool has_decls = false;
    for (u32 i=0; i<count; i++) {
        Stmt* st = stmts[i];
        ma.analyseStmt(st, false);
        if (ma.has_error) return false;

        if (st.getKind() == StmtKind.Decl) has_decls = true;
        if (st.getKind() == StmtKind.Fallthrough) {
            if (i+1 != count) {
                FallthroughStmt* f = cast<FallthroughStmt*>(st);
                ma.error(f.getLoc(), "'fallthrough' statement in last case");
                return false; // note: scope stays!
            }
        }
    }
    if (has_decls) def.setHasDecls();
    ma.scope.exit();
    return true;
}

func void Analyser.analyseBreakStmt(Analyser* ma, Stmt* s) {
    if (!ma.scope.allowBreak()) {
        BreakStmt* b = cast<BreakStmt*>(s);
        ma.error(b.getLoc(), "'break' statement not in loop or switch statement");
    }
}

func void Analyser.analyseContinueStmt(Analyser* ma, Stmt* s) {
    if (!ma.scope.allowContinue()) {
        ContinueStmt* c = cast<ContinueStmt*>(s);
        ma.error(c.getLoc(), "'continue' statement not in loop statement");
    }
}

func void Analyser.analyseFallthroughStmt(Analyser* ma, Stmt* s) {
    if (!ma.scope.allowFallthrough()) {
        FallthroughStmt* f = cast<FallthroughStmt*>(s);
        ma.error(f.getLoc(), "'fallthrough' statement not in switch statement");
    }
}

func void Analyser.analyseCompoundStmt(Analyser* ma, CompoundStmt* c) {
    u32 count = c.getCount();
    Stmt** stmts = c.getStmts();
    for (u32 i=0; i<count; i++) {
        Stmt* s = stmts[i];
        ma.analyseStmt(s, true);
        if (ma.has_error) break;
    }
}

func QualType Analyser.analyseCondition(Analyser* ma, Stmt** s_ptr) {
    Stmt* s = *s_ptr;
    if (s.getKind() == StmtKind.Decl) {
        return ma.analyseDeclStmt(s);
    }

    assert(s.getKind() == StmtKind.Expr);
    Expr* e = cast<Expr*>(s);
    // Note: cannot insert ImplicitCastExpr here!
    QualType qt = ma.analyseExpr(&e, true, RHS);
    if (qt.isValid()) ma.checker.check(g_bool, qt, cast<Expr**>(s_ptr), e.getLoc());
    return qt;
}

func void Analyser.analyseIfStmt(Analyser* ma, Stmt* s) {
    IfStmt* i = cast<IfStmt*>(s);
    ma.scope.enter(scope.Decl);
    ma.analyseCondition(i.getCond2());
    if (ma.has_error) return;

    ma.scope.enter(scope.Decl);
    ma.analyseStmt(i.getThen(), false);
    ma.scope.exit();

    Stmt* else_ = i.getElse();
    if (else_) {
        ma.scope.enter(scope.Decl);
        ma.analyseStmt(else_, false);
        ma.scope.exit();
    }

    ma.scope.exit();
}

func void Analyser.analyseForStmt(Analyser* ma, Stmt* s) {
    ForStmt* f = cast<ForStmt*>(s);

    ma.scope.enter(scope.Break | scope.Continue | scope.Decl | scope.Control);
    Stmt** init_ = f.getInit2();
    if (init_) {
        QualType ct = ma.analyseCondition(init_);
        if (ct.isInvalid()) return;
    }

    Expr** cond = f.getCond2();
    if (cond) {
        QualType qt = ma.analyseExpr(cond, true, RHS);
        if (qt.isInvalid()) return;
        ma.checker.check(g_bool, qt, cond, (*cond).getLoc());
    }

    Expr** incr = f.getIncr2();
    if (incr) {
        QualType qt = ma.analyseExpr(incr, true, RHS);
        if (qt.isInvalid()) return;
    }

    ma.analyseStmt(f.getBody(), true);
    ma.scope.exit();
}

func void Analyser.analyseWhileStmt(Analyser* ma, Stmt* s) {
    WhileStmt* w = cast<WhileStmt*>(s);
    ma.scope.enter(scope.Decl);
    ma.analyseCondition(w.getCond2());
    if (ma.has_error) return;

    ma.scope.enter(scope.Break | scope.Continue | scope.Decl | scope.Control);
    ma.analyseStmt(w.getBody(), true);
    ma.scope.exit();
    ma.scope.exit();
}

func void Analyser.analyseDoStmt(Analyser* ma, Stmt* s) {
    DoStmt* d = cast<DoStmt*>(s);
    ma.scope.enter(scope.Break | scope.Continue | scope.Decl);
    ma.analyseStmt(d.getBody(), true);
    ma.scope.exit();
    ma.analyseStmt(d.getCond(), false);
}

func QualType Analyser.analyseDeclStmt(Analyser* ma, Stmt* s) {
    DeclStmt* ds = cast<DeclStmt*>(s);
    VarDecl* vd = ds.getDecl();
    Decl* d = cast<Decl*>(vd);

    // Note: d.getType() is 0 here! (use refType)
    TypeRef* ref = vd.getTypeRef();

    QualType res = ma.analyseTypeRef(ref);
    if (res.isInvalid()) return QualType_Invalid;
    d.setType(res);

    // TODO opaque

    ma.checkName(d, false);

    Expr** initExpr = vd.getInit2();
    if (initExpr) {
        ma.analyseInitExpr(initExpr, res);
    } else {
        if (res.isConstant()) {
            ma.error(d.getLoc(), "constant variable %s must be initialized", d.getName());
            return QualType_Invalid;
        }
        const ArrayType* at = res.getArrayTypeOrNil();
        if (at && !at.hasSize()) {
            ma.error(d.getLoc(), "array-type variable %s needs an explicit size or an initializer", d.getName());
            return QualType_Invalid;
        }
    }

    d.setChecked();
    ma.has_error = ma.scope.add(d);
    return res;
}

func void Analyser.analyseAssertStmt(Analyser* ma, Stmt* s) {
    AssertStmt* a = cast<AssertStmt*>(s);
    QualType qt = ma.analyseExpr(a.getInner2(), true, RHS);
    if (qt.isInvalid()) return;
    Expr* inner = a.getInner();
    ma.checker.check(g_bool, qt, a.getInner2(), inner.getLoc());
}

func void Analyser.analyseReturnStmt(Analyser* ma, Stmt* s) {
    ReturnStmt* r = cast<ReturnStmt*>(s);

    Expr** arg = r.getValue2();

    if (ma.curFunction.hasReturn()) {
        if (!arg) {
            //Expr* e = r.getValue();
            // +6 is skip 'return', to end up at ;
            ma.error(r.getLoc()+6, "non-void function %s should return a value", ma.curFunction.asDecl().getName());
            return;
        }
    } else {
        if (arg) {
            Expr* e = r.getValue();
            ma.error(e.getLoc(), "void function %s should not return a value", ma.curFunction.asDecl().getName());
            return;
        }
    }
    if (arg) {
        QualType qt = ma.analyseExpr(arg, true, RHS);
        if (qt.isInvalid()) return;

        ma.checker.check(ma.curFunction.getRType(), qt, arg, (*arg).getLoc());
    }
}


/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module module_analyser;

import ast local;
import src_loc local;
import scope;

func void Analyser.analyseSwitchStmt(Analyser* ma, Stmt* s) {
    SwitchStmt* sw = cast<SwitchStmt*>(s);

    ma.scope.enter(scope.Decl);

    bool is_sswitch = sw.isSSwitch();

    EnumTypeDecl* etd = nil;
    QualType ct = ma.analyseCondition(sw.getCond2());
    if (ct.isInvalid()) return;

    bool isCharPtr = ct.isCharPointer();

    if (is_sswitch) {
        if (!isCharPtr) {
            ct.dump();
            ct.dump_full();
            ma.error(sw.getCond().getLoc(), "sswitch case can only have a 'char*' or nil as condition");
            return;
        }
        if (!ct.isPointerType()) {
        }
    } else {
        // TODO check type (must be number-ish)

        if (isCharPtr) {
            ma.error(sw.getCond().getLoc(), "cannot use switch with 'char*' type, did you mean sswitch?");
            return;
        }

        EnumType* et = ct.getEnumTypeOrNil();
        if (et) etd = et.getDecl();
    }

    //ma.scope.enter(scope.Break);

    const u32 numCases = sw.getNumCases();
    SwitchCase** cases = sw.getCases();

    if (numCases == 0) {
        ma.error(sw.getLoc(), "%sswitch without cases or default", is_sswitch ? "s" : "");
        return;
    }

    SwitchCase* defaultCase = nil;
    for (u32 i=0; i<numCases; i++) {
        SwitchCase* c = cases[i];
        bool is_last = (i+1 == numCases);

        u32 flags = scope.Decl | scope.Break;
        if (!is_sswitch && !is_last) flags |= scope.Fallthrough;
        ma.scope.enter(flags);

        if (c.isDefault()) {
            if (defaultCase) {
                ma.error(defaultCase.getLoc(), "multiple default labels");
                return;
            }
            defaultCase = c;

            if (!is_last) {
                ma.error(c.getLoc(), "default case must be last in %sswitch", is_sswitch ? "s" : "");
                return;
            }
        }

        bool ok = ma.analyseCase(c, etd, is_last, is_sswitch);
        ma.scope.exit(ma.has_error);
        if (!ok) return;
    }

    //ma.scope.exit();
    ma.scope.exit(ma.has_error);

    // TODO for enum: check for uncovered cases
    // TODO otherwise: check for dups

    // TODO Idea: use original EnumConstantDecls to reset/set-bit to check if already used?
    //  only disadvantage is that we dont know the previous location then
}

func bool Analyser.analyseCase(Analyser* ma, SwitchCase* c, EnumTypeDecl* etd, bool lastCase, bool is_sswitch) {
    if (!c.isDefault()) {
        Expr* cond = c.getCond();
        if (etd) {
            if (!cond.isIdentifier()) {
                if (cond.isMemberExpr()) {
                    ma.error(cond.getLoc(), "enum constant may not be prefixed in case statement");
                } else {
                    ma.error(cond.getLoc(), "condition must be an enum constant when using enum type in switch");
                }
                return false;
            }

            IdentifierExpr* i = cast<IdentifierExpr*>(cond);
            EnumConstantDecl* ecd = etd.findConstant(i.getNameIdx());
            if (!ecd) {
                ma.error(cond.getLoc(), "enum %s has no constant %s", etd.asDecl().getName(), i.getName());
                return false;
            }
            Decl* d = cast<Decl*>(ecd);
            d.setUsed();
            QualType qt = d.getType();
            cond.setType(qt);
            cond.setCtc();
            cond.setCtv();
            cond.setRValue();
            i.setDecl(d);
            i.setKind(IdentifierKind.EnumConstant);
        } else {
            Expr* orig = c.getCond();
            QualType qt = ma.analyseExpr(c.getCond2(), true, RHS);
            if (qt.isInvalid()) return false;
            cond.setType(qt);

            if (is_sswitch) {
                if (!orig.isNilExpr() && !orig.isStringLiteral()) {
                    ma.error(cond.getLoc(), "sswitch case can only have a string literal or nil as condition");
                    return false;
                }
            } else {
                if (!cond.isCtv()) {
                    ma.error(cond.getLoc(), "case condition is not compile-time constant");
                    return false;
                }
            }
        }
    }

    const u32 count = c.getNumStmts();
    Stmt** stmts = c.getStmts();
    bool has_decls = false;
    for (u32 i=0; i<count; i++) {
        Stmt* st = stmts[i];
        ma.analyseStmt(st, false);
        if (ma.has_error) return false;

        if (st.isDecl()) has_decls = true;

        if (st.isFallthrough() && (i+1 != count)) {
            ma.error(st.getLoc(), "'fallthrough' statement must be last statement in case");
            return false;
        }
    }
    if (has_decls) c.setHasDecls();

    Stmt* last = nil;
    if (count) last = stmts[count-1];
    if (!is_sswitch && !ma.checkLastStmt(count, last, c.getLoc(), c.isDefault(), is_sswitch)) return false;

    return true;
}

func bool Analyser.checkLastStmt(Analyser* ma, u32 count, Stmt* last, SrcLoc loc, bool is_default, bool is_sswitch) {
    bool ok = false;
    if (count) {
        last = get_last_stmt(last); // unwrap CompoundStms
        ok = isTerminatingStmt(last);
        if (!ok) loc = last.getLoc();
    } // else count == 0 -> not ok

    if (!ok) {
        if (is_default) {
            ma.error(loc, "no terminating statement (break|return|continue|goto|noreturn-func) at end of default case");
        } else {
            ma.error(loc, "no terminating statement (break|fallthrough|goto|return|continue|noreturn-func) at end of case");
        }
        return false;
    }

    return true;
}

func Stmt* get_last_stmt(Stmt* s) {
    assert(s);
    while (s.getKind() == StmtKind.Compound) {
        CompoundStmt* c = cast<CompoundStmt*>(s);
        Stmt* last = c.getLastStmt();
        if (!last) break;
        s = last;
    }
    return s;
}

func bool isTerminatingStmt(const Stmt* s) {
    switch (s.getKind()) {
    case Return:
        return true;
    case Expr:
        const Expr* e = cast<Expr*>(s);
        if (!e.isCall()) break;
        // get from CallExpr -> FunctionDecl
        const CallExpr* c = cast<CallExpr*>(e);
        e = c.getFunc();
        QualType qt = e.getType();
        const FunctionType* ft = qt.getFunctionTypeOrNil();
        assert(ft);
        const FunctionDecl* fd = ft.getDecl();
        if (fd.hasAttrNoReturn()) return true;
        break;
    case Break:
        return true;
    case Continue:
        return true;
    case Fallthrough:
        return true;
    case Goto:
        return true;
    default:
        break;
    }
    return false;
}


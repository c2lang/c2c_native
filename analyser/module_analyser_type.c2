module module_analyser;

import ast local;

import stdio local;
// TODO put this in own module

/*
 Allowed:
 int a = Enum.A;

 Not Allowed:
 Enum a = (int) b;

 EnumA a = (EnumB) b;
*/

// NOTE: big work in progress

func bool Analyser.checkConversion(Analyser* ma, QualType lhs,  QualType rhs) {
    //printf("------------------------\n");
    //lhs.dump_full();
    //rhs.dump_full();
    // TODO dont allow different enum types
    // TODO create fast lookup table
    const Type* ltype = lhs.getTypeOrNil();
    const Type* rtype = rhs.getTypeOrNil();

    if (ltype.isPointerType() && rtype.isPointerType())  {
        return ma.checkPointers(lhs, rhs);
    } else {
        //printf("Not both pointers\n");
    }
    return true;
}

func bool Analyser.checkPointers(Analyser* ma, QualType lhs,  QualType rhs) {
    // TODO handle AliasTypes, get real type here, not aliasType, but use orig type in diags

    if (lhs.ptr == rhs.ptr) return true;

    const PointerType* ltype = cast<PointerType*>(lhs.getTypeOrNil());
    const PointerType* rtype = cast<PointerType*>(rhs.getTypeOrNil());
/*
    if (ltype == rtype) { // this will only happen with AliasTypes
        printf("  SAME, diff quals\n");
        // TODO check quals
        return true;
    }
*/

    QualType linner = ltype.getInner();
    QualType rinner = rtype.getInner();
    // Note: no need to fully compare, since otherwise the pointers above would have been the same
    const Type* in1 = linner.getTypeOrNil();
    const Type* in2 = rinner.getTypeOrNil();
    if (in1 == in2) {
        //printf("  Same inner, differ quals\n");
        if ((linner.ptr & QualType_Const) && ((rinner.ptr & QualType_Const) == 0)) {
            //printf("  non-const -> const conversion\n");
            return true;
        }
        printf("  Error: discards const\n");
        return false;
        // TODO same for volatile
    }

    // TODO dont allow ptr** -> void* or reverse
    if (in1.isVoidType()) {
        //printf("  ptr -> void*  allowed\n");
        return true;
    }
    if (in2.isVoidType()) {
        //printf("  void* -> ptr  allowed\n");
        return true;
    }
    printf("  invalid pointer conversion\n");
    return false;
}


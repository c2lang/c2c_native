/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module scope;

import ast;
import diagnostics;
import module_list;
import src_loc local;

import stdlib;
import stdio;

public const u32 MaxLevels = 32;

public const u32 Function    = 0x1;
public const u32 Break       = 0x2;
public const u32 Continue    = 0x4;
public const u32 Decl        = 0x8;
public const u32 Control     = 0x10;      // TODO remove?
public const u32 Block       = 0x20;
public const u32 Fallthrough = 0x40;
// TODO use hasDecls instead of checking every Stmt?
//public const u32 HasDecls  = 0x80;

public type Level struct {
    u32 flags;              // combination of Flags
    u32 first_index;
}

public type Scope struct {
    // global scope
    const module_list.List* allmodules;
    diagnostics.Diags* diags;
    const ast.ImportDeclList* imports;
    const ast.Module* mod;
    const ast.SymbolTable* symbols; // all symbols of the module
    bool warn_on_unused;
    // global cache
    //ast.SymbolTable global_cache;

    // local scope, just a single list of Decls
    ast.SymbolTable local_scope;

    // TODO make vector?
    Level[MaxLevels] levels;
    u32 lvl;
} @(opaque)

public func Scope* create(module_list.List* allmodules,
                          diagnostics.Diags* diags,
                          const ast.ImportDeclList* imports,
                          ast.Module* mod,
                          const ast.SymbolTable* symbols,
                          bool warn_on_unused)
{
    Scope* s = stdlib.calloc(1, sizeof(Scope));
    s.allmodules = allmodules;
    s.diags = diags;
    s.imports = imports;
    s.mod = mod;
    s.symbols = symbols;
    s.warn_on_unused = warn_on_unused;
    //s.global_cache.init(64);
    s.local_scope.init(64);

    s.addImports();

    return s;
}

public func void Scope.free(Scope* s) {
    //s.global_cache.free();
    s.local_scope.free();
    stdlib.free(s);
}

public func void Scope.reset(Scope* s) {
    s.lvl = 0;
    u32 first_index = s.imports.size();
    //stdio.printf("RESET %u\n", first_index);
    s.local_scope.crop(first_index);
}

func void Scope.addImports(Scope* s) {
    // Note: this also adds the module itself (import[0])

    //stdio.printf("=== %s ===\n", s.mod.getName());
    u32 num_imports = s.imports.size();
    ast.ImportDecl** imports = s.imports.getDecls();
    for (u32 i=0; i<num_imports; i++) {
        ast.ImportDecl* id = imports[i];
        ast.Decl* d = cast<ast.Decl*>(id);
        u32 name_idx = id.getImportNameIdx();
        //stdio.printf("IMPORT %s\n", ast.idx2name(name_idx));

        // check for clash with other imports
        ast.Decl* decl = s.local_scope.find(name_idx);
        if (decl) {
            s.diags.error(id.getLoc(), "duplicate import name '%s'", ast.idx2name(name_idx));
            assert(decl.isImport());
            ast.ImportDecl* other = cast<ast.ImportDecl*>(decl);
            s.diags.note(other.getLoc(), "previous definition is here");
            continue;
        }

        // check for clash with other symbol in this module
        decl = s.symbols.find(name_idx);
        if (decl) {
            s.diags.error(id.getLoc(), "import redefinition of '%s'", ast.idx2name(name_idx));
            s.diags.note(decl.getLoc(), "previous definition is here");
            continue;
        }

        s.local_scope.add(name_idx, d);
    }
    //s.dump();
}

public func void Scope.enter(Scope* s, u32 flags) {
    if (s.lvl == MaxLevels) {
        s.diags.error(0, "max scope depth reached");
        assert(0);
        return;
    }
    Level* top = &s.levels[s.lvl];
    if (s.lvl) {
        const Level* parent = &s.levels[s.lvl-1];
        flags |= (parent.flags & (Break|Continue));
    }
    top.flags = flags;
    top.first_index = s.local_scope.size();
    s.lvl++;
    //stdio.printf("---- enter ----\n");
    //s.dump();
}

public func void Scope.exit(Scope* s, bool has_error) {
    assert(s.lvl != 0);
    //stdio.printf("---- exit ----\n");
    //s.dump();
    s.lvl--;
    u32 first = s.levels[s.lvl].first_index;

    if (s.warn_on_unused && !has_error) {
        u32 last = s.local_scope.size();
        ast.Decl** decls = s.local_scope.getDecls();
        for (u32 i=first; i<last; i++) {
            ast.Decl* d = decls[i];
            if (!d.isUsed()) {
                ast.VarDecl* vd = cast<ast.VarDecl*>(d);
                // Note: params are handled by function
                if (vd.isLocal()) s.diags.warn(d.getLoc(), "unused variable '%s'", d.getName());
            }
        }
    }

    s.local_scope.crop(first);
}

public func bool Scope.allowBreak(const Scope* s) {
    assert(s.lvl);
    const Level* top = &s.levels[s.lvl-1];
    return (top.flags & Break);
}

public func bool Scope.allowContinue(const Scope* s) {
    assert(s.lvl);
    const Level* top = &s.levels[s.lvl-1];
    return (top.flags & Continue);
}

public func bool Scope.allowFallthrough(const Scope* s) {
    assert(s.lvl);
    const Level* top = &s.levels[s.lvl-1];
    return (top.flags & Fallthrough);
}

// return true if already found
public func bool Scope.add(Scope* s, ast.Decl* d) {
    //stdio.printf("add %s\n", d.getName());
    assert(s.lvl);
    const u32 name_idx = d.getNameIdx();

    ast.Decl* decl = s.local_scope.find(name_idx);
    if (decl) return true;

    bool other_error = false;
    decl = s.findGlobalSymbol(name_idx, d.getLoc(), &other_error, false);
    if (decl) return true;

    s.local_scope.add(name_idx, d);
    return false;
}

// will give error on duplicates, ambiguous or not found
public func ast.Decl* Scope.find(Scope* s, u32 name_idx, SrcLoc loc, bool usedPublic) {
    //stdio.printf("find %s\n", ast.idx2name(name_idx));
    ast.Decl* decl = s.local_scope.find(name_idx);
    if (decl) {
        if (decl.isImport()) {
            decl.setUsed();
            if (usedPublic) decl.setUsedPublic();
        }
        return decl;
    }

    bool other_error = false;
    decl = s.findGlobalSymbol(name_idx, loc, &other_error, usedPublic);

    if (!decl && !other_error) {
        const char* name = ast.idx2name(name_idx);

        ast.ImportDecl* id  = s.imports.findAny(name_idx);
        if (id) {
            s.diags.error(loc, "module '%s' is imported with alias '%s'", id.asDecl().getName(), id.getAliasName());
        } else {
            s.diags.error(loc, "use of undeclared identifier '%s'", name);
        }
        // TODO make suggestion based on symbols in all modules
        return nil;
    }
    return decl;
}

// returns false if symbol exists and will give errors then
public func bool Scope.checkGlobalSymbol(Scope* s, u32 name_idx, SrcLoc loc) {
    //stdio.printf("check %s\n", ast.idx2name(name_idx));
    // TODO just give error if already exists (in this module or other local import)

    u32 num_imports = s.imports.size();
    ast.ImportDecl** imports = s.imports.getDecls();
    ast.Decl* decl = nil;
    for (u32 i=0; i<num_imports; i++) {
        ast.ImportDecl* id = imports[i];
        // check if it is the import itself
        if (name_idx == id.getImportNameIdx()) {
            decl = cast<ast.Decl*>(id);
            break;
        }

        if (id.isLocal()) {
            ast.Module* dest = id.getDest();
            decl = dest.findSymbol(name_idx);
            if (decl) break;

            // TODO what if symbol is not public?
            //bool visible = !((s.mod != dest) && !d.isPublic());
        }
    }
    if (decl) {
        s.diags.error(loc, "redefinition of '%s'", ast.idx2name(name_idx));
        s.diags.note(decl.getLoc(), "previous definition is here");
        return false;
    }
    return true;
}

public func ast.ImportDecl* Scope.findModule(Scope* s, u32 name_idx, SrcLoc loc) {
    //stdio.printf("find module %s\n", ast.idx2name(name_idx));
    assert(s);
    ast.ImportDecl* d = s.imports.find(name_idx);
    d.asDecl().setUsed();

    if (d) return d;

    d = s.imports.findAny(name_idx);
    if (d) {
        s.diags.error(loc, "module '%s' is imported with alias '%s'", d.asDecl().getName(), d.getAliasName());
        return nil;
    }

    ast.Module* mod = s.allmodules.find(name_idx);
    if (mod) {
        s.diags.error(loc, "module %s not imported", ast.idx2name(name_idx));
    } else {
        s.diags.error(loc, "unknown module: '%s'", ast.idx2name(name_idx));
    }
    return nil;
}

public func ast.Decl* Scope.findGlobalSymbolInModule(Scope* s, ast.Module* mod, u32 name_idx, SrcLoc loc) {
    //stdio.printf("find in module %s\n", ast.idx2name(name_idx));
    assert(s);
    ast.Decl* d = mod.findSymbol(name_idx);
    if (!d) {
        s.diags.error(loc, "module %s has no symbol '%s'", mod.getName(), ast.idx2name(name_idx));
        return nil;
    }

    // TODO use d.getMod()?
    if (mod != s.mod) {
        // TODO check public
        if (!d.isPublic()) {
            // TODO fullname
            s.diags.error(loc, "symbol '%s' is not public", d.getFullName());
            return nil;
        }
        d.setUsedPublic();
    }

    return d;
}

public func ast.Decl* Scope.findType(Scope* s, u32 name_idx, SrcLoc loc) {
    assert(s);

    bool other_error = false;
    ast.Decl* decl = s.findGlobalSymbol(name_idx, loc, &other_error, false);
    if (!decl && !other_error) {
        s.diags.error(loc, "unknown type '%s'", ast.idx2name(name_idx));
        // TODO make suggestion based on symbols in all modules
    }
    return decl;
}

// will give warning on dups or ambiguous. Not if not found
func ast.Decl* Scope.findGlobalSymbol(Scope* s, u32 name_idx, SrcLoc loc, bool* other_error, bool usedPublic) {
/*
    // Note: global cache seems to make it slower!
    ast.Decl* d = s.global_cache.find(name_idx);
    if (d) {
        // TODO update if used_public
        return d;
    }
*/

    ast.Decl* decl = nil;

    ast.ImportDecl* used_import = nil;

    // lookup in local imported modules
    bool ambiguous = false;
    bool visible_match = false;

    u32 num_imports = s.imports.size();
    ast.ImportDecl** imports = s.imports.getDecls();
    for (u32 i=0; i<num_imports; i++) {
        ast.ImportDecl* id = imports[i];
        // check if it is the import itself
        if (name_idx == id.getImportNameIdx()) {
            decl = cast<ast.Decl*>(id);
            used_import = id;
            visible_match = true;
            continue;
        }

        if (id.isLocal()) {
            ast.Module* dest = id.getDest();
            ast.Decl* d = dest.findSymbol(name_idx);
            if (!d) continue;

            bool visible = !((s.mod != dest) && !d.isPublic());
            if (decl) {
                // if previous result was non-visible, replace with new one
                if (visible_match == visible) {
                    const char* name = ast.idx2name(name_idx);
                    const char* mod2_name = ast.idx2name(id.getImportNameIdx());
                    if (!ambiguous) {
                        s.diags.error(loc, "symbol %s is ambiguous", name);
                        const char* mod1_name = ast.idx2name(used_import.getImportNameIdx());
                        s.diags.note(loc, "did you mean %s.%s or %s.%s?", mod1_name, name, mod2_name, name);
                        ambiguous = true;
                    } else {
                        s.diags.error(loc, "did you mean %s.%s?", mod2_name, name);
                    }
                    continue;
                }
                if (!visible_match) {  // replace with visible symbol
                    decl = d;
                    used_import = id;
                    visible_match = visible;
                }
            } else {
                decl = d;
                used_import = id;
                visible_match = visible;
            }
        }
    }
    if (ambiguous) return nil;

    if (decl) {
        bool external = (used_import.getDest() != s.mod) && (cast<ast.Decl*>(used_import) != decl);
        // mark importdecl as used (if not local)

        used_import.asDecl().setUsed();

        if (!visible_match) {
            s.diags.error(loc, "symbol '%s' is not public", decl.getFullName());
            *other_error = true;
            return nil;
        }

        if (external || usedPublic) decl.setUsedPublic();
        // TODO add to cache
    }

    return decl;
}

public func void Scope.dump(const Scope* s) {
    s.local_scope.dump();
    stdio.printf("Scope (lvl %u) %u\n", s.lvl, s.local_scope.size());
    for (u32 i=0; i<s.lvl; i++) {
        const Level* l = &s.levels[i];
        stdio.printf("  [%u]  start %2u  flags 0x%02x\n", i, l.first_index, l.flags);
    }
}


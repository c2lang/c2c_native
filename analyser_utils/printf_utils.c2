/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module printf_utils;

import ast local;
import ctype;
import src_loc local;

public func const char* get_format(Expr* format, SrcLoc* format_loc) {
    const char* format_text = nil;
    switch (format.getKind()) {
    case StringLiteral:
        StringLiteral* s = cast<StringLiteral*>(format);
        format_text = s.getText();
        *format_loc = format.getLoc() + 1;
        break;
    case Identifier:
        QualType qt = format.getType();
        assert(qt.isArray());
        ArrayType* at = qt.getArrayType();
        qt = at.getElemType();
        if (!qt.isConst()) return nil;

        IdentifierExpr* id = cast<IdentifierExpr*>(format);
        Decl* decl = id.getDecl();
        assert(decl.isVariable());
        VarDecl* vd = cast<VarDecl*>(decl);
        Expr* initExpr = vd.getInit();
        assert(initExpr);
        return get_format(initExpr, format_loc);
    case Member:
        QualType qt = format.getType();
        assert(qt.isArray());
        ArrayType* at = qt.getArrayType();
        qt = at.getElemType();
        if (!qt.isConst()) return nil;

        MemberExpr* m = cast<MemberExpr*>(format);
        Decl* decl = m.getFullDecl();
        assert (decl.isVariable());
        VarDecl* vd = cast<VarDecl*>(decl);
        Expr* initExpr = vd.getInit();
        assert(initExpr);
        return get_format(initExpr, format_loc);
    default:
        assert(0);
        break;
    }
    return format_text;
}

public type Specifier enum u8 {
    Other,          // %% or unknown
    String,         // %s, %-s, %4s
    Char,           // %c
    Integer,        // %i, %-i, %-8i, %08i, %x, %o
    FloatingPoint,  // %f
    Pointer,        // %p
    Invalid,        // other
}

// cp points after first %
public func Specifier getSpecifier(const char* specifier, u32* len) {
    const char* cp = specifier;
    while (1) {
        switch (*cp) {
        case '*':
            // TODO support %*d -> * is extra arg specifying width
            assert(0);
            break;
        case '%':
            // only if it is first char
            cp++;
            *len = cast<u32>(cp - specifier);
            if (*len == 1) return Specifier.Other;
            return Specifier.Invalid;
        case 'c':
            cp++;
            *len = cast<u32>(cp - specifier);
            return Specifier.Char;
        case 'f':
            cp++;
            *len = cast<u32>(cp - specifier);
            return Specifier.FloatingPoint;
        case 'p':
            cp++;
            *len = cast<u32>(cp - specifier);
            return Specifier.Pointer;
        case 's':
            cp++;
            *len = cast<u32>(cp - specifier);
            return Specifier.String;
        case 'd': fallthrough;
        case 'o': fallthrough;
        case 'x': fallthrough;
        case 'X':
            cp++;
            *len = cast<u32>(cp - specifier);
            return Specifier.Integer;
        default:
            if (ctype.isalpha(*cp)) {
                cp++;
                *len = cast<u32>(cp - specifier);
                return Specifier.Invalid;
            }
            break;
        }
        cp++;
    }
    return Specifier.Other;
}


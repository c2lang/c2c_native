module ast_list;

import ast local;
import utils local;

import stdlib local;
import string local;
import stdio local;

public type AST struct {

    ImportDeclList imports;
    DeclList types;
    FunctionDeclList functions;

} @(opaque)

public func AST* AST.create() {
    AST* a = calloc(1, sizeof(AST));
    a.imports.init();
    a.functions.init();
    return a;
}

// TODO AST.free() needed?

public func void AST.addImport(AST* a, ImportDecl* d) @(inline) {
    a.imports.add(d);
}

public func void AST.addFunc(AST* a, FunctionDecl* d) @(inline) {
    a.functions.add(d);
}

public func void AST.addTypeDecl(AST* a, Decl* d) @(inline) {
    a.types.add(d);
}

public func void AST.print(const AST* a) {
    StringBuffer* out = StringBuffer.create(1024*1024);

    out.add("---- AST ----\n");
    const ImportDecl** imports = a.imports.getDecls();
    for (u32 i=0; i<a.imports.size(); i++) {
        imports[i].print(out, 0);
    }

    out.add("\n");
    const Decl** types = a.types.getDecls();
    for (u32 i=0; i<a.types.size(); i++) {
        types[i].print(out, 0);
        out.add("\n");
    }

    out.add("\n");
    const FunctionDecl** functions = a.functions.getDecls();
    for (u32 i=0; i<a.functions.size(); i++) {
        functions[i].print(out, 0);
        out.add("\n");
    }


    printf("%s\n", out.data());
    out.free();
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import src_loc local;

public type AliasTypeDecl struct {
    Decl parent;
    TypeRef typeRef;    // Note: variable size!
} @(opaque)

public func AliasTypeDecl* AliasTypeDecl.create(ast_context.Context* c,
                                                u32 name,
                                                SrcLoc loc,
                                                bool is_public,
                                                u32 ast_idx,
                                                const TypeRefHolder* ref)
{
    u32 size = sizeof(AliasTypeDecl) + ref.getExtraSize();
    AliasTypeDecl* d = c.alloc(size);
    AliasType* at = AliasType.create(c, d);
    d.parent.init(DeclKind.AliasType, name, loc, is_public, QualType.init(cast<Type*>(at)), ast_idx);
    ref.fill(&d.typeRef);
#if AstStatistics
    Stats.addDecl(DeclKind.AliasType, size);
#endif
    return d;
}

public func Decl* AliasTypeDecl.asDecl(AliasTypeDecl* d) @(inline) {
    return &d.parent;
}

public func TypeRef* AliasTypeDecl.getTypeRef(AliasTypeDecl* d) {
    return &d.typeRef;
}

func void AliasTypeDecl.print(const AliasTypeDecl* d, string_buffer.Buf* out, u32 indent) {
    d.parent.printKind(out, indent, true);
    d.parent.printBits(out);
    d.parent.printAttrs(out);
    d.parent.printName(out);

    if (d.parent.qt.isInvalid()) {
        out.add1(' ');
        d.typeRef.print(out, true);
        out.add1('\n');
    }
}


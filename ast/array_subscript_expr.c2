/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;

public type ArraySubscriptExpr struct {
    // Note: loc is that of right bracket
    Expr parent;
    Expr* base;
    Expr* idx;
} @(opaque)

public func ArraySubscriptExpr* ArraySubscriptExpr.create(ast_context.Context* c,
                                                          SrcLoc loc,
                                                          Expr* base,
                                                          Expr* idx)
{
    ArraySubscriptExpr* e = c.alloc(sizeof(ArraySubscriptExpr));
    e.parent.init(ExprKind.ArraySubscript, loc, 0, 0, 0, ValType.LValue);
    e.base = base;
    e.idx = idx;
#if AstStatistics
    Stats.addExpr(ExprKind.ArraySubscript, sizeof(ArraySubscriptExpr));
#endif
    return e;
}

func Expr* ArraySubscriptExpr.instantiate(ArraySubscriptExpr* e, Instantiator* inst) {
    ArraySubscriptExpr* a = ArraySubscriptExpr.create(inst.c,
                                                      e.parent.loc,
                                                      e.base.instantiate(inst),
                                                      e.idx.instantiate(inst));
    return cast<Expr*>(a);
}

public func Expr* ArraySubscriptExpr.getBase(const ArraySubscriptExpr* e) { return e.base; }
public func Expr** ArraySubscriptExpr.getBase2(ArraySubscriptExpr* e) { return &e.base; }

public func Expr* ArraySubscriptExpr.getIndex(const ArraySubscriptExpr* e) { return e.idx; }
public func Expr** ArraySubscriptExpr.getIndex2(ArraySubscriptExpr* e) { return &e.idx; }

func void ArraySubscriptExpr.printLiteral(const ArraySubscriptExpr* e, string_buffer.Buf* out) {
    e.base.printLiteral(out);
    out.add1('[');
    e.idx.printLiteral(out);
    out.add1(']');
}

func void ArraySubscriptExpr.print(const ArraySubscriptExpr* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.newline();
    e.base.print(out, indent + 1);
    e.idx.print(out, indent + 1);
}


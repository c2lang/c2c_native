/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

public type ArraySubscriptExpr struct {
    // Note: loc is that of right bracket
    Expr parent;
    Expr* base;
    Expr* idx;
} @(opaque)

public func ArraySubscriptExpr* ArraySubscriptExpr.create(ast_context.Context* c, SrcLoc loc, Expr* base, Expr* idx) @(inline) {
    ArraySubscriptExpr* e = c.alloc(sizeof(ArraySubscriptExpr));
    e.parent.init(ExprKind.ArraySubscript, loc, 0, 0, 0);
    e.base = base;
    e.idx = idx;

    e.parent.setLValue();
#if AstStatistics
    Stats.addExpr(ExprKind.ArraySubscript, sizeof(ArraySubscriptExpr));
#endif
    return e;
}

public func Expr* ArraySubscriptExpr.getBase(const ArraySubscriptExpr* e) { return e.base; }
public func Expr** ArraySubscriptExpr.getBase2(ArraySubscriptExpr* e) { return &e.base; }

public func Expr* ArraySubscriptExpr.getIndex(const ArraySubscriptExpr* e) { return e.idx; }
public func Expr** ArraySubscriptExpr.getIndex2(ArraySubscriptExpr* e) { return &e.idx; }

func void ArraySubscriptExpr.print(const ArraySubscriptExpr* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.add1('\n');
    e.base.print(out, indent + 2);
    e.idx.print(out, indent + 2);
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;

public type ArrayTypeBits struct {
    u32 : NumTypeBits;
    u32 has_size : 1;       // if it has an sizeExpr
    //u32 is_incremental : 1;
}

public type ArrayType struct {
    Type parent;
    QualType elem;
    u32 size;       // set during analysis, number of elements
    // NOTE: 4 bytes padding here on 64-bit systems
} @(opaque)

public func ArrayType* ArrayType.create(ast_context.Context* c,
                                        QualType elem,
                                        bool has_size,
                                        u32 size)
{
    ArrayType* t = c.alloc(sizeof(ArrayType));
    t.parent.init(TypeKind.Array);
    //t.parent.arrayTypeBits.is_incremental = is_incremental;
    t.parent.arrayTypeBits.has_size = has_size;
    t.elem = elem;
    t.size = size;
#if AstStatistics
    Stats.addType(TypeKind.Array, sizeof(ArrayType));
#endif
    return t;
}

public func Type* ArrayType.asType(ArrayType* t) @(inline) { return &t.parent; }

public func QualType ArrayType.getElemType(const ArrayType* t) { return t.elem; }

/*
public func bool ArrayType.isIncremental(const ArrayType* t) {
    return t.parent.arrayTypeBits.is_incremental;
}
*/

public func u32 ArrayType.hasSize(const ArrayType* t) {
    return t.parent.arrayTypeBits.has_size;
}

public func u32 ArrayType.getSize(const ArrayType* t) { return t.size; }

func void ArrayType.print(const ArrayType* t, string_buffer.Buf* out) {
    t.elem.print(out);
    out.add("[");
/*
    if (t.parent.arrayTypeBits.is_incremental) {
        out.add("+");
*/
    out.print("%u", t.size);
    out.add("]");
    // TODO use printPost()  printPre()
}

func void ArrayType.debugPrint(const ArrayType* t, string_buffer.Buf* out) {
    out.add("ArrayType TODO\n");
}

public func void ArrayType.fullPrint(const ArrayType* t, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.print("ArrayType [%p]", t);
    //if (t.parent.arrayTypeBits.value_set) out.print(" size=%u", t.size);
    out.print(" size=%u", t.size);
    out.add("\n");
    t.elem.fullPrint(out, indent + 2);
}


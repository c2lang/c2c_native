/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import attr;
import attr_table;
import src_loc local;
import string_buffer;

import stdlib;

/*
    Represents a single file with all its imports, decls, etc
*/
public type AST struct {
    // Note: filename is stored in auxPool, so cannot use ast.idx2name()
    const char* filename;   // no ownership, TODO change to u32, since auxPool might resize!
    Module* mod;
    void* ptr;  // pointer used during analyser/generation (in analysis: Scope*)
    u32 idx;    // ast idx

    ImportDeclList imports;
    DeclList types;
    DeclList variables;
    FunctionDeclList functions;
    DeclList static_asserts;
    DeclList array_values;

    attr_table.Table* attrs;
} @(opaque)

static_assert(136, sizeof(AST));

public func AST* AST.create(const char* filename, Module* mod) {
    AST* a = stdlib.calloc(1, sizeof(AST));
    a.filename = filename;
    a.mod = mod;
    a.idx = addAST(a);
    a.imports.init();
    a.types.init(0);
    a.variables.init(4);
    a.functions.init();
    a.static_asserts.init(0);
    a.array_values.init(0);
    return a;
}

public func void AST.free(AST* a) {
    a.imports.free();
    a.types.free();
    a.variables.free();
    a.functions.free();
    a.static_asserts.free();
    a.array_values.free();
    if (a.attrs) a.attrs.free();
    stdlib.free(a);
}

public func const char*  AST.getFilename(const AST* a) @(inline) { return a.filename; }

public func u32 AST.getIdx(const AST* a) @(inline) { return a.idx; }

public func const char* AST.getName(const AST* a) @(inline) {
    return a.mod.getName();
}

public func u32 AST.getNameIdx(const AST* a) @(inline) {
    return a.mod.getNameIdx();
}

public func SrcLoc AST.getLoc(const AST* a) {
    ImportDecl** imports = a.imports.getDecls();
    Decl* d = cast<Decl*>(imports[0]);
    return d.getLoc();
}

public func void AST.setPtr(AST* a, void* ptr) @(inline) { a.ptr = ptr; }

public func void* AST.getPtr(const AST* a) @(inline) { return a.ptr; }

public func Module* AST.getMod(const AST* a) @(inline) { return a.mod; }

public func void AST.addImport(AST* a, ImportDecl* d) @(inline) {
    a.imports.add(d);
}

public func ImportDecl* AST.findImport(const AST* a, u32 name) {
    ImportDecl** imports = a.imports.getDecls();
    for (u32 i=1; i<a.imports.size(); i++) {
        ImportDecl* d = imports[i];
        if (d.asDecl().getNameIdx() == name) return d;

    }
    return nil;
}

public func void AST.addFunc(AST* a, FunctionDecl* d) @(inline) {
    a.functions.add(d);
}

public func void AST.addTypeDecl(AST* a, Decl* d) @(inline) {
    a.types.add(d);
}

public func void AST.addVarDecl(AST* a, Decl* d) @(inline) {
    a.variables.add(d);
}

public func void AST.addStaticAssert(AST* a, StaticAssertDecl* d) @(inline) {
    a.static_asserts.add(d.asDecl());
}

public func void AST.addArrayValue(AST* a, ArrayValueDecl* d) @(inline) {
    a.array_values.add(d.asDecl());
}

public type ImportVisitor func void (void* arg, ImportDecl* d);

public func void AST.visitImports(const AST* a, ImportVisitor visitor, void* arg) {
    ImportDecl** imports = a.imports.getDecls();
    // Note: skip first 'Import' since it is really the module statement
    for (u32 i=1; i<a.imports.size(); i++) {
        visitor(arg, imports[i]);
    }
}

public func const ImportDeclList* AST.getImports(const AST* a) { return &a.imports; }

public type ArrayValueVisitor func void (void* arg, ArrayValueDecl* avd);

public func void AST.visitArrayValues(const AST* a, ArrayValueVisitor visitor, void* arg) {
    Decl** values = a.array_values.getDecls();
    for (u32 i=0; i<a.array_values.size(); i++) {
        visitor(arg, cast<ArrayValueDecl*>(values[i]));
    }
}

public type FunctionVisitor func void (void* arg, FunctionDecl* d);

public func void AST.visitStructFunctions(const AST* a, FunctionVisitor visitor, void* arg) {
    FunctionDecl** functions = a.functions.getDecls();
    for (u32 i=0; i<a.functions.size(); i++) {
        FunctionDecl* d = functions[i];
        if (d.hasPrefix()) visitor(arg, d);
    }
}

public func void AST.visitFunctions(const AST* a, FunctionVisitor visitor, void* arg) {
    FunctionDecl** functions = a.functions.getDecls();
    for (u32 i=0; i<a.functions.size(); i++) {
        FunctionDecl* d = functions[i];
        visitor(arg, d);
    }
}

public type TypeDeclVisitor func void (void* arg, Decl* d);

public func void AST.visitTypeDecls(const AST* a, TypeDeclVisitor visitor, void* arg) {
    Decl** types = a.types.getDecls();
    for (u32 i=0; i<a.types.size(); i++) {
        visitor(arg, types[i]);
    }
}

public type VarDeclVisitor func void (void* arg, VarDecl* d);

public func void AST.visitVarDecls(const AST* a, VarDeclVisitor visitor, void* arg) {
    Decl** variables = a.variables.getDecls();
    for (u32 i=0; i<a.variables.size(); i++) {
        visitor(arg, cast<VarDecl*>(variables[i]));
    }
}

public type DeclVisitor func void (void* arg, Decl* d);

public func void AST.visitStaticAsserts(const AST* a, DeclVisitor visitor, void* arg) {
    Decl** asserts = a.static_asserts.getDecls();
    for (u32 i=0; i<a.static_asserts.size(); i++) {
        visitor(arg, asserts[i]);
    }
}

public func void AST.visitDecls(const AST* a, DeclVisitor visitor, void* arg) {
    // imports
    ImportDecl** imports = a.imports.getDecls();
    for (u32 i=0; i<a.imports.size(); i++) {
        visitor(arg, cast<Decl*>(imports[i]));
    }

    // types
    Decl** types = a.types.getDecls();
    for (u32 i=0; i<a.types.size(); i++) {
        visitor(arg, types[i]);
    }

    // variables
    Decl** variables = a.variables.getDecls();
    for (u32 i=0; i<a.variables.size(); i++) {
        visitor(arg, variables[i]);
    }

    // functions
    FunctionDecl** functions = a.functions.getDecls();
    for (u32 i=0; i<a.functions.size(); i++) {
        FunctionDecl* d = functions[i];
        visitor(arg, cast<Decl*>(d));
    }
}

public func Decl* AST.findType(const AST* a, u32 name_idx) {
    Decl** types = a.types.getDecls();
    for (u32 i=0; i<a.types.size(); i++) {
        Decl* d = types[i];
        if (d.getNameIdx() == name_idx) return d;
    }
    return nil;
}

// note: these will be called sequentially for same decl
public func void AST.storeAttr(AST* a,
                               Decl* d,
                               attr.AttrKind kind,
                               const attr.Value* value)
{
    if (!a.attrs) a.attrs = attr_table.create();
    a.attrs.add(d, kind, value);
}

public func const attr.Value* AST.getAttr(const AST* a,
                                          const Decl* d,
                                          attr.AttrKind kind)
{
    if (a.attrs) return a.attrs.find(d, kind);
    return nil;
}

public func void AST.info(const AST* a, string_buffer.Buf* out) {
    out.print("    %s\n", a.filename);
}

public func void AST.print(const AST* a, string_buffer.Buf* out, bool show_funcs) {
    out.print("---- AST %s ----\n", a.filename);

    ImportDecl** imports = a.imports.getDecls();
    for (u32 i=1; i<a.imports.size(); i++) {
        imports[i].print(out, 0);
    }
    if (a.imports.size() > 1) out.newline();

    Decl** types = a.types.getDecls();
    for (u32 i=0; i<a.types.size(); i++) {
        types[i].print(out, 0);
        out.newline();
    }

    Decl** variables = a.variables.getDecls();
    for (u32 i=0; i<a.variables.size(); i++) {
        variables[i].print(out, 0);
        out.newline();
    }

    if (show_funcs) {
        FunctionDecl** functions = a.functions.getDecls();
        for (u32 i=0; i<a.functions.size(); i++) {
            functions[i].print(out, 0);
            out.newline();
        }
    }

    Decl** asserts = a.static_asserts.getDecls();
    for (u32 i=0; i<a.static_asserts.size(); i++) {
        asserts[i].print(out, 0);
        out.newline();
    }
}

public func void AST.setExported(AST* a) {
    // types, cannot be really exported, but do mark as such (for used?)
    Decl** types = a.types.getDecls();
    for (u32 i=0; i<a.types.size(); i++) {
        types[i].setExportedIfPublic();
    }

    // variables
    Decl** variables = a.variables.getDecls();
    for (u32 i=0; i<a.variables.size(); i++) {
        variables[i].setExportedIfPublic();
    }

    // functions
    Decl** functions = cast<Decl**>(a.functions.getDecls());
    for (u32 i=0; i<a.functions.size(); i++) {
        functions[i].setExportedIfPublic();
    }
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

public type BinaryOperatorBits struct {
    u32 : NumExprBits;
    u32 kind : 5;
}

public type BinaryOperator struct {
    Expr expr;
    Expr* lhs;
    Expr* rhs;
} @(opaque)

public type BinaryOpcode enum u8 {
    Multiply,
    Divide,
    Reminder,
    Add,
    Subtract,
    ShiftLeft,
    ShiftRight,
    LessThan,
    GreaterThan,
    LessEqual,
    GreaterEqual,
    Equal,
    NotEqual,
    And,
    Xor,
    Or,
    LAnd,
    LOr,
    Assign,
    MulAssign,
    DivAssign,
    RemAssign,
    AddAssign,
    SubASsign,
    ShlAssign,
    ShrASsign,
    AndAssign,
    XorAssign,
    OrAssign,
//    Comma, // Q: used?
}

const char*[] binaryOpcode_names = {
    "*",
    "/",
    "%",
    "+",
    "-",
    "<<",
    ">>",
    "<",
    ">",
    "<=",
    ">=",
    "==",
    "!=",
    "&",
    "^",
    "|",
    "&&",
    "||",
    "=",
    "*=",
    "/=",
    "%=",
    "+=",
    "-=",
    "<<=",
    ">>=",
    "&=",
    "^=",
    "|=",
    //",",
}

static_assert(elemsof(BinaryOpcode), elemsof(binaryOpcode_names));

public func BinaryOperator* BinaryOperator.create(ast_context.Context* c, SrcLoc loc, BinaryOpcode kind, Expr* lhs, Expr* rhs) @(inline) {
    BinaryOperator* e = c.alloc(sizeof(BinaryOperator));
    e.expr.init(ExprKind.BinaryOperator, loc, 0, 0, 0);
    e.expr.stmt.binaryOperatorBits.kind = kind;
    e.lhs = lhs;
    e.rhs = rhs;
    return e;
}

public func BinaryOpcode BinaryOperator.getKind(const BinaryOperator* e) {
    return cast<BinaryOpcode>(e.expr.stmt.binaryOperatorBits.kind);
}

public func Expr* BinaryOperator.getLHS(BinaryOperator* e) { return e.lhs; }
public func Expr** BinaryOperator.getLHS2(BinaryOperator* e) { return &e.lhs; }

public func Expr* BinaryOperator.getRHS(BinaryOperator* e) { return e.rhs; }
public func Expr** BinaryOperator.getRHS2(BinaryOperator* e) { return &e.rhs; }

public func void BinaryOperator.print(const BinaryOperator* e, string_buffer.Buf* out, u32 indent) {
    e.expr.printKind(out, indent, "BinaryOperator");
    e.expr.printTypeBits(out);
    out.color(col_Value);
    out.add(" '");
    out.add(binaryOpcode_names[e.getKind()]);
    out.add("'\n");

    out.indent(indent + 2);
    out.color(col_Attr);
    out.add("LHS=\n");
    e.lhs.print(out, indent + 2);

    out.indent(indent + 2);
    out.color(col_Attr);
    out.add("RHS=\n");
    e.rhs.print(out, indent + 2);
}

public func void BinaryOperator.printLiteral(const BinaryOperator* e, string_buffer.Buf* out) {
    e.lhs.printLiteral(out);
    out.add(binaryOpcode_names[e.getKind()]);
    e.rhs.printLiteral(out);
}


/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;

public type BooleanLiteralBits struct {
    u32 : NumExprBits;
    u32 value : 1;
}

public type BooleanLiteral struct {
    Expr parent;
} @(opaque)

public func BooleanLiteral* BooleanLiteral.create(ast_context.Context* c, SrcLoc loc, bool val) @(inline) {
    BooleanLiteral* e = c.alloc(sizeof(BooleanLiteral));
    e.parent.init(ExprKind.BooleanLiteral, loc, 1, 1, 0, ValType.RValue);
    e.parent.parent.booleanLiteralBits.value = val;
    e.parent.setType(g_bool);
#if AstStatistics
    Stats.addExpr(ExprKind.BooleanLiteral, sizeof(BooleanLiteral));
#endif
    return e;
}

public func bool BooleanLiteral.getValue(const BooleanLiteral* e) @(inline) {
    return e.parent.parent.booleanLiteralBits.value;
}

func void BooleanLiteral.print(const BooleanLiteral* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.add1(' ');
    out.color(col_Value);
    out.add(e.parent.parent.booleanLiteralBits.value ? "true" : "false");
    out.add1('\n');
}

func void BooleanLiteral.printLiteral(const BooleanLiteral* e, string_buffer.Buf* out) {
    out.add(e.parent.parent.booleanLiteralBits.value ? "true" : "false");
}


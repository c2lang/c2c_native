/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

public type BuiltinExprBits struct {
    u32 : NumExprBits;
    u32 kind : 3;
}

public type BuiltinExprKind enum u8 {
    Sizeof,
    Elemsof,
    EnumMin,
    EnumMax,
    OffsetOf,
    ToContainer,
}

// Keep in sync
const char*[] builtin_names = {
    "sizeof",
    "elemsof",
    "enum_min",
    "enum_max",
    "offsetof",
    "to_container",
}

static_assert(elemsof(BuiltinExprKind), elemsof(builtin_names));

public type ToContainerData struct {
    Expr* member;
    Expr* pointer;
}

public type OffsetOfData struct {
    Expr* member;
}

public type BuiltinExpr struct {
    Expr parent;
    Expr* inner;
    usize value;

    OffsetOfData[0] offset;
    ToContainerData[0] container;
} @(opaque)

public func BuiltinExpr* BuiltinExpr.create(ast_context.Context* c, SrcLoc loc, Expr* inner, BuiltinExprKind kind) @(inline) {
    BuiltinExpr* e = c.alloc(sizeof(BuiltinExpr));
    e.parent.init(ExprKind.Builtin, loc, 1, 1, 0);
    e.parent.parent.builtinExprBits.kind = kind;
    e.inner = inner;
    e.value = 0;
    return e;
}

public func BuiltinExpr* BuiltinExpr.createOffsetOf(ast_context.Context* c, SrcLoc loc, Expr* typeExpr, Expr* member) @(inline) {
    BuiltinExpr* e = c.alloc(sizeof(BuiltinExpr) + sizeof(OffsetOfData));
    e.parent.init(ExprKind.Builtin, loc, 1, 1, 0);
    e.parent.parent.builtinExprBits.kind = BuiltinExprKind.OffsetOf;
    e.inner = typeExpr;
    e.offset[0].member = member;
    return e;
}

public func BuiltinExpr* BuiltinExpr.createToContainer(ast_context.Context* c, SrcLoc loc, Expr* typeExpr, Expr* member, Expr* pointer) @(inline) {
    BuiltinExpr* e = c.alloc(sizeof(BuiltinExpr) + sizeof(ToContainerData));
    e.parent.init(ExprKind.Builtin, loc, 1, 1, 0);
    e.parent.parent.builtinExprBits.kind = BuiltinExprKind.ToContainer;
    e.inner = typeExpr;
    e.container[0].member = member;
    e.container[0].pointer = pointer;
    return e;
}

public func BuiltinExprKind BuiltinExpr.getKind(const BuiltinExpr* e) {
    return cast<BuiltinExprKind>(e.parent.parent.builtinExprBits.kind);
}

public func usize BuiltinExpr.getValue(const BuiltinExpr* e) { return e.value; }
public func void BuiltinExpr.setValue(BuiltinExpr* e, usize value ) {
    e.value = value;
}

public func Expr* BuiltinExpr.getInner(const BuiltinExpr* e) { return e.inner; }


func void BuiltinExpr.print(const BuiltinExpr* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent, "BuiltinExpr");
    e.parent.printTypeBits(out);
    out.color(col_Attr);
    out.print(" %s", builtin_names[e.getKind()]);
    out.color(col_Value);
    out.print(" %u", e.value);
    out.add("\n");

    switch (e.getKind()) {
    case BuiltinExprKind.Sizeof:
        break;
    case BuiltinExprKind.Elemsof:
        break;
    case BuiltinExprKind.EnumMin:
        break;
    case BuiltinExprKind.EnumMax:
        break;
    case BuiltinExprKind.OffsetOf:
        e.offset[0].member.print(out, indent + 2);
        break;
    case BuiltinExprKind.ToContainer:
        e.container[0].member.print(out, indent + 2);
        e.container[0].pointer.print(out, indent + 2);
        break;
    }
}

func void BuiltinExpr.printLiteral(const BuiltinExpr* e, string_buffer.Buf* out) {
    out.add(builtin_names[e.getKind()]);
    out.add("(");
    out.add(")");
    switch (e.getKind()) {
    case BuiltinExprKind.Sizeof:
        break;
    case BuiltinExprKind.Elemsof:
        break;
    case BuiltinExprKind.EnumMin:
        break;
    case BuiltinExprKind.EnumMax:
        break;
    case BuiltinExprKind.OffsetOf:
        // TODO
        //e.offset[0].member.print(out, indent + 2);
        break;
    case BuiltinExprKind.ToContainer:
        // TODO
        //e.container[0].member.print(out, indent + 2);
        //e.container[0].pointer.print(out, indent + 2);
        break;
    }
}


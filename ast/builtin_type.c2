/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;

public type BuiltinTypeKind enum u8 {
    Int8,
    Int16,
    Int32,
    Int64,
    UInt8,
    UInt16,
    UInt32,
    UInt64,
    Float32,
    Float64,
    Bool,
    Void,
}

const char*[] builtinType_names = {
    "i8",
    "i16",
    "i32",
    "i64",
    "u8",
    "u16",
    "u32",
    "u64",
    "f32",
    "f64",
    "bool",
    "void",
}

static_assert(elemsof(BuiltinTypeKind), elemsof(builtinType_names));

const bool[] BuiltinType_promotable = {
    true,
    true,
    false,
    false,
    true,
    true,
    false,
    false,
    false,
    false,
    true,
    false,
}

static_assert(elemsof(BuiltinTypeKind), elemsof(BuiltinType_promotable));

const u32[] BuiltinType_sizes = {
    1, 2, 4, 8, // IntX
    1, 2, 4, 8, // UIntX
    4, 8,       // FloatX
    1,          // Bool
    0,          // Void
}

static_assert(elemsof(BuiltinTypeKind), elemsof(BuiltinType_sizes));

public type BuiltinTypeBits struct {
    u32 : NumTypeBits;
    u32 kind : 4;
}

public type BuiltinType struct {
    Type parent;
} @(opaque)

public func BuiltinType* BuiltinType.create(ast_context.Context* c, BuiltinTypeKind kind) @(inline) {
    BuiltinType* b = c.alloc(sizeof(BuiltinType));
    b.parent.init(TypeKind.Builtin);
    b.parent.builtinTypeBits.kind = kind;
    b.parent.setCanonicalType(QualType.init2(&b.parent));
#if AstStatistics
    Stats.addType(TypeKind.Builtin, sizeof(BuiltinType));
#endif
    return b;
}

// TEMP cast needed until Analyser fixed
public func BuiltinTypeKind BuiltinType.getKind(const BuiltinType* b) @(inline) {
    return cast<BuiltinTypeKind>(b.parent.builtinTypeBits.kind);
}

// TODO convert to enum function
func const char* BuiltinType.kind2str(const BuiltinType* b) {
    switch (b.getKind()) {
    case Int8:      return "i8";
    case Int16:     return "i16";
    case Int32:     return "i32";
    case Int64:     return "i64";
    case UInt8:     return "u8";
    case UInt16:    return "u16";
    case UInt32:    return "u32";
    case UInt64:    return "u64";
    case Float32:   return "f32";
    case Float64:   return "f64";
    case Bool:      return "bool";
    case Void:      return "void";
    }
    return "?";
}

public func bool BuiltinType.isPromotableIntegerType(const BuiltinType* b) {
    return BuiltinType_promotable[b.getKind()];
}

public func u32 BuiltinType.getAlignment(const BuiltinType* b) {
    return BuiltinType_sizes[b.getKind()];
}

func void BuiltinType.print(const BuiltinType* b, string_buffer.Buf* out) {
    out.add(builtinType_names[b.getKind()]);
}

func void BuiltinType.debugPrint(const BuiltinType* b, string_buffer.Buf* out) {
    out.add(builtinType_names[b.getKind()]);
}

public func void BuiltinType.fullPrint(const BuiltinType* t, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.print("BuiltinType [%p] %s\n", t, t.kind2str());
}

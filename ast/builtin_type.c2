/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;

// Note: dont change positions, since they are used to check interval
public type BuiltinKind enum u8 {
    Char,
    Int8,
    Int16,
    Int32,
    Int64,
    UInt8,
    UInt16,
    UInt32,
    UInt64,
    Float32,
    Float64,
    ISize,
    USize,
    Bool,
    Void,
}

const char*[] builtinType_names = {
    "char",
    "i8",
    "i16",
    "i32",
    "i64",
    "u8",
    "u16",
    "u32",
    "u64",
    "f32",
    "f64",
    "isize",
    "usize",
    "bool",
    "void",
}

static_assert(elemsof(BuiltinKind), elemsof(builtinType_names));

const bool[] BuiltinType_promotable = {
    true,
    true,
    true,
    false,
    false,
    true,
    true,
    false,
    false,
    false,
    false,
    false,
    false,
    true,
    false,
}

static_assert(elemsof(BuiltinKind), elemsof(BuiltinType_promotable));

const bool[] BuiltinType_signed = {
    true,
    true,
    true,
    true,
    true,
    false,
    false,
    false,
    false,
    true,
    true,
    true,
    false,
    false,
    false,
}

static_assert(elemsof(BuiltinKind), elemsof(BuiltinType_signed));

public fn bool builtinKind2Signed(BuiltinKind kind) {
    return BuiltinType_signed[kind];
}

const bool[] BuiltinType_unsigned = {
    false,
    false,
    false,
    false,
    false,
    true,
    true,
    true,
    true,
    false,
    false,
    false,
    true,
    false,
    false,
}

static_assert(elemsof(BuiltinKind), elemsof(BuiltinType_unsigned));

const bool[] BuiltinType_integer = {
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    false,
    false,
    true,
    true,
    false,
    false,
}

static_assert(elemsof(BuiltinKind), elemsof(BuiltinType_integer));

const u32[] BuiltinType_default_sizes = {
    1,          // Char
    1, 2, 4, 8, // IntX
    1, 2, 4, 8, // UIntX
    4, 8,       // FloatX
    8, 8,       // Isize/Usize <- need to change for ARCH
    1,          // Bool
    0,          // Void
}
static_assert(elemsof(BuiltinKind), elemsof(BuiltinType_default_sizes));

const u32[] BuiltinType_default_widths = {
    7,             // Char
    7, 15, 31, 63, // IntX
    8, 16, 32, 64, // UIntX
    0, 0,          // FloatX
    63, 64,        // Isize/Usize <- need to change for ARCH
    1,             // Bool
    0,             // Void
}
static_assert(elemsof(BuiltinKind), elemsof(BuiltinType_default_widths));

public type BuiltinTypeBits struct {
    u32 : NumTypeBits;
    u32 kind : 4;
}

public type BuiltinType struct @(opaque) {
    Type parent;
}

public fn BuiltinType* BuiltinType.create(ast_context.Context* c, BuiltinKind kind) {
    BuiltinType* b = c.alloc(sizeof(BuiltinType));
    b.parent.init(TypeKind.Builtin);
    b.parent.builtinTypeBits.kind = kind;
    b.parent.setCanonicalType(QualType.init(&b.parent));
#if AstStatistics
    Stats.addType(TypeKind.Builtin, sizeof(BuiltinType));
#endif
    return b;
}

public fn BuiltinKind BuiltinType.getKind(const BuiltinType* b) {
    return cast<BuiltinKind>(b.parent.builtinTypeBits.kind);
}

// converts ISize/USize to Int64/UInt64 or Int32/UInt32 depending on arch
public fn BuiltinKind BuiltinType.getBaseKind(const BuiltinType* b) {
    return globals.builtinType_baseTypes[b.getKind()];
}

public fn bool BuiltinType.isChar(const BuiltinType* b) {
    return b.parent.builtinTypeBits.kind == BuiltinKind.Char;
}

public fn bool BuiltinType.isInt8(const BuiltinType* b) {
    return b.parent.builtinTypeBits.kind == BuiltinKind.Int8;
}

public fn bool BuiltinType.isUInt8(const BuiltinType* b) {
    return b.parent.builtinTypeBits.kind == BuiltinKind.UInt8;
}

public fn bool BuiltinType.isInt32(const BuiltinType* b) {
    return b.parent.builtinTypeBits.kind == BuiltinKind.Int32;
}

/*
public fn bool BuiltinType.isBool(const BuiltinType* b) {
    return b.parent.builtinTypeBits.kind == BuiltinKind.Bool;
}
*/

public fn bool BuiltinType.isVoid(const BuiltinType* b) {
    return b.parent.builtinTypeBits.kind == BuiltinKind.Void;
}

fn const char* BuiltinType.kind2str(const BuiltinType* b) {
    return builtinType_names[b.getKind()];
}

public fn bool BuiltinType.isPromotableIntegerType(const BuiltinType* b) {
    return BuiltinType_promotable[b.getKind()];
}

public fn bool BuiltinType.isInteger(const BuiltinType* b) {
    return BuiltinType_integer[b.getKind()];
}

public fn bool BuiltinType.isIntegerOrBool(const BuiltinType* b) {
    return b.isInteger() || b.getKind() == BuiltinKind.Bool;
}

public fn bool BuiltinType.isFloatingPoint(const BuiltinType* b) {
    return (b.getKind() == BuiltinKind.Float32 || b.getKind() == BuiltinKind.Float64);
}

public fn bool BuiltinType.isSigned(const BuiltinType* b) {
    return BuiltinType_signed[b.getKind()];
}

public fn bool BuiltinType.isUnsigned(const BuiltinType* b) {
    return BuiltinType_unsigned[b.getKind()];
}

public fn u32 BuiltinType.getAlignment(const BuiltinType* b) {
    return globals.builtinType_sizes[b.getKind()];
}

public fn u32 BuiltinType.getWidth(const BuiltinType* b) {
    return globals.builtinType_width[b.getKind()];
}

fn void BuiltinType.print(const BuiltinType* b, string_buffer.Buf* out) {
    out.add(builtinType_names[b.getKind()]);
}

public fn void BuiltinType.fullPrint(const BuiltinType* t, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.print("BuiltinType [%p] %s\n", t, t.kind2str());
}

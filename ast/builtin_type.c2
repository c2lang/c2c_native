/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

public type BuiltinTypeKind enum u8 {
    Int8,
    Int16,
    Int32,
    Int64,
    UInt8,
    UInt16,
    UInt32,
    UInt64,
    Float32,
    Float64,
    Bool,
    Void,
}

const char*[] builtinType_names = {
    "i8",
    "i16",
    "i32",
    "i64",
    "u8",
    "u16",
    "u32",
    "u64",
    "f32",
    "f64",
    "bool",
    "void",
}


static_assert(elemsof(BuiltinTypeKind), elemsof(builtinType_names));

public type BuiltinTypeBits struct {
    u32 : NumTypeBits;
    u32 kind : 4;
}

public type BuiltinType struct {
    Type parent;
} @(opaque)

public func BuiltinType* BuiltinType.create(ast_context.Context* c, BuiltinTypeKind kind) @(inline) {
    BuiltinType* b = c.alloc(sizeof(BuiltinType));
    b.parent.init(TypeKind.Builtin);
    b.parent.builtinTypeBits.kind = kind;
    b.parent.setCanonicalType(QualType.init2(&b.parent));
    return b;
}

// TEMP cast needed until Analyser fixed
public func BuiltinTypeKind BuiltinType.getKind(const BuiltinType* b) @(inline) {
    return cast<BuiltinTypeKind>(b.parent.builtinTypeBits.kind);
}

func void BuiltinType.print(const BuiltinType* b, string_buffer.Buf* out) {
    out.add(builtinType_names[b.getKind()]);
}

func void BuiltinType.debugPrint(const BuiltinType* b, string_buffer.Buf* out) {
    out.add(builtinType_names[b.getKind()]);
}

// TODO convert to enum function
func const char* BuiltinType.kind2str(const BuiltinType* b) {
    switch (b.getKind()) {
    case BuiltinTypeKind.Int8:      return "i8";
    case BuiltinTypeKind.Int16:     return "i16";
    case BuiltinTypeKind.Int32:     return "i32";
    case BuiltinTypeKind.Int64:     return "i64";
    case BuiltinTypeKind.UInt8:     return "u8";
    case BuiltinTypeKind.UInt16:    return "u16";
    case BuiltinTypeKind.UInt32:    return "u32";
    case BuiltinTypeKind.UInt64:    return "u64";
    case BuiltinTypeKind.Float32:   return "f32";
    case BuiltinTypeKind.Float64:   return "f64";
    case BuiltinTypeKind.Bool:      return "bool";
    case BuiltinTypeKind.Void:      return "void";
    }
    return "?";
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;
import string;

public type CallExprBits struct {
    u32 : NumExprBits;
    u32 num_args : 5;
}

public type CallExpr struct {
    Expr parent;
    Expr* fn;
    Expr*[0] args; // tail-allocated
} @(opaque)

public func CallExpr* CallExpr.create(ast_context.Context* c, Expr* fn, Expr** args, u32 num_args) @(inline) {
    // TODO check max args
    u32 size = sizeof(CallExpr) + num_args * sizeof(Expr*);
    CallExpr* e = c.alloc(size);
    e.parent.init(ExprKind.Call, fn.getLoc(), 0, 0, 0);
    e.parent.parent.callExprBits.num_args = num_args;
    e.fn = fn;
    string.memcpy(cast<void*>(e.args), cast<void*>(args), num_args * sizeof(Expr*));
    return e;
}

public func u32 CallExpr.getNumArgs(const CallExpr* e) @(inline) {
    return e.parent.parent.callExprBits.num_args;
}

func void CallExpr.print(const CallExpr* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent, "CallExpr");
    e.parent.printTypeBits(out);
    out.color(col_Value);
    out.add(" ");
    // fn->printLiteral(out);
    out.add("\n");
    //e.fn.print(out, indent + 2);
    for (u32 i=0; i<e.getNumArgs(); i++) {
        e.args[i].print(out, indent + 2);
    }
}


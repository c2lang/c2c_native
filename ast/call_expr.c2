/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import src_loc local;
import string_buffer;
import string;

public type CallExprBits struct {
    u32 : NumExprBits;
    u32 calls_struct_func : 1;
}

public type CallExpr struct {
    Expr parent;
    SrcLoc endLoc;
    u8 num_args;
    // Note: 2 bytes padding here
    Expr* fn;
    Expr*[0] args; // tail-allocated
} @(opaque)

public func CallExpr* CallExpr.create(ast_context.Context* c, SrcLoc endLoc, Expr* fn, Expr** args, u32 num_args) @(inline) {
    u32 size = sizeof(CallExpr) + num_args * sizeof(Expr*);
    CallExpr* e = c.alloc(size);
    e.parent.init(ExprKind.Call, fn.getLoc(), 0, 0, 1, ValType.RValue);
    e.endLoc = endLoc;
    e.num_args = cast<u8>(num_args);
    e.fn = fn;
    string.memcpy(cast<void*>(e.args), cast<void*>(args), num_args * sizeof(Expr*));
#if AstStatistics
    Stats.addExpr(ExprKind.Call, size);
#endif
    return e;
}

public func void CallExpr.setCallsStructFunc(CallExpr* e) {
    e.parent.parent.callExprBits.calls_struct_func = 1;
}

public func SrcLoc CallExpr.getEndLoc(const CallExpr* e) @(inline) { return e.endLoc; }

public func Expr* CallExpr.getFunc(const CallExpr* e) @(inline) { return e.fn; }

public func Expr** CallExpr.getFunc2(CallExpr* e) @(inline) { return &e.fn; }

public func u32 CallExpr.getNumArgs(const CallExpr* e) @(inline) {
    return e.num_args;
}

public func Expr** CallExpr.getArgs(CallExpr* e) {
    return e.args;
}

func void CallExpr.print(const CallExpr* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    if (e.parent.parent.callExprBits.calls_struct_func) out.add(" SF");
    out.add1('\n');
    e.fn.print(out, indent + 1);
    for (u32 i=0; i<e.getNumArgs(); i++) {
        e.args[i].print(out, indent + 1);
    }
}


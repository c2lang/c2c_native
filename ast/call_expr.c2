/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import src_loc local;
import string_buffer;
import string;

public type CallExprBits struct {
    u32 : NumExprBits;
    u32 calls_struct_func : 1;
    u32 calls_static_sf : 1;
    u32 is_template_call : 1;
}

public type CallExpr struct {
    Expr parent;
    SrcLoc endLoc;
    u16 template_idx;   // instance number
    u8 num_args;
    // Note: 1 byte padding here
    Expr* fn;
    Expr*[0] args; // tail-allocated
    //TypeRef template_arg; // tail-allocated, variable size
    // TODO store Type
} @(opaque)

public func CallExpr* CallExpr.create(ast_context.Context* c,
                                      SrcLoc endLoc,
                                      Expr* fn,
                                      Expr** args,
                                      u32 num_args) @(inline)
{
    u32 size = sizeof(CallExpr) + num_args * sizeof(Expr*);
    CallExpr* e = c.alloc(size);
    e.parent.init(ExprKind.Call, fn.getLoc(), 0, 0, 1, ValType.RValue);
    e.endLoc = endLoc;
    e.template_idx = 0;
    e.num_args = cast<u8>(num_args);
    e.fn = fn;
    string.memcpy(cast<void*>(e.args), cast<void*>(args), num_args * sizeof(Expr*));
#if AstStatistics
    Stats.addExpr(ExprKind.Call, size);
#endif
    return e;
}
public func CallExpr* CallExpr.createTemplate(ast_context.Context* c,
                                              SrcLoc endLoc,
                                              Expr* fn,
                                              Expr** args,
                                              u32 num_args,
                                              const TypeRefHolder* ref) @(inline)
{
    u32 size = sizeof(CallExpr) + num_args * sizeof(Expr*);
    size += sizeof(TypeRef) + ref.getExtraSize();
    CallExpr* e = c.alloc(size);
    e.parent.init(ExprKind.Call, fn.getLoc(), 0, 0, 1, ValType.RValue);
    e.parent.parent.callExprBits.is_template_call = 1;
    e.endLoc = endLoc;
    e.template_idx = 0;
    e.num_args = cast<u8>(num_args);
    e.fn = fn;
    string.memcpy(cast<void*>(e.args), cast<void*>(args), num_args * sizeof(Expr*));
    TypeRef* destRef = cast<TypeRef*>(&e.args[num_args]);
    ref.fill(destRef);
#if AstStatistics
    Stats.addExpr(ExprKind.Call, size);
#endif
    return e;
}

func Expr* CallExpr.instantiate(CallExpr* e, Instantiator* inst) {
    assert(!e.isTemplateCall());
    u32 size = sizeof(CallExpr) + e.num_args * sizeof(Expr*);
    CallExpr* e2 = inst.c.alloc(size);
    e2.parent = e.parent;
    e2.endLoc = e.endLoc;
    e2.num_args = e.num_args;
    e2.fn = e.fn.instantiate(inst);
    for (u32 i=0; i<e.num_args; i++) {
        e2.args[i] = e.args[i].instantiate(inst);
    }
#if AstStatistics
    Stats.addExpr(ExprKind.Call, size);
#endif
    return cast<Expr*>(e2);
}

public func void CallExpr.setCallsStructFunc(CallExpr* e) {
    e.parent.parent.callExprBits.calls_struct_func = 1;
}

public func bool CallExpr.isStructFunc(const CallExpr* e) {
    return e.parent.parent.callExprBits.calls_struct_func;
}

public func void CallExpr.setCallsStaticStructFunc(CallExpr* e) {
    e.parent.parent.callExprBits.calls_static_sf = 1;
}

public func bool CallExpr.isStaticStructFunc(const CallExpr* e) {
    return e.parent.parent.callExprBits.calls_static_sf;
}

public func bool CallExpr.isTemplateCall(const CallExpr* e) {
    return e.parent.parent.callExprBits.is_template_call;
}

public func TypeRef* CallExpr.getTemplateArg(const CallExpr* e) {
    if (e.isTemplateCall()) return cast<TypeRef*>(&e.args[e.num_args]);
    return nil;
}

public func void CallExpr.setTemplateIdx(CallExpr* e, u32 idx) {
    e.template_idx = cast<u16>(idx);
}

public func u32 CallExpr.getTemplateIdx(const CallExpr* e) {
    return e.template_idx;
}

public func SrcLoc CallExpr.getEndLoc(const CallExpr* e) @(inline) { return e.endLoc; }

public func Expr* CallExpr.getFunc(const CallExpr* e) @(inline) { return e.fn; }

public func Expr** CallExpr.getFunc2(CallExpr* e) @(inline) { return &e.fn; }

public func u32 CallExpr.getNumArgs(const CallExpr* e) @(inline) {
    return e.num_args;
}

public func Expr** CallExpr.getArgs(CallExpr* e) {
    return e.args;
}

func void CallExpr.print(const CallExpr* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    if (e.parent.parent.callExprBits.calls_struct_func) out.add(" SF");
    if (e.parent.parent.callExprBits.calls_static_sf) out.add(" SSF");
    out.newline();
    if (e.parent.parent.callExprBits.is_template_call) {
        out.indent(indent + 1);
        out.color(col_Template);
        out.add("template ");
        TypeRef* ref = cast<TypeRef*>(&e.args[e.num_args]);
        ref.print(out, true);
        out.newline();
    }
    e.fn.print(out, indent + 1);
    for (u32 i=0; i<e.getNumArgs(); i++) {
        e.args[i].print(out, indent + 1);
    }
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

import string;

type CaseStmtBits struct {
    u32 : NumStmtBits;
    u32 num_stmts : 10;
}

public type CaseStmt struct {
    Stmt parent;
    SrcLoc loc;
    Expr* cond;
    Stmt*[0] parents; // tail-allocated
} @(opaque)

public func CaseStmt* CaseStmt.create(ast_context.Context* c, SrcLoc loc, Expr* cond, Stmt** parents, u32 numStmts) @(inline) {
    u32 size = sizeof(CaseStmt) + numStmts * sizeof(Stmt*);
    CaseStmt* s = c.alloc(size);
    s.parent.init(StmtKind.Case);
    s.parent.caseStmtBits.num_stmts = numStmts;
    s.cond = cond;
    string.memcpy(cast<void*>(s.parents), cast<void*>(parents), numStmts * sizeof(Stmt*));
    return s;
}

public func void CaseStmt.print(const CaseStmt* s, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.color(col_Stmt);
    out.add("CaseStmt\n");
    s.cond.print(out, indent + 2);
    for (u32 i=0; i<s.parent.caseStmtBits.num_stmts; i++) {
        s.parents[i].print(out, indent + 2);
    }
}


/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;

import string;

type CaseStmtBits struct {
    u32 : NumStmtBits;
    u32 num_stmts : 15;
    u32 has_decls : 1;
}

public type CaseStmt struct {
    Stmt parent;
    SrcLoc loc;
    Expr* cond;
    Stmt*[0] stmts; // tail-allocated
} @(opaque)

public func CaseStmt* CaseStmt.create(ast_context.Context* c,
                                      SrcLoc loc,
                                      Expr* cond,
                                      Stmt** stmts,
                                      u32 numStmts) @(inline)
{
    u32 size = sizeof(CaseStmt) + numStmts * sizeof(Stmt*);
    CaseStmt* s = c.alloc(size);
    s.parent.init(StmtKind.Case);
    s.parent.caseStmtBits.num_stmts = numStmts;
    s.loc = loc;
    s.cond = cond;
    string.memcpy(cast<void*>(s.stmts), cast<void*>(stmts), numStmts * sizeof(Stmt*));
#if AstStatistics
    Stats.addStmt(StmtKind.Case, size);
#endif
    return s;
}

func Stmt* CaseStmt.instantiate(CaseStmt* s, Instantiator* inst) {
    u32 numStmts = s.getNumStmts();
    u32 size = sizeof(CaseStmt) + numStmts * sizeof(Stmt*);
    CaseStmt* s2 = inst.c.alloc(size);
    s2.parent = s.parent;
    s2.loc = s.loc;
    s2.cond = s.cond.instantiate(inst);
    for (u32 i=0; i<numStmts; i++) {
        s2.stmts[i] = s.stmts[i].instantiate(inst);
    }
#if AstStatistics
    Stats.addStmt(StmtKind.Case, size);
#endif
    return cast<Stmt*>(s);
}

public func u32 CaseStmt.getNumStmts(const CaseStmt* s) {
    return s.parent.caseStmtBits.num_stmts;
}

public func Stmt** CaseStmt.getStmts(CaseStmt* s) {
    return s.stmts;
}

public func SrcLoc CaseStmt.getLoc(const CaseStmt* s) { return s.loc; }

public func Expr* CaseStmt.getCond(const CaseStmt* s) { return s.cond; }

public func Expr** CaseStmt.getCond2(CaseStmt* s) { return &s.cond; }

public func void CaseStmt.setHasDecls(CaseStmt* s) {
    s.parent.caseStmtBits.has_decls = 1;
}

public func bool CaseStmt.hasDecls(const CaseStmt* s) {
    return s.parent.caseStmtBits.has_decls;
}

func void CaseStmt.print(const CaseStmt* s, string_buffer.Buf* out, u32 indent) {
    s.parent.printKind(out, indent);
    if (s.parent.caseStmtBits.has_decls) {
        out.color(col_Attr);
        out.add(" decls");
    }
    out.add1('\n');
    s.cond.print(out, indent + 1);
    for (u32 i=0; i<s.parent.caseStmtBits.num_stmts; i++) {
        s.stmts[i].print(out, indent + 1);
    }
}


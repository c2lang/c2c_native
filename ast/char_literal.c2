/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

public type CharLiteralBits struct {
    u32 : NumExprBits;
    u32 value : 8;
}

public type CharLiteral struct {
    Expr parent;
} @(opaque)

public func CharLiteral* CharLiteral.create(ast_context.Context* c, SrcLoc loc, u8 val) @(inline) {
    CharLiteral* e = c.alloc(sizeof(CharLiteral));
    e.parent.init(ExprKind.CharLiteral, loc, 1, 1, 0);
    e.parent.parent.charLiteralBits.value = val;
    return e;
}

func void CharLiteral.print(const CharLiteral* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent, "CharLiteral");
    e.parent.printTypeBits(out);
    out.add(" ");
    out.color(col_Value);
    e.printLiteral(out);
    out.add("\n");
}

func void CharLiteral.printLiteral(const CharLiteral* e, string_buffer.Buf* out) {
    char c = cast<char>(e.parent.parent.charLiteralBits.value);

    switch (c) {
    case '\n':
        out.add("'\\n'");
        break;
    case '\r':
        out.add("'\\r'");
        break;
    case '\t':
        out.add("'\\t'");
        break;
    case '\'':
        out.add("'\\''");
        break;
    case '\\':
        out.add("'\\'");
        break;
    default:
        out.print("'%c'", c);
        break;
    }
}


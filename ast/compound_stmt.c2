/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;

import string;

type CompoundStmtBits struct {
    u32 : NumStmtBits;
    u32 count : 32 - NumStmtBits;
}

public type CompoundStmt struct {
    Stmt parent;
    Stmt*[0] stmts; // tail-allocated
} @(opaque)

public func CompoundStmt* CompoundStmt.create(ast_context.Context* c, Stmt** stmts, u32 count) @(inline) {
    assert(count < 65556);
    u32 size = sizeof(CompoundStmt) + count * sizeof(Stmt*);

    CompoundStmt* s = c.alloc(size);
    s.parent.init(StmtKind.Compound);
    s.parent.compoundStmtBits.count = count;

    if (count) {
        string.memcpy(cast<void*>(s.stmts), cast<void*>(stmts), count * sizeof(Stmt*));
    }
#if AstStatistics
    Stats.addStmt(StmtKind.Compound, size);
#endif
    return s;
}

public func u32 CompoundStmt.getCount(const CompoundStmt* s) {
    return s.parent.compoundStmtBits.count;
}

public func Stmt** CompoundStmt.getStmts(CompoundStmt* s) {
    if (s.getCount()) return s.stmts;
    return nil;
}

func void CompoundStmt.print(const CompoundStmt* s, string_buffer.Buf* out, u32 indent) {
    s.parent.printKind(out, indent);
    out.add("\n");
    const u32 count = s.parent.compoundStmtBits.count;
    for (u32 i=0; i<count; i++) {
        s.stmts[i].print(out, indent + 2);
    }
}



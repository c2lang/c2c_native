/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import src_loc local;

public type ConditionalOperator struct {
    Expr parent;
    SrcLoc colonLoc;
    Expr* cond;
    Expr* lhs;
    Expr* rhs;
} @(opaque)

public func ConditionalOperator* ConditionalOperator.create(ast_context.Context* c,
                                                            SrcLoc questionLoc,
                                                            SrcLoc colonLoc,
                                                            Expr* cond,
                                                            Expr* lhs,
                                                            Expr* rhs) @(inline)
{
    ConditionalOperator* e = c.alloc(sizeof(ConditionalOperator));
    e.parent.init(ExprKind.ConditionalOperator, questionLoc, 0, 1, 1, ValType.RValue);
    e.colonLoc = colonLoc;
    e.cond = cond;
    e.lhs = lhs;
    e.rhs = rhs;
#if AstStatistics
    Stats.addExpr(ExprKind.ConditionalOperator, sizeof(ConditionalOperator));
#endif
    return e;
}

public func Expr* ConditionalOperator.getCond(const ConditionalOperator* e) {
    return e.cond;
}

public func Expr** ConditionalOperator.getCond2(ConditionalOperator* e) {
    return &e.cond;
}

public func Expr* ConditionalOperator.getLHS(const ConditionalOperator* e) {
    return e.lhs;
}

public func Expr** ConditionalOperator.getLHS2(ConditionalOperator* e) {
    return &e.lhs;
}

public func Expr* ConditionalOperator.getRHS(const ConditionalOperator* e) {
    return e.rhs;
}

public func Expr** ConditionalOperator.getRHS2(ConditionalOperator* e) {
    return &e.rhs;
}

func void ConditionalOperator.print(const ConditionalOperator* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.add1('\n');
    e.cond.print(out, indent + 1);
    e.lhs.print(out, indent + 1);
    e.rhs.print(out, indent + 1);
}


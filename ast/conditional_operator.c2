/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;

public type ConditionalOperator struct {
    Expr parent;
    SrcLoc colonLoc;
    Expr* cond;
    Expr* lhs;
    Expr* rhs;
} @(opaque)

public func ConditionalOperator* ConditionalOperator.create(ast_context.Context* c,
                                                            SrcLoc questionLoc,
                                                            SrcLoc colonLoc,
                                                            Expr* cond,
                                                            Expr* lhs,
                                                            Expr* rhs) @(inline)
{
    ConditionalOperator* e = c.alloc(sizeof(ConditionalOperator));
    e.parent.init(ExprKind.ConditionalOperator, questionLoc, 0, 1, 1, ValType.RValue);
    e.colonLoc = colonLoc;
    e.cond = cond;
    e.lhs = lhs;
    e.rhs = rhs;
#if AstStatistics
    Stats.addExpr(ExprKind.ConditionalOperator, sizeof(ConditionalOperator));
#endif
    return e;
}

func Expr* ConditionalOperator.instantiate(ConditionalOperator* e, Instantiator* inst) {
    ConditionalOperator* o = ConditionalOperator.create(inst.c,
                                                        e.parent.loc,
                                                        e.colonLoc,
                                                        e.cond.instantiate(inst),
                                                        e.lhs.instantiate(inst),
                                                        e.rhs.instantiate(inst));
    return cast<Expr*>(o);
}

public func Expr* ConditionalOperator.getCond(const ConditionalOperator* e) {
    return e.cond;
}

public func Expr** ConditionalOperator.getCond2(ConditionalOperator* e) {
    return &e.cond;
}

public func Expr* ConditionalOperator.getLHS(const ConditionalOperator* e) {
    return e.lhs;
}

public func Expr** ConditionalOperator.getLHS2(ConditionalOperator* e) {
    return &e.lhs;
}

public func Expr* ConditionalOperator.getRHS(const ConditionalOperator* e) {
    return e.rhs;
}

public func Expr** ConditionalOperator.getRHS2(ConditionalOperator* e) {
    return &e.rhs;
}

func void ConditionalOperator.printLiteral(const ConditionalOperator* e, string_buffer.Buf* out) {
    e.cond.printLiteral(out);
    out.add(" ? ");
    e.lhs.printLiteral(out);
    out.add(" : ");
    e.rhs.printLiteral(out);
}

func void ConditionalOperator.print(const ConditionalOperator* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.newline();
    e.cond.print(out, indent + 1);
    e.lhs.print(out, indent + 1);
    e.rhs.print(out, indent + 1);
}


/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import src_loc local;
import attr;
import utils;
import string_buffer;
import stdio;

// TODO better order
public type DeclKind enum u8 {
    Function,
    Import,
    StructType,
    EnumType,
    EnumConstant,
    FunctionType,
    AliasType,
    Var,
    StaticAssert,
}

public type DeclCheckState enum u8 {
    Unchecked,
    InProgress,
    Checked,
}

const char*[] declCheckState_names = {
    "unchecked",
    "in-progress",
    "checked",
}

static_assert(elemsof(DeclCheckState), elemsof(declCheckState_names));

const char*[] declKind_names = {
    "FunctionDecl",
    "ImportDecl",
    "StructTypeDecl",
    "EnumTypeDecl",
    "EnumConstantDecl",
    "FunctionType",
    "AliasTypeDecl",
    "VarDecl",
    "StaticAssert",
}

static_assert(elemsof(DeclKind), elemsof(declKind_names));

public type DeclBits struct {
    u32 kind : 8;
    u32 check_state : 2;
    u32 is_public : 1;
    u32 is_used : 1;
    u32 is_used_public : 1;
    u32 has_attr : 1;   // external attributes, not those saved in Decls itself (like attr_packed)
    u32 attr_export : 1;    // dont generate as static
    u32 attr_unused : 1;
    u32 is_external : 1;    // in external lib
    u32 is_generated : 1;   // for globals, can be used by generators
}

public const u32 NumDeclBits = 18;  // should match bitfields above

public type Decl struct {
    union {
        DeclBits declBits;
        ImportDeclBits importDeclBits;
        FunctionDeclBits functionDeclBits;
        StructTypeDeclBits structTypeDeclBits;
        EnumTypeDeclBits enumTypeDeclBits;
        EnumConstantDeclBits enumConstantDeclBits;
        VarDeclBits varDeclBits;
        u32 bits;
    }
    SrcLoc loc;
    u32 name_idx;   // into g_names_start, 0 means nil
    u32 ast_idx;    // into g_ast_start, 0 means nil
    QualType qt;
} @(opaque)

func void Decl.init(Decl* d, DeclKind k, u32 name_idx, SrcLoc loc, bool is_public, QualType qt, u32 ast_idx) @(inline) {
    d.bits = 0;
    d.declBits.kind = k;
    d.declBits.is_public = is_public;

    d.loc = loc;
    d.name_idx = name_idx;
    d.ast_idx = ast_idx;
    d.qt = qt;
}

// TEMP cast needed until Analyser fixed
public func DeclKind Decl.getKind(const Decl* d) @(inline) { return cast<DeclKind>(d.declBits.kind); }

public func DeclCheckState Decl.getCheckState(const Decl* d) @(inline) { return cast<DeclCheckState>(d.declBits.check_state); }
public func void Decl.setCheckState(Decl* d, DeclCheckState s) @(inline) { d.declBits.check_state = s; }
public func bool Decl.isChecked(const Decl* d) @(inline) { return d.declBits.check_state == DeclCheckState.Checked; }
//public func bool Decl.checkInProgress(const Decl* d) @(inline) { return d.declBits.check_state == DeclCheckState.InProgress; }
public func void Decl.setChecked(Decl* d) @(inline) { d.declBits.check_state = DeclCheckState.Checked; }

public func void Decl.setHasAttr(Decl* d) @(inline) { d.declBits.has_attr = 1; }
public func bool Decl.hasAttr(const Decl* d) @(inline) { return d.declBits.has_attr; }

public func void Decl.setAttrExport(Decl* d) { d.declBits.attr_export = 1; }
public func void Decl.setAttrUnused(Decl* d) { d.declBits.attr_unused = 1; }

public func bool Decl.isExported(const Decl* d) { return d.declBits.attr_export; }

public func const char* Decl.getName(const Decl* d) @(inline) {
    if (d.name_idx) return &g_names_start[d.name_idx];
    return nil;
}

public func u32 Decl.getNameIdx(const Decl* d) @(inline) {
    return d.name_idx;
}

// convenience function
public func const char* Decl.getModuleName(const Decl* d) @(inline) {
    if (d.ast_idx == 0) return nil;
    const AST* a = d.getAST();
    const Module* mod = a.getMod();
    return mod.getName();
}

public func SrcLoc Decl.getLoc(const Decl* d) @(inline) { return d.loc; }

public func QualType Decl.getType(const Decl* d) @(inline) { return d.qt; }
public func void Decl.setType(Decl* d, QualType qt) @(inline) { d.qt = qt; }

public func AST* Decl.getAST(const Decl* d) @(inline) { return idx2ast(d.ast_idx); }

public func u32 Decl.getASTIdx(const Decl* d) @(inline) { return d.ast_idx; }

public func Module* Decl.getModule(const Decl* d) @(inline) { return idx2ast(d.ast_idx).mod; }

public func bool Decl.isPublic(const Decl* d) @(inline) { return d.declBits.is_public; }

public func bool Decl.isUsed(const Decl* d) @(inline) { return d.declBits.is_used; }

public func bool Decl.isUsedPublic(const Decl* d) @(inline) { return d.declBits.is_used_public; }

public func void Decl.setUsed(Decl* d) @(inline) { d.declBits.is_used = true; }

public func void Decl.setUsedPublic(Decl* d) @(inline) { d.declBits.is_used_public = true; }

public func bool Decl.isExternal(const Decl* d) { return d.declBits.is_external; }

public func void Decl.setExternal(Decl* d) { d.declBits.is_external = 1; }

public func bool Decl.isGenerated(const Decl* d) { return d.declBits.is_generated; }

public func void Decl.setGenerated(Decl* d) { d.declBits.is_generated = 1; }

//public func void Decl.clearGenerated(Decl* d) { d.declBits.is_generated = 0; }

public func void Decl.dump(const Decl* d) {
    string_buffer.Buf* out = string_buffer.create(10*4096, utils.useColor(), 2);
    d.print(out, 0);
    out.color(col_Normal);
    stdio.puts(out.data());
    out.free();
}

public func bool Decl.isTypeDecl(const Decl* d) {
    switch (d.getKind()) {
    case Function:     break;
    case Import:       break;
    case StructType:   return true;
    case EnumType:     return true;
    case EnumConstant: break;
    case FunctionType: return true;
    case AliasType:    return true;
    case Var:          break;
    case StaticAssert: break;
    }
    return false;
}

public func const char* Decl.getKindName(const Decl* d) {
    switch (d.getKind()) {
    case Function:     return "function";
    case Import:       return "import";
    case StructType:   return "type";
    case EnumType:     return "type";
    case EnumConstant: return "enum constant";
    case FunctionType: return "type";
    case AliasType:    return "type";
    case Var:          return "variable";
    case StaticAssert: return "static-assert";
    }
    return "";
}

public func const char* Decl.getCName(const Decl* d) {
    if (!d.hasAttr()) return nil;

    const AST* a = d.getAST();
    const attr.Value* cname = a.getAttr(d, attr.AttrKind.CName);
    if (!cname) return nil;

    return idx2name(cname.text_idx);
}

public func const char* Decl.getFullName(const Decl* d) {
    local char[128] tmp;

    const char* modname = d.getModuleName();

    if (d.getKind() != DeclKind.Function) {
        stdio.sprintf(tmp, "%s.%s", modname, d.getName());
        return tmp;
    }

    const FunctionDecl* fd = cast<FunctionDecl*>(d);
    if (fd.hasPrefix()) {
        stdio.sprintf(tmp, "%s.%s.%s", modname, fd.getPrefixName(), d.getName());
    } else {
        stdio.sprintf(tmp, "%s.%s", modname, d.getName());
    }
    return tmp;
}

func void Decl.print(const Decl* d, string_buffer.Buf* out, u32 indent) {
    switch (d.getKind()) {
    case Function:
        FunctionDecl.print(cast<FunctionDecl*>(d), out, indent);
        break;
    case Import:
        ImportDecl.print(cast<ImportDecl*>(d), out, indent);
        break;
    case StructType:
        StructTypeDecl.print(cast<StructTypeDecl*>(d), out, indent);
        break;
    case EnumType:
        EnumTypeDecl.print(cast<EnumTypeDecl*>(d), out, indent);
        break;
    case EnumConstant:
        EnumConstantDecl.print(cast<EnumConstantDecl*>(d), out, indent);
        break;
    case FunctionType:
        FunctionTypeDecl.print(cast<FunctionTypeDecl*>(d), out, indent);
        break;
    case AliasType:
        AliasTypeDecl.print(cast<AliasTypeDecl*>(d), out, indent);
        break;
    case Var:
        VarDecl.print(cast<VarDecl*>(d), out, indent);
        break;
    case StaticAssert:
        StaticAssertDecl.print(cast<StaticAssertDecl*>(d), out, indent);
        break;
    }
}

func void Decl.printKind(const Decl* d, string_buffer.Buf* out, u32 indent, bool print_type) {
    out.indent(indent);
    out.color(col_Decl);
    out.add(declKind_names[d.getKind()]);
    if (print_type) {
        out.add1(' ');
        d.qt.printQuoted(out);
    }
}

func void Decl.printName(const Decl* d, string_buffer.Buf* out) {
    out.add1(' ');
    out.color(col_Value);
    if (d.name_idx) {
        out.add(d.getName());
    }
    else out.add("(nil)");
}

func void Decl.printBits(const Decl* d, string_buffer.Buf* out) {
    out.color(col_Attr);
    if (d.isPublic()) out.add(" public");
    DeclCheckState cs = d.getCheckState();
    if (cs != DeclCheckState.Checked) {
        out.add1(' ');
        out.add(declCheckState_names[cs]);
    }
    if (!d.isUsed()) {
        out.add(" unused");
    }

    if (d.declBits.has_attr) out.add(" attr");
    if (d.declBits.attr_export) out.add(" export");
}

func void Decl.printAttrs(const Decl* d, string_buffer.Buf* out) {
    if (!d.hasAttr()) return;

    const AST* a = d.getAST();
    out.color(col_Expr); // make purple
    // Note: just request 2 here, ideally we should iterate over all
    const attr.Value* cname = a.getAttr(d, attr.AttrKind.CName);
    if (cname) {
        out.print(" cname=%s", idx2name(cname.text_idx));
    }
    const attr.Value* section = a.getAttr(d, attr.AttrKind.Section);
    if (section) {
        out.print(" section=%s", idx2name(section.text_idx));
    }
}

func void Decl.printUsed(const Decl* d, string_buffer.Buf* out) {
    out.color(col_Attr);
    out.print(" used=%d/%d", d.isUsed(), d.isUsedPublic());
}


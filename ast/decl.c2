/* Copyright 2022 Bas van den Berg
*/

module ast;

import utils local;
import string_buffer local;
import stdio;

public type DeclKind enum u8 {
    Function,
    Import,
    StructType,
    EnumType,
    EnumConstant,
    FunctionType,
    AliasType,
    Var,
    StaticAssert,
}

public type DeclBits struct {
    u32 kind : 8;
    u32 is_public : 1;
}
public const u32 NumDeclBits = 9;

public type Decl struct {
    union {
        DeclBits declBits;
        ImportDeclBits importDeclBits;
        FunctionDeclBits functionDeclBits;
        StructTypeDeclBits structTypeDeclBits;
        EnumTypeDeclBits enumTypeDeclBits;
        EnumConstantDeclBits enumConstantDeclBits;
        VarDeclBits varDeclBits;
        u32 bits;
    }
    SrcLoc loc;
    const char* name;
    // QualType q;
    // Module* mod;
} @(opaque)

func void Decl.init(Decl* d, DeclKind k, const char* name, SrcLoc loc, bool is_public) @(inline) {
    d.bits = 0;
    d.declBits.kind = k;
    d.declBits.is_public = is_public;
    d.name = name;
    d.loc = loc;
}

// TEMP cast needed until Analyser fixed
public func DeclKind Decl.getKind(const Decl* d) @(inline) { return cast<DeclKind>(d.declBits.kind); }

public func const char* Decl.getName(const Decl* d) @(inline) {
    return d.name;
}

public func SrcLoc Decl.getLoc(const Decl* d) @(inline) {
    return d.loc;
}

public func bool Decl.isPublic(const Decl* d) @(inline) {
    return d.declBits.is_public;
}

public func void Decl.dump(const Decl* d) {
    StringBuffer* out = string_buffer.create(10*4096);
    d.print(out, 0);
    stdio.printf("%s\n", out.data());
    out.free();
}

public func void Decl.print(const Decl* d, StringBuffer* out, u32 indent) {
    switch (d.getKind()) {
    case DeclKind.Function:
        FunctionDecl.print(cast<FunctionDecl*>(d), out, indent);
        break;
    case DeclKind.Import:
        ImportDecl.print(cast<ImportDecl*>(d), out, indent);
        break;
    case DeclKind.StructType:
        StructTypeDecl.print(cast<StructTypeDecl*>(d), out, indent);
        break;
    case DeclKind.EnumType:
        EnumTypeDecl.print(cast<EnumTypeDecl*>(d), out, indent);
        break;
    case DeclKind.EnumConstant:
        EnumConstantDecl.print(cast<EnumConstantDecl*>(d), out, indent);
        break;
    case DeclKind.FunctionType:
        FunctionTypeDecl.print(cast<FunctionTypeDecl*>(d), out, indent);
        break;
    case DeclKind.AliasType:
        AliasTypeDecl.print(cast<AliasTypeDecl*>(d), out, indent);
        break;
    case DeclKind.Var:
        VarDecl.print(cast<VarDecl*>(d), out, indent);
        break;
    case DeclKind.StaticAssert:
        StaticAssertDecl.print(cast<StaticAssertDecl*>(d), out, indent);
        break;
    }
}


module ast;

import ast_context local;

public type DeclKind enum u8 {
    Import,
}

public type DeclBits struct {
    u32 kind : 8;
}
public const u32 NumDeclBits = 8;

public type Decl struct {
    union {
        DeclBits declBits;
        ImportDeclBits importDeclBits;
        u32 bits;
    }
    u32 loc;
    const char* name;
    // QualType q;
    // Module* mod;
} @(opaque)

func void Decl.init(Decl* d, DeclKind k, const char* name, u32 loc) @(inline) {
    d.bits = 0;
    d.declBits.kind = k;
    d.name = name;
    d.loc = loc;
}

// TEMP cast needed until Analyser fixed
public func DeclKind Decl.getKind(const Decl* d) @(inline) { return cast<DeclKind>(d.declBits.kind); }

public func const char* Decl.getName(const Decl* d) @(inline) {
    return d.name;
}

public func u32 Decl.getLoc(const Decl* d) @(inline) {
    return d.loc;
}

public func void Decl.dump(const Decl* d) {
    switch (d.getKind()) {
    case DeclKind.Import:
        ImportDecl.print(cast<ImportDecl*>(d));
        break;
    }
}


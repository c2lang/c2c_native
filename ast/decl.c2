/* Copyright 2022 Bas van den Berg
*/

module ast;

import utils local;
import string_buffer;
import stdio;

// TODO better order
public type DeclKind enum u8 {
    Function,
    Import,
    StructType,
    EnumType,
    EnumConstant,
    FunctionType,
    AliasType,
    Var,
    // Label
    // ArrayValue
    StaticAssert,
}

public type DeclCheckState enum u8 {
    Unchecked,
    InProgress,
    Checked,
}

const char*[] declCheckState_names = {
    "unchecked",
    "in-progress",
    "checked",
}

static_assert(elemsof(DeclCheckState), elemsof(declCheckState_names));

public type DeclBits struct {
    u32 kind : 8;
    u32 is_public : 1;
    u32 is_used : 1;
    u32 is_used_public : 1;
    u32 check_state : 2;
}
public const u32 NumDeclBits = 13;

public type Decl struct {
    union {
        DeclBits declBits;
        ImportDeclBits importDeclBits;
        FunctionDeclBits functionDeclBits;
        StructTypeDeclBits structTypeDeclBits;
        EnumTypeDeclBits enumTypeDeclBits;
        EnumConstantDeclBits enumConstantDeclBits;
        VarDeclBits varDeclBits;
        u32 bits;
    }
    SrcLoc loc;
    u32 name_idx;   // into g_names_start, 0 means nil
    u32 ast_idx;    // into g_ast_start, 0 means nil
    QualType qt;
} @(opaque)

func void Decl.init(Decl* d, DeclKind k, const char* name, SrcLoc loc, bool is_public, QualType qt, AST* ast_) @(inline) {
    d.bits = 0;
    d.declBits.kind = k;
    d.declBits.is_public = is_public;

    d.loc = loc;
    d.name_idx = name2idx(name);
    d.ast_idx = ast2idx(ast_);
    d.qt = qt;
}

// TEMP cast needed until Analyser fixed
public func DeclKind Decl.getKind(const Decl* d) @(inline) { return cast<DeclKind>(d.declBits.kind); }

public func DeclCheckState Decl.getCheckState(const Decl* d) @(inline) { return cast<DeclCheckState>(d.declBits.check_state); }
public func void Decl.setCheckState(Decl* d, DeclCheckState s) @(inline) { d.declBits.check_state = s; }
public func bool Decl.isChecked(const Decl* d) @(inline) { return d.declBits.check_state == DeclCheckState.Checked; }
public func bool Decl.checkInProgress(const Decl* d) @(inline) { return d.declBits.check_state == DeclCheckState.InProgress; }
public func void Decl.setChecked(Decl* d) @(inline) { d.declBits.check_state = DeclCheckState.Checked; }


public func const char* Decl.getName(const Decl* d) @(inline) {
    if (d.name_idx) return &g_names_start[d.name_idx];
    return nil;
}

public func u32 Decl.getNameIdx(const Decl* d) @(inline) {
    return d.name_idx;
}

public func SrcLoc Decl.getLoc(const Decl* d) @(inline) { return d.loc; }

public func QualType Decl.getType(const Decl* d) @(inline) { return d.qt; }
public func void Decl.setType(Decl* d, QualType qt) @(inline) { d.qt = qt; }

public func AST* Decl.getAST(const Decl* d) @(inline) { return idx2ast(d.ast_idx); }

public func Module* Decl.getModule(const Decl* d) @(inline) { return idx2ast(d.ast_idx).mod; }

public func bool Decl.isPublic(const Decl* d) @(inline) { return d.declBits.is_public; }

public func bool Decl.isUsed(const Decl* d) @(inline) { return d.declBits.is_used; }

public func bool Decl.isUsedPublic(const Decl* d) @(inline) { return d.declBits.is_used_public; }

public func void Decl.setUsed(Decl* d) @(inline) { d.declBits.is_used = true; }

public func void Decl.setUsedPublic(Decl* d) @(inline) { d.declBits.is_used_public = true; }

public func void Decl.dump(const Decl* d) {
    string_buffer.Buf* out = string_buffer.create(10*4096, utils.useColor());
    d.print(out, 0);
    stdio.puts(out.data());
    out.free();
}

public func bool Decl.isTypeDecl(const Decl* d) {
    switch (d.getKind()) {
    case Function:     break;
    case Import:       break;
    case StructType:   return true;
    case EnumType:     return true;
    case EnumConstant: break;
    case FunctionType: return true;
    case AliasType:    return true;
    case Var:          break;
    case StaticAssert: break;
    }
    return false;
}

func void Decl.print(const Decl* d, string_buffer.Buf* out, u32 indent) {
    switch (d.getKind()) {
    case Function:
        FunctionDecl.print(cast<FunctionDecl*>(d), out, indent);
        break;
    case Import:
        ImportDecl.print(cast<ImportDecl*>(d), out, indent);
        break;
    case StructType:
        StructTypeDecl.print(cast<StructTypeDecl*>(d), out, indent);
        break;
    case EnumType:
        EnumTypeDecl.print(cast<EnumTypeDecl*>(d), out, indent);
        break;
    case EnumConstant:
        EnumConstantDecl.print(cast<EnumConstantDecl*>(d), out, indent);
        break;
    case FunctionType:
        FunctionTypeDecl.print(cast<FunctionTypeDecl*>(d), out, indent);
        break;
    case AliasType:
        AliasTypeDecl.print(cast<AliasTypeDecl*>(d), out, indent);
        break;
    case Var:
        VarDecl.print(cast<VarDecl*>(d), out, indent);
        break;
    case StaticAssert:
        StaticAssertDecl.print(cast<StaticAssertDecl*>(d), out, indent);
        break;
    }
}

func void Decl.printKind(const Decl* d, string_buffer.Buf* out, u32 indent, const char* kind_) {
    out.indent(indent);
    out.color(col_Decl);
    out.add(kind_);
    out.add(" ");
    d.qt.printQuoted(out);
}

func void Decl.printName(const Decl* d, string_buffer.Buf* out) {
    out.add(" ");
    out.color(col_Value);
    if (d.name_idx) {
        out.add(d.getName());
    }
    else out.add("(nil)");
}

func void Decl.printBits(const Decl* d, string_buffer.Buf* out) {
    out.color(col_Attr);
    if (d.isPublic()) out.add(" public");
    out.add(" ");
    out.add(declCheckState_names[d.getCheckState()]);
    // TODO is_external
}

func void Decl.printUsed(const Decl* d, string_buffer.Buf* out) {
    out.color(col_Attributes);
    out.print(" used=%d/%d", d.isUsed(), d.isUsedPublic());
}


/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import string local;
import stdlib local;

public type DeclList struct {
    u32 count;
    u32 capacity;
    Decl** decls;
}

public func void DeclList.init(DeclList* l, u32 initial_size) {
    memset(l, 0, sizeof(DeclList));
    if (initial_size) {
        l.capacity = initial_size;
        // TODO allocate in Context?
        l.decls = malloc(l.capacity * sizeof(Decl*));
    }
}

public func void DeclList.free(DeclList* l) {
    if (l.decls) free(cast<void*>(l.decls));
}

public func void DeclList.add(DeclList* l, Decl* d) {
    if (l.count >= l.capacity) {
        l.capacity += 4;
        void* decls2 = malloc(l.capacity * sizeof(Decl*));
        void* old = cast<void*>(l.decls);
        if (old) {
            memcpy(decls2, old, l.count * sizeof(Decl*));
            free(old);
        }
        l.decls = decls2;
    }

    l.decls[l.count] = d;
    l.count++;
}

public func u32 DeclList.size(const DeclList* l) {
    return l.count;
}

public func Decl* DeclList.get(const DeclList* l, u32 idx) {
    return l.decls[idx];
}

public func Decl** DeclList.getDecls(const DeclList* l) {
    return l.decls;
}

// Note: must be lower than current size!
public func void DeclList.setSize(DeclList* l, u32 size) {
    l.count = size;
}

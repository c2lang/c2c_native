/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;

public type DeclStmt struct {
    Stmt parent;
    VarDecl* decl;
} @(opaque)

public func DeclStmt* DeclStmt.create(ast_context.Context* c,
                                      VarDecl* decl)
{
    DeclStmt* s = c.alloc(sizeof(DeclStmt));
    s.parent.init(StmtKind.Decl);
    s.decl = decl;
#if AstStatistics
    Stats.addStmt(StmtKind.Decl, sizeof(DeclStmt));
#endif
    return s;
}

func Stmt* DeclStmt.instantiate(DeclStmt* s, Instantiator* inst) {
    VarDecl* decl2 = s.decl.instantiate(inst);
    return cast<Stmt*>(DeclStmt.create(inst.c, decl2));
}

public func VarDecl* DeclStmt.getDecl(const DeclStmt* d) {
    return d.decl;
}

func void DeclStmt.print(const DeclStmt* s, string_buffer.Buf* out, u32 indent) {
    s.parent.printKind(out, indent);
    out.newline();
    s.decl.print(out, indent + 1);
}


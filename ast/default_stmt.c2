/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import src_loc local;

import string;

type DefaultStmtBits struct {
    u32 : NumStmtBits;
    u32 num_stmts : 16;
}

public type DefaultStmt struct {
    Stmt parent;
    SrcLoc loc;
    Stmt*[0] stmts; // tail-allocated
} @(opaque)

public func DefaultStmt* DefaultStmt.create(ast_context.Context* c, SrcLoc loc, Stmt** stmts, u32 numStmts) @(inline) {
    u32 size = sizeof(DefaultStmt) + numStmts * sizeof(Stmt*);
    DefaultStmt* s = c.alloc(size);
    s.parent.init(StmtKind.Default);
    s.parent.defaultStmtBits.num_stmts = numStmts;
    s.loc = loc;
    string.memcpy(cast<void*>(s.stmts), cast<void*>(stmts), numStmts * sizeof(Stmt*));
#if AstStatistics
    Stats.addStmt(StmtKind.Default, size);
#endif
    return s;
}

public func SrcLoc DefaultStmt.getLoc(const DefaultStmt* s) { return s.loc; }

public func u32 DefaultStmt.getNumStmts(const DefaultStmt* s) {
    return s.parent.defaultStmtBits.num_stmts;
}

public func Stmt** DefaultStmt.getStmts(DefaultStmt* s) {
    return s.stmts;
}

func void DefaultStmt.print(const DefaultStmt* s, string_buffer.Buf* out, u32 indent) {
    s.parent.printKind(out, indent);
    out.add1('\n');

    for (u32 i=0; i<s.parent.defaultStmtBits.num_stmts; i++) {
        s.stmts[i].print(out, indent + 2);
    }
}


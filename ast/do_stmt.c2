/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;

public type DoStmt struct {
    Stmt parent;
    Stmt* cond;
    Stmt* then;
} @(opaque)

// NOTE: merge with while? (only need single bit to differentiate)
public func DoStmt* DoStmt.create(ast_context.Context* c, Stmt* cond, Stmt* then) @(inline) {
    DoStmt* s = c.alloc(sizeof(DoStmt));
    s.parent.init(StmtKind.Do);
    s.cond = cond;
    s.then = then;
    return s;
}

func void DoStmt.print(const DoStmt* s, string_buffer.Buf* out, u32 indent) {
    s.parent.printKind(out, indent, "DoStmt");
    out.add("\n");

    s.cond.print(out, indent + 2);
    s.then.print(out, indent + 2);
}

public func Stmt* DoStmt.getCond(const DoStmt* s) @(inline) { return s.cond; }

public func Stmt* DoStmt.getThen(const DoStmt* s) @(inline) { return s.then; }


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import src_loc local;

type EnumConstantDeclBits struct {
    u32 : NumDeclBits;
    u32 has_init : 1;
}

public type EnumConstantDecl struct {
    Decl parent;
    u32 value;
    Expr*[0] init;  // tail-allocated
} @(opaque)

public func EnumConstantDecl* EnumConstantDecl.create(ast_context.Context* c,
                                                      u32 name,
                                                      SrcLoc loc,
                                                      bool is_public,
                                                      u32 ast_idx,
                                                      Expr* initValue) @(inline)
{
    u32 size = sizeof(EnumConstantDecl);
    if (initValue) size += sizeof(Expr*);
    EnumConstantDecl* d = c.alloc(size);
    d.parent.init(DeclKind.EnumConstant, name, loc, is_public, QualType_Invalid, ast_idx);
    d.value = 0;
    if (initValue) {
        d.parent.enumConstantDeclBits.has_init = 1;
        d.init[0] = initValue;
    }
#if AstStatistics
    Stats.addDecl(DeclKind.EnumConstant, size);
#endif
    return d;
}

public func Decl* EnumConstantDecl.asDecl(EnumConstantDecl* d) @(inline) { return &d.parent; }

public func u32 EnumConstantDecl.getValue(const EnumConstantDecl* d) @(inline) { return d.value; }

public func void EnumConstantDecl.setValue(EnumConstantDecl* d, u32 value) @(inline) { d.value = value; }

public func Expr* EnumConstantDecl.getInit(const EnumConstantDecl* d) {
    if (d.parent.enumConstantDeclBits.has_init) return d.init[0];
    return nil;
}

public func Expr** EnumConstantDecl.getInit2(EnumConstantDecl* d) {
    if (d.parent.enumConstantDeclBits.has_init) return &d.init[0];
    return nil;
}

func void EnumConstantDecl.print(const EnumConstantDecl* d, string_buffer.Buf* out, u32 indent) {
    d.parent.printKind(out, indent, true);
    d.parent.printBits(out);
    d.parent.printName(out);

    out.color(col_Value);
    out.print(" %u", d.value);
    out.add1('\n');

    if (d.parent.enumConstantDeclBits.has_init) d.init[0].print(out, indent + 2);
}


/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;

type EnumConstantDeclBits struct {
    u32 : NumDeclBits;
    u32 has_init : 1;
}

public type EnumConstantDecl struct {
    Decl parent;
    Value value;
    Expr*[0] init;  // tail-allocated
} @(opaque)

public func EnumConstantDecl* EnumConstantDecl.create(ast_context.Context* c,
                                                      u32 name,
                                                      SrcLoc loc,
                                                      bool is_public,
                                                      u32 ast_idx,
                                                      Expr* initValue) @(inline)
{
    u32 size = sizeof(EnumConstantDecl);
    if (initValue) size += sizeof(Expr*);
    EnumConstantDecl* d = c.alloc(size);
    d.parent.init(DeclKind.EnumConstant, name, loc, is_public, QualType_Invalid, ast_idx);
    d.value.is_signed = false;
    d.value.uvalue = 0;
    if (initValue) {
        d.parent.enumConstantDeclBits.has_init = 1;
        d.init[0] = initValue;
    }
#if AstStatistics
    Stats.addDecl(DeclKind.EnumConstant, size);
#endif
    return d;
}

public func Decl* EnumConstantDecl.asDecl(EnumConstantDecl* d) @(inline) { return &d.parent; }

public func Value EnumConstantDecl.getValue(const EnumConstantDecl* d) @(inline) { return d.value; }

public func void EnumConstantDecl.setValue(EnumConstantDecl* d, Value value) @(inline) { d.value = value; }

public func Expr* EnumConstantDecl.getInit(const EnumConstantDecl* d) {
    if (d.parent.enumConstantDeclBits.has_init) return d.init[0];
    return nil;
}

public func Expr** EnumConstantDecl.getInit2(EnumConstantDecl* d) {
    if (d.parent.enumConstantDeclBits.has_init) return &d.init[0];
    return nil;
}

func void EnumConstantDecl.print(const EnumConstantDecl* d, string_buffer.Buf* out, u32 indent) {
    d.parent.printKind(out, indent, true);
    d.parent.printBits(out);
    d.parent.printName(out);

    out.color(col_Calc);
    out.print(" %s", d.value.str());
    out.newline();

    if (d.parent.enumConstantDeclBits.has_init) d.init[0].print(out, indent + 1);
}


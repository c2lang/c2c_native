/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;

public type EnumType struct {
    Type parent;
    EnumTypeDecl* decl;
} @(opaque)

public func EnumType* EnumType.create(ast_context.Context* c, EnumTypeDecl* decl) @(inline) {
    EnumType* t = c.alloc(sizeof(EnumType));
    t.parent.init(TypeKind.Enum);
    t.decl = decl;
#if AstStatistics
    Stats.addType(TypeKind.Enum, sizeof(EnumType));
#endif
    t.parent.setCanonicalType(QualType.init(cast<Type*>(t)));
    return t;
}

public func EnumTypeDecl* EnumType.getDecl(const EnumType* t) @(inline) { return t.decl; }

public func Type* EnumType.asType(EnumType* t) @(inline) { return &t.parent; }

// convenience function
public func const char* EnumType.getName(const EnumType* t) {
    return t.decl.parent.getName();
}

func void EnumType.print(const EnumType* t, string_buffer.Buf* out) {
    out.add("(enum)");
    out.add(t.decl.parent.getModuleName());
    out.add1('.');
    out.add(t.decl.parent.getName());
}

func void EnumType.debugPrint(const EnumType* t, string_buffer.Buf* out) {
    // TODO
}

public func void EnumType.fullPrint(const EnumType* t, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.print("EnumType [%p] %s\n", t, t.decl.asDecl().getName());
}

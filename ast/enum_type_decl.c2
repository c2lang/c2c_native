/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;
import string;

type EnumTypeDeclBits struct {
    u32 : NumDeclBits;
    u32 is_incr : 1;
    u32 num_constants : 12;
}

public type EnumTypeDecl struct {
    Decl parent;
    QualType implType;
    EnumConstantDecl*[0] constants; // tail-allocated
} @(opaque)

public func EnumTypeDecl* EnumTypeDecl.create(ast_context.Context* c,
                                              u32 name,
                                              SrcLoc loc,
                                              bool is_public,
                                              u32 ast_idx,
                                              QualType implType,
                                              bool is_incr,
                                              EnumConstantDecl** constants,
                                              u32 num_constants) @(inline)
{
    u32 size = sizeof(EnumTypeDecl) + num_constants * sizeof(EnumConstantDecl*);
    EnumTypeDecl* d = c.alloc(size);
    EnumType* etype = EnumType.create(c, d);
    QualType qt = QualType.init(cast<Type*>(etype));
    d.parent.init(DeclKind.EnumType, name, loc, is_public, qt, ast_idx);
    d.parent.enumTypeDeclBits.is_incr = is_incr;
    d.parent.enumTypeDeclBits.num_constants = num_constants;
    d.implType = implType;

    if (is_incr) {
        // TODO if (incr, alloc pointer to rest?
    } else {
        string.memcpy(cast<void*>(d.constants), cast<void*>(constants), num_constants * sizeof(EnumConstantDecl*));

        for (u32 i=0; i<num_constants; i++) {
            constants[i].asDecl().setType(qt);
        }
    }
#if AstStatistics
    Stats.addDecl(DeclKind.EnumType, size);
#endif
    return d;
}

public func void EnumTypeDecl.setIncrMembers(EnumTypeDecl* d, Decl** constants, u32 num_constants) {
    d.parent.enumTypeDeclBits.num_constants = num_constants;
    string.memcpy(cast<void*>(d.constants), cast<void*>(constants), num_constants * sizeof(EnumConstantDecl*));
}

public func QualType EnumTypeDecl.getImplType(const EnumTypeDecl* d) {
    return d.implType;
}

public func Decl* EnumTypeDecl.asDecl(EnumTypeDecl* d) @(inline) { return &d.parent; }

public func u32 EnumTypeDecl.getNumConstants(const EnumTypeDecl* d) @(inline) {
    return d.parent.enumTypeDeclBits.num_constants;
}

public func EnumConstantDecl** EnumTypeDecl.getConstants(EnumTypeDecl* d) {
    assert(d.getNumConstants());
    return d.constants;
}

public func EnumConstantDecl* EnumTypeDecl.findConstant(const EnumTypeDecl* d, u32 name_idx) {
    for (u32 i=0; i<d.parent.enumTypeDeclBits.num_constants; i++) {
        EnumConstantDecl* ecd = d.constants[i];
        Decl* ed = cast<Decl*>(ecd);
        if (ed.getNameIdx() == name_idx) return ecd;
    }
    return nil;
}

func void EnumTypeDecl.print(const EnumTypeDecl* d, string_buffer.Buf* out, u32 indent) {
    d.parent.printKind(out, indent, true);
    d.parent.printBits(out);
    if (d.parent.enumTypeDeclBits.is_incr) out.add(" incremental");
    d.parent.printAttrs(out);
    d.parent.printName(out);
    out.add1(' ');
    d.implType.print(out);
    out.add1('\n');

    for (u32 i=0; i<d.parent.enumTypeDeclBits.num_constants; i++) {
        d.constants[i].print(out, indent + 1);
    }
}


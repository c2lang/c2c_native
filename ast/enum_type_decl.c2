/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import utils local;
import string;

type EnumTypeDeclBits struct {
    u32 : NumDeclBits;
    u32 is_incr : 1;
    u32 num_constants : 12;
}

public type EnumTypeDecl struct {
    Decl decl;
    EnumConstantDecl*[0] constants; // tail-allocated
} @(opaque)

public func EnumTypeDecl* EnumTypeDecl.create(ast_context.Context* c,
                                              const char* name,
                                              SrcLoc loc,
                                              bool is_public,
                                              bool is_incr,
                                              EnumConstantDecl** constants,
                                              u32 num_constants) @(inline)
{
    u32 size = sizeof(EnumTypeDecl) + num_constants * sizeof(EnumConstantDecl*);
    EnumTypeDecl* d = c.alloc(size);
    d.decl.init(DeclKind.EnumType, name, loc, is_public);
    d.decl.enumTypeDeclBits.is_incr = is_incr;
    d.decl.enumTypeDeclBits.num_constants = num_constants;
    if (is_incr) {
        // TODO if (incr, alloc pointer to rest?
    } else {
        string.memcpy(cast<void*>(d.constants), cast<void*>(constants), num_constants * sizeof(EnumConstantDecl*));
    }
    return d;
}

public func void EnumTypeDecl.setIncrMembers(EnumTypeDecl* d, Decl** constants, u32 count) {
    d.decl.enumTypeDeclBits.num_constants = count;
    //d.constants = constants;
}

public func Decl* EnumTypeDecl.asDecl(EnumTypeDecl* d) @(inline) { return &d.decl; }

public func void EnumTypeDecl.print(const EnumTypeDecl* d, StringBuffer* out, u32 indent) {
    out.indent(indent);
    out.print("EnumTypeDecl %s", d.decl.name);
    if (d.decl.enumTypeDeclBits.is_incr) out.add(" incremental");
    out.add("\n");

    for (u32 i=0; i<d.decl.enumTypeDeclBits.num_constants; i++) {
        d.constants[i].print(out, indent + 2);
    }
}


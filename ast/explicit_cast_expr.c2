/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import src_loc local;

public type ExplicitCastExpr struct {
    Expr parent;
    Expr* inner;
    TypeRef dest;    // note: variable length!
} @(opaque)

public func ExplicitCastExpr* ExplicitCastExpr.create(ast_context.Context* c,
                                                      SrcLoc loc,
                                                      const TypeRefHolder* ref,
                                                      Expr* inner) @(inline)
{
    u32 size = sizeof(ExplicitCastExpr) + ref.getExtraSize();
    ExplicitCastExpr* e = c.alloc(size);
    e.parent.init(ExprKind.ExplicitCast, loc, 0, 0, 0, ValType.NValue);
    e.inner = inner;
    ref.fill(&e.dest);
#if AstStatistics
    Stats.addExpr(ExprKind.ExplicitCast, size);
#endif
    return e;
}

func Expr* ExplicitCastExpr.instantiate(ExplicitCastExpr* e, Instantiator* inst) {
    bool matches = e.dest.matchesTemplate(inst.template_name);
    u32 extra = matches ? inst.ref.getExtraSize() : e.dest.getExtraSize();
    u32 size = sizeof(ExplicitCastExpr) + extra;

    ExplicitCastExpr* e2 = inst.c.alloc(size);
    e2.parent = e.parent;
    e2.inner = e.inner.instantiate(inst);
    e2.dest.instantiate(&e.dest, inst.ref, inst.template_name);
    return cast<Expr*>(e2);
}

public func Expr* ExplicitCastExpr.getInner(const ExplicitCastExpr* e) @(inline) { return e.inner; }
public func Expr** ExplicitCastExpr.getInner2(ExplicitCastExpr* e) @(inline) { return &e.inner; }

public func TypeRef* ExplicitCastExpr.getTypeRef(ExplicitCastExpr* e) {
    return &e.dest;
}

func void ExplicitCastExpr.print(const ExplicitCastExpr* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.add(" -> ");
    e.dest.print(out, true);
    out.add1('\n');
    e.inner.print(out, indent + 1);
}


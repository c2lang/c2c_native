/* Copyright 2022 Bas van den Berg
*/

module ast;

import src_loc local;
import utils;
import string_buffer;
import stdio;

public type ExprKind enum u8 {
    IntegerLiteral,
    //FloatLiteral,
    BooleanLiteral,
    CharLiteral,
    StringLiteral,
    Nil,
    Identifier,
    Type,
    Call,
    InitList,
    FieldDesignatedInit,
    ArrayDesignatedInit,
    BinaryOperator,
    UnaryOperator,
    ConditionalOperator,
    Builtin,
    ArraySubscript,
    Member,
    Paren,
    BitOffset,
    ExplicitCast,
    ImplicitCast,
}

const char*[] exprKind_names = {
    "IntegerLiteral",
    "BooleanLiteral",
    "CharLiteral",
    "StringLiteral",
    "Nil",
    "Identifier",
    "TypeExpr",
    "Call",
    "InitList",
    "FieldDesignatedInit",
    "ArrayDesignatedInit",
    "BinaryOperator",
    "UnaryOperator",
    "ConditionalOp",
    "Builtin",
    "ArraySubscript",
    "Member",
    "Paren",
    "BitOffset",
    "ExplicitCast",
    "ImplicitCast",
}

static_assert(elemsof(ExprKind), elemsof(exprKind_names));

public type ExprBits struct {
    u32 : NumStmtBits;
    u32 kind : 8;
    u32 is_ctv : 1;
    u32 is_ctc : 1;
    u32 is_lvalue : 1;
    u32 is_rvalue : 1;
}
public const u32 NumExprBits = NumStmtBits + 16;

public type Expr struct {
    Stmt parent;
    SrcLoc loc;
    QualType qt;
} @(opaque)

public func void Expr.init(Expr* e, ExprKind k, SrcLoc loc, bool ctv, bool ctc, bool lvalue) @(inline) {
    e.parent.init(StmtKind.Expr);
    e.parent.exprBits.kind = k;
    e.parent.exprBits.is_ctv = ctv;
    e.parent.exprBits.is_ctc = ctc;
    e.parent.exprBits.is_lvalue = lvalue;
    e.loc = loc;
    e.qt.ptr = 0;
}

public func Stmt* Expr.asStmt(Expr* e) @(inline) { return &e.parent; }

// TEMP cast needed until Analyser fixed
public func ExprKind Expr.getKind(const Expr* e) @(inline) { return cast<ExprKind>(e.parent.exprBits.kind); }

public func bool Expr.isCtv(const Expr* e) @(inline) { return e.parent.exprBits.is_ctv; }

public func bool Expr.isCtc(const Expr* e) @(inline) { return e.parent.exprBits.is_ctc; }

public func void Expr.setCtv(Expr* e) @(inline) { e.parent.exprBits.is_ctv = true; }

public func void Expr.setCtc(Expr* e) @(inline) { e.parent.exprBits.is_ctc = true; }

public func void Expr.copyConstantFlags(Expr* e, const Expr* other) {
    e.parent.exprBits.is_ctc = other.parent.exprBits.is_ctc;
    e.parent.exprBits.is_ctv = other.parent.exprBits.is_ctv;
}

public func void Expr.combineConstantFlags(Expr* e, const Expr* lhs, const Expr* rhs) {
    e.parent.exprBits.is_ctc = lhs.parent.exprBits.is_ctc && rhs.parent.exprBits.is_ctc;
    e.parent.exprBits.is_ctv = lhs.parent.exprBits.is_ctv && rhs.parent.exprBits.is_ctv;
}

public func bool Expr.isLValue(const Expr* e) { return e.parent.exprBits.is_lvalue; }

public func bool Expr.isRValue(const Expr* e) { return !e.parent.exprBits.is_lvalue; }

public func void Expr.setLValue(Expr* e) { e.parent.exprBits.is_lvalue = true; }

public func void Expr.setRValue(Expr* e) { e.parent.exprBits.is_lvalue = false; }

public func void Expr.copyLValue(Expr* e, const Expr* other) {
    e.parent.exprBits.is_lvalue = other.parent.exprBits.is_lvalue;
}

public func SrcLoc Expr.getLoc(const Expr* e) @(inline) { return e.loc; }

public func SrcLoc Expr.getStartLoc(const Expr* e) @(inline) {
    switch (e.getKind()) {
    case IntegerLiteral:    fallthrough;
    case BooleanLiteral:    fallthrough;
    case CharLiteral:       fallthrough;
    case StringLiteral:     fallthrough;
    case Nil:               fallthrough;
    case Identifier:
        break;
    case Type:
        // TODO correct?
        break;
    case Call:
        // TODO
        break;
    case InitList:
        // TODO
        break;
    case FieldDesignatedInit:
        // TODO
        break;
    case ArrayDesignatedInit:
        // TODO
        break;
    case BinaryOperator:
        const BinaryOperator* b = cast<BinaryOperator*>(e);
        return b.getLHS().getStartLoc();
    case UnaryOperator:
        const UnaryOperator* u = cast<UnaryOperator*>(e);
        return u.getStartLoc();
    case ConditionalOperator:
        const ConditionalOperator* c = cast<ConditionalOperator*>(e);
        return c.getCond().getStartLoc();
    case Builtin:
        break;
    case ArraySubscript:
        const ArraySubscriptExpr* a = cast<ArraySubscriptExpr*>(e);
        return a.getBase().getStartLoc();
    case Member:
        const MemberExpr* m = cast<MemberExpr*>(e);
        return m.getStartLoc();
    case Paren:
        break;
    case BitOffset:
        // TODO
        break;
    case ExplicitCast:
        break;
    case ImplicitCast:
        const ImplicitCastExpr* c = cast<ImplicitCastExpr*>(e);
        return c.getInner().getStartLoc();
    }
    return e.loc;
}

public func SrcLoc Expr.getEndLoc(const Expr* e) @(inline) {
    switch (e.getKind()) {
    case IntegerLiteral:    fallthrough;
    case BooleanLiteral:    fallthrough;
    case CharLiteral:       fallthrough;
    case StringLiteral:     fallthrough;
    case Nil:               fallthrough;
    case Identifier:
        break;
    case Type:
        // TODO correct?
        break;
    case Call:
        // TODO
        break;
    case InitList:
        const InitListExpr* ile = cast<InitListExpr*>(e);
        // TODO
        break;
    case FieldDesignatedInit:
        // TODO
        break;
    case ArrayDesignatedInit:
        // TODO
        break;
    case BinaryOperator:
        const BinaryOperator* b = cast<BinaryOperator*>(e);
        return b.getRHS().getEndLoc();
    case UnaryOperator:
        const UnaryOperator* u = cast<UnaryOperator*>(e);
        return u.getEndLoc();
    case ConditionalOperator:
        const ConditionalOperator* c = cast<ConditionalOperator*>(e);
        return c.getRHS().getEndLoc();
    case Builtin:
        const BuiltinExpr* bi = cast<BuiltinExpr*>(e);
        return bi.getEndLoc();
    case ArraySubscript:
        break;
    case Member:
        const MemberExpr* m = cast<MemberExpr*>(e);
        return m.getEndLoc();
    case Paren:
        const ParenExpr* p = cast<ParenExpr*>(e);
        return p.getInner().getEndLoc() + 1;    // add trailing )
    case BitOffset:
        // TODO
        break;
    case ExplicitCast:
        const ExplicitCastExpr* c = cast<ExplicitCastExpr*>(e);
        return c.getInner().getEndLoc() + 1;    // add trailing )
    case ImplicitCast:
        const ImplicitCastExpr* c = cast<ImplicitCastExpr*>(e);
        return c.getInner().getEndLoc();
    }
    return e.loc;
}

public func SrcRange Expr.getRange(const Expr* e) @(inline) {
    SrcRange range = { e.getStartLoc(), e.getEndLoc() }
    return range;
}

public func void Expr.setType(Expr* e, QualType qt_) @(inline) { e.qt = qt_; }

public func QualType Expr.getType(const Expr* e) @(inline) { return e.qt; }

public func void Expr.dump(const Expr* e) {
    string_buffer.Buf* out = string_buffer.create(10*4096, utils.useColor());
    e.print(out, 0);
    out.color(col_Normal);
    stdio.puts(out.data());
    out.free();
}

func void Expr.print(const Expr* e, string_buffer.Buf* out, u32 indent) {
    switch (e.getKind()) {
    case IntegerLiteral:
        IntegerLiteral.print(cast<IntegerLiteral*>(e), out, indent);
        break;
    case BooleanLiteral:
        BooleanLiteral.print(cast<BooleanLiteral*>(e), out, indent);
        break;
    case CharLiteral:
        CharLiteral.print(cast<CharLiteral*>(e), out, indent);
        break;
    case StringLiteral:
        StringLiteral.print(cast<StringLiteral*>(e), out, indent);
        break;
    case Nil:
        NilExpr.print(cast<NilExpr*>(e), out, indent);
        break;
    case Identifier:
        IdentifierExpr.print(cast<IdentifierExpr*>(e), out, indent);
        break;
    case Type:
        TypeExpr.print(cast<TypeExpr*>(e), out, indent);
        break;
    case Call:
        CallExpr.print(cast<CallExpr*>(e), out, indent);
        break;
    case InitList:
        InitListExpr.print(cast<InitListExpr*>(e), out, indent);
        break;
    case FieldDesignatedInit:
        FieldDesignatedInitExpr.print(cast<FieldDesignatedInitExpr*>(e), out, indent);
        break;
    case ArrayDesignatedInit:
        ArrayDesignatedInitExpr.print(cast<ArrayDesignatedInitExpr*>(e), out, indent);
        break;
    case BinaryOperator:
        BinaryOperator.print(cast<BinaryOperator*>(e), out, indent);
        break;
    case UnaryOperator:
        UnaryOperator.print(cast<UnaryOperator*>(e), out, indent);
        break;
    case ConditionalOperator:
        ConditionalOperator.print(cast<ConditionalOperator*>(e), out, indent);
        break;
    case Builtin:
        BuiltinExpr.print(cast<BuiltinExpr*>(e), out, indent);
        break;
    case ArraySubscript:
        ArraySubscriptExpr.print(cast<ArraySubscriptExpr*>(e), out, indent);
        break;
    case Member:
        MemberExpr.print(cast<MemberExpr*>(e), out, indent);
        break;
    case Paren:
        ParenExpr.print(cast<ParenExpr*>(e), out, indent);
        break;
    case BitOffset:
        BitOffsetExpr.print(cast<BitOffsetExpr*>(e), out, indent);
        break;
    case ExplicitCast:
        ExplicitCastExpr.print(cast<ExplicitCastExpr*>(e), out, indent);
        break;
    case ImplicitCast:
        ImplicitCastExpr.print(cast<ImplicitCastExpr*>(e), out, indent);
        break;
    }
}

func void Expr.printLiteral(const Expr* e, string_buffer.Buf* out) {
    switch (e.getKind()) {
    case IntegerLiteral:
        IntegerLiteral.printLiteral(cast<IntegerLiteral*>(e), out);
        return;
    case BooleanLiteral:
        BooleanLiteral.printLiteral(cast<BooleanLiteral*>(e), out);
        return;
    case CharLiteral:
        CharLiteral.printLiteral(cast<CharLiteral*>(e), out);
        return;
    case StringLiteral:
        // can happen?
        break;
    case Nil:
        NilExpr.printLiteral(cast<NilExpr*>(e), out);
        return;
    case Identifier:
        IdentifierExpr.printLiteral(cast<IdentifierExpr*>(e), out);
        return;
    case Type:
        // can happen? array[enum_max(Enum)} ?
        break;
    case Call:
        break;
    case InitList:
        break;
    case FieldDesignatedInit:
        break;
    case ArrayDesignatedInit:
        break;
    case BinaryOperator:
        BinaryOperator.printLiteral(cast<BinaryOperator*>(e), out);
        return;
    case UnaryOperator:
        UnaryOperator.printLiteral(cast<UnaryOperator*>(e), out);
        return;
    case ConditionalOperator:
        break;
    case Builtin:
        BuiltinExpr.printLiteral(cast<BuiltinExpr*>(e), out);
        return;
    case ArraySubscript:
        // can happen?
        break;
    case Member:
        MemberExpr.printLiteral(cast<MemberExpr*>(e), out);
        return;
    case Paren:
        ParenExpr.printLiteral(cast<ParenExpr*>(e), out);
        return;
    case BitOffset:
        break;
    case ExplicitCast:
        break;
    case ImplicitCast:
        break;
    }
    out.print("?? kind=%u", e.getKind());
}

func void Expr.printKind(const Expr* e, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.color(col_Expr);
    out.add(exprKind_names[e.getKind()]);
}

func void Expr.printTypeBits(const Expr* e, string_buffer.Buf* out) {
    out.add1(' ');
    e.qt.printQuoted(out);
    out.color(col_Attr);
    if (e.parent.exprBits.is_ctc) out.add(" CTC");
    if (e.parent.exprBits.is_ctv) out.add(" CTV");
    if (e.parent.exprBits.is_lvalue) out.add(" lvalue");
    else out.add(" rvalue");
}


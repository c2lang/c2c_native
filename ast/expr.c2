module ast;

import ast_context local;

public type ExprKind enum u8 {
    IntegerLiteral,
    FloatLiteral,
    BoolLiteral,
    CharLiteral,
    StringLiteral,
    Nil,
    Identifier,
    Type,
    Call,
    InitList,
    DesignatorInit,
    BinOp,
    UnaryOp,
    Builtin,
    ArraySubscript,
    Member,
    Paren,
    BitOffset,
    ExplicitCast,
    ImplicitCast,
}

public type ExprBits struct {
    u32 : NumStmtBits;
    u32 kind : 8;
    u32 is_ctv : 1;
    u32 is_ctc : 1;
    u32 is_lvalue : 1;
}
public const u32 NumExprBits = NumStmtBits + 16;

public type Expr struct {
    Stmt stmt;
} @(opaque)

// TEMP cast needed until Analyser fixed
public func ExprKind Expr.getKind(const Expr* e) @(inline) { return cast<ExprKind>(e.stmt.exprBits.kind); }
public func bool expr_is_ctv(const Expr* e) @(inline) { return e.stmt.exprBits.is_ctv; }
public func bool expr_is_ctc(const Expr* e) @(inline) { return e.stmt.exprBits.is_ctc; }

public func void Expr.init(Expr* e, ExprKind k, bool ctv, bool ctc, bool lvalue) @(inline) {
    e.stmt.init(StmtKind.Expr);
    e.stmt.exprBits.kind = k;
    e.stmt.exprBits.is_ctv = 1;
    e.stmt.exprBits.is_ctc = 1;
    e.stmt.exprBits.is_lvalue = 0;
}

public func void Expr.dump(Expr* e) {
    // TODO
}


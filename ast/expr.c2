/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context local;
import utils local;

public type ExprKind enum u8 {
/*
    IntegerLiteral,
    FloatLiteral,
*/
    BooleanLiteral,
/*
    CharLiteral,
    StringLiteral,
    Nil,
    Identifier,
    Type,
    Call,
    InitList,
    DesignatorInit,
    BinOp,
    UnaryOp,
*/
    Builtin,
/*
    ArraySubscript,
    Member,
    Paren,
    BitOffset,
    ExplicitCast,
    ImplicitCast,
*/
}

public type ExprBits struct {
    u32 : NumStmtBits;
    u32 kind : 8;
    u32 is_ctv : 1;
    u32 is_ctc : 1;
    u32 is_lvalue : 1;
}
public const u32 NumExprBits = NumStmtBits + 16;

public type Expr struct {
    Stmt stmt;
    SrcLoc loc;
} @(opaque)

public func void Expr.init(Expr* e, ExprKind k, SrcLoc loc, bool ctv, bool ctc, bool lvalue) @(inline) {
    e.stmt.init(StmtKind.Expr);
    e.stmt.exprBits.kind = k;
    e.stmt.exprBits.is_ctv = 1;
    e.stmt.exprBits.is_ctc = 1;
    e.stmt.exprBits.is_lvalue = 0;
    e.loc = loc;
}

// TEMP cast needed until Analyser fixed
public func ExprKind Expr.getKind(const Expr* e) @(inline) { return cast<ExprKind>(e.stmt.exprBits.kind); }

public func bool Expr.isCtv(const Expr* e) @(inline) { return e.stmt.exprBits.is_ctv; }

public func bool Expr.isCtc(const Expr* e) @(inline) { return e.stmt.exprBits.is_ctc; }

public func void Expr.dump(Expr* e) {
    switch (e.getKind()) {
    case ExprKind.BooleanLiteral:
        BooleanLiteral.print(cast<BooleanLiteral*>(e));
        break;
    case ExprKind.Builtin:
        BuiltinExpr.print(cast<BuiltinExpr*>(e));
        break;
    }
}


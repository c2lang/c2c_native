/* Copyright 2022 Bas van den Berg
*/

module ast;

import utils local;
import stdio;

public type ExprKind enum u8 {
    IntegerLiteral,
/*
    FloatLiteral,
*/
    BooleanLiteral,
    CharLiteral,
    StringLiteral,
    Nil,
    Identifier,
    Type,
    Call,
    InitList,
/*
    DesignatorInit,
*/
    BinaryOperator,
    UnaryOperator,
    Builtin,
    ArraySubscript,
    Member,
    Paren,
    BitOffset,
/*
    ExplicitCast,
    ImplicitCast,
*/
}

public type ExprBits struct {
    u32 : NumStmtBits;
    u32 kind : 8;
    u32 is_ctv : 1;
    u32 is_ctc : 1;
    u32 is_lvalue : 1;
}
public const u32 NumExprBits = NumStmtBits + 16;

public type Expr struct {
    Stmt stmt;
    SrcLoc loc;
    QualType qt;
} @(opaque)

public func void Expr.init(Expr* e, ExprKind k, SrcLoc loc, bool ctv, bool ctc, bool lvalue) @(inline) {
    e.stmt.init(StmtKind.Expr);
    e.stmt.exprBits.kind = k;
    e.stmt.exprBits.is_ctv = 1;
    e.stmt.exprBits.is_ctc = 1;
    e.stmt.exprBits.is_lvalue = 0;
    e.loc = loc;
    e.qt.ptr = 0;
}

public func Stmt* Expr.asStmt(Expr* e) @(inline) { return &e.stmt; }

// TEMP cast needed until Analyser fixed
public func ExprKind Expr.getKind(const Expr* e) @(inline) { return cast<ExprKind>(e.stmt.exprBits.kind); }

public func bool Expr.isCtv(const Expr* e) @(inline) { return e.stmt.exprBits.is_ctv; }

public func bool Expr.isCtc(const Expr* e) @(inline) { return e.stmt.exprBits.is_ctc; }

public func SrcLoc Expr.getLoc(const Expr* e) @(inline) { return e.loc; }

public func void Expr.dump(Expr* e) {
    StringBuffer* out = StringBuffer.create(10*4096);
    e.print(out, 0);
    stdio.printf("%s\n", out.data());
    out.free();
}

public func void Expr.print(const Expr* e, StringBuffer* out, u32 indent) {
    switch (e.getKind()) {
    case ExprKind.IntegerLiteral:
        IntegerLiteral.print(cast<IntegerLiteral*>(e), out, indent);
        break;
    case ExprKind.BooleanLiteral:
        BooleanLiteral.print(cast<BooleanLiteral*>(e), out, indent);
        break;
    case ExprKind.CharLiteral:
        CharLiteral.print(cast<CharLiteral*>(e), out, indent);
        break;
    case ExprKind.StringLiteral:
        StringLiteral.print(cast<StringLiteral*>(e), out, indent);
        break;
    case ExprKind.Nil:
        NilExpr.print(cast<NilExpr*>(e), out, indent);
        break;
    case ExprKind.Identifier:
        IdentifierExpr.print(cast<IdentifierExpr*>(e), out, indent);
        break;
    case ExprKind.Type:
        TypeExpr.print(cast<TypeExpr*>(e), out, indent);
        break;
    case ExprKind.Call:
        CallExpr.print(cast<CallExpr*>(e), out, indent);
        break;
    case ExprKind.InitList:
        InitListExpr.print(cast<InitListExpr*>(e), out, indent);
        break;
    case ExprKind.BinaryOperator:
        BinaryOperator.print(cast<BinaryOperator*>(e), out, indent);
        break;
    case ExprKind.UnaryOperator:
        UnaryOperator.print(cast<UnaryOperator*>(e), out, indent);
        break;
    case ExprKind.Builtin:
        BuiltinExpr.print(cast<BuiltinExpr*>(e), out, indent);
        break;
    case ExprKind.ArraySubscript:
        ArraySubscriptExpr.print(cast<ArraySubscriptExpr*>(e), out, indent);
        break;
    case ExprKind.Member:
        MemberExpr.print(cast<MemberExpr*>(e), out, indent);
        break;
    case ExprKind.Paren:
        ParenExpr.print(cast<ParenExpr*>(e), out, indent);
        break;
    case ExprKind.BitOffset:
        BitOffsetExpr.print(cast<BitOffsetExpr*>(e), out, indent);
        break;
    }
}


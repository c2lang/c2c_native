/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import src_loc local;
import string_buffer;

public type ForStmt struct @(opaque) {
    Stmt parent;
    SrcLoc loc;
    Stmt* init;
    Expr* cond;
    Expr* incr;
    Stmt* body;
}

public fn ForStmt* ForStmt.create(ast_context.Context* c, SrcLoc loc, Stmt* init_, Expr* cond, Expr* incr, Stmt* body) {
    ForStmt* s = c.alloc(sizeof(ForStmt));
    s.parent.init(StmtKind.For);
    s.loc = loc;
    s.init = init_;
    s.cond = cond;
    s.incr = incr;
    s.body = body;
#if AstStatistics
    Stats.addStmt(StmtKind.For, sizeof(ForStmt));
#endif
    return s;
}

fn Stmt* ForStmt.instantiate(ForStmt* s, Instantiator* inst) {
    Stmt* init2 = s.init ? s.init.instantiate(inst) : nil;
    Expr* cond2 = s.cond ? s.cond.instantiate(inst) : nil;
    Expr* incr2 = s.incr ? s.incr.instantiate(inst) : nil;
    Stmt* body2 = s.body ? s.body.instantiate(inst) : nil;
    return cast<Stmt*>(ForStmt.create(inst.c, s.loc, init2, cond2, incr2, body2));
}

public fn SrcLoc ForStmt.getLoc(const ForStmt* s) { return s.loc; }

public fn Stmt* ForStmt.getInit(const ForStmt* s) { return s.init; }
public fn Expr* ForStmt.getCond(const ForStmt* s) { return s.cond; }
public fn Expr* ForStmt.getIncr(const ForStmt* s) { return s.incr; }
public fn Stmt* ForStmt.getBody(const ForStmt* s) { return s.body; }

public fn Stmt** ForStmt.getInit2(ForStmt* s) { return s.init ? &s.init : nil; }
public fn Expr** ForStmt.getCond2(ForStmt* s) { return s.cond ? &s.cond : nil; }
public fn Expr** ForStmt.getIncr2(ForStmt* s) { return s.incr ? &s.incr : nil; }
//public fn Stmt** ForStmt.getBody2(ForStmt* s) { return s.body ? &s.body : nil; }

fn void ForStmt.print(const ForStmt* s, string_buffer.Buf* out, u32 indent) {
    s.parent.printKind(out, indent);
    out.newline();

    if (s.init) s.init.print(out, indent + 1);
    if (s.cond) s.cond.print(out, indent + 1);
    if (s.incr) s.incr.print(out, indent + 1);
    if (s.body) s.body.print(out, indent + 1);
}


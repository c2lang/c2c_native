/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context local;
import utils local;

// TEMP
import stdio local;

type FunctionDeclBits struct {
    u32 : NumDeclBits;
    u32 is_local : 1;
}

public type FunctionDecl struct {
    Decl decl;
    QualType rtype;
    CompoundStmt* body; // Q :tail allocate for interfaces?
} @(opaque)

public func FunctionDecl* FunctionDecl.create(Context* c, const char* name, SrcLoc loc, bool is_public, QualType rtype) @(inline) {
    FunctionDecl* d = c.alloc(sizeof(FunctionDecl));
    d.decl.init(DeclKind.Function, name, loc, is_public);
    d.body = nil;
    return d;
}

public func void FunctionDecl.setBody(FunctionDecl* d, CompoundStmt* body) @(inline) {
    d.body = body;
}

public func void FunctionDecl.print(const FunctionDecl* d) {
    // TODO use-stringbuffer ish
    printf("FunctionDecl");
    printf(" %s ", d.decl.name);
    printf("\n");
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import string;
import stdlib;

public type FunctionDeclList struct {
    u32 count;
    u32 capacity;
    FunctionDecl** decls;
}

public func void FunctionDeclList.init(FunctionDeclList* l) {
    string.memset(l, 0, sizeof(FunctionDeclList));
}

public func void FunctionDeclList.free(FunctionDeclList* l) {
    if (l.decls) stdlib.free(cast<void*>(l.decls));
}

public func void FunctionDeclList.add(FunctionDeclList* l, FunctionDecl* d) {
    if (l.count >= l.capacity) {
        l.capacity = (l.capacity == 0) ? 4 : l.capacity * 2;
        void* decls2 = stdlib.malloc(l.capacity * sizeof(FunctionDecl*));
        void* old = cast<void*>(l.decls);
        if (old) {
            string.memcpy(decls2, old, l.count * sizeof(FunctionDecl*));
            stdlib.free(old);
        }
        l.decls = decls2;
    }

    l.decls[l.count] = d;
    l.count++;
}

public func u32 FunctionDeclList.size(const FunctionDeclList* l) {
    return l.count;
}

public func FunctionDecl** FunctionDeclList.getDecls(const FunctionDeclList* l) {
    return l.decls;
}


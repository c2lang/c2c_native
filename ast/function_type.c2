/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;

public type FunctionType struct {
    Type parent;
    FunctionDecl* decl;
} @(opaque)

public func FunctionType* FunctionType.create(ast_context.Context* c, FunctionDecl* decl) @(inline) {
    FunctionType* t = c.alloc(sizeof(FunctionType));
    t.parent.init(TypeKind.Function);
    t.decl = nil;
    t.decl = decl;

    t.parent.setCanonicalType(QualType.init(&t.parent));
#if AstStatistics
    Stats.addType(TypeKind.Function, sizeof(FunctionType));
#endif
    return t;
}

public func FunctionDecl* FunctionType.getDecl(const FunctionType* t) @(inline) { return t.decl; }

public func Type* FunctionType.asType(FunctionType* t) @(inline) { return &t.parent; }

func void FunctionType.print(const FunctionType* t, string_buffer.Buf* out) {
    t.decl.printType(out);
}

public func void FunctionType.fullPrint(const FunctionType* t, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.print("FunctionType [%p] %s\n", t, t.decl.asDecl().getName());
}


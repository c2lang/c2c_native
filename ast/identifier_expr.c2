/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

public type IdentifierKind enum u8 {
    Unresolved,
    Module,
    Function,
    Type,
    Var,
    EnumConstant,
    StructMember,
    StructFunction,
    Label,
}

const char*[] identifierKind_names = {
    "Unresolved",
    "Module",
    "Function",
    "Type",
    "Var",
    "EnumConstant",
    "StructMember",
    "StructFunction",
    "Label",
}

static_assert(elemsof(IdentifierKind), elemsof(identifierKind_names));

public type IdentifierExprBits struct {
    u32 : NumExprBits;
    u32 ref_type : 1;
    u32 kind : 4;   // IdentifierKind
    // TODO add Type, Var, Module, etc
}

public type IdentifierExpr struct {
    Expr expr;
    union {
        const char* name;
        Decl* decl;     // set during analysis
    }
} @(opaque)

public func IdentifierExpr* IdentifierExpr.create(ast_context.Context* c, SrcLoc loc, const char* name) @(inline) {
    IdentifierExpr* e = c.alloc(sizeof(IdentifierExpr));
    e.expr.init(ExprKind.Identifier, loc, 0, 0, 0);
    e.name = name;
    return e;
}

public func Expr* IdentifierExpr.asExpr(IdentifierExpr* e) @(inline) { return &e.expr; }

public func void IdentifierExpr.print(const IdentifierExpr* e, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.color(col_Expr);
    out.add("IdentifierExpr");
    if (e.expr.stmt.identifierExprBits.ref_type) {
        out.print(" ref: %s\n", e.decl.getName());
    } else {
        out.print(" name: %s\n", e.name);
    }
}


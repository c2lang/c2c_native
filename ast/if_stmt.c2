/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;

type IfStmtBits struct {
    u32 : NumStmtBits;
    u32 has_else : 1;
}

public type IfStmt struct {
    Stmt parent;
    Stmt* cond;
    Stmt* then;
    Stmt*[0] else_stmt; // tail-allocated
} @(opaque)

public func IfStmt* IfStmt.create(ast_context.Context* c, Stmt* cond, Stmt* then, Stmt* else_stmt) @(inline) {
    u32 size = sizeof(IfStmt);
    if (else_stmt) size += sizeof(Stmt*);

    IfStmt* s = c.alloc(size);
    s.parent.init(StmtKind.If);
    s.cond = cond;
    s.then = then;

    if (else_stmt) {
        s.parent.ifStmtBits.has_else = 1;
        s.else_stmt[0] = else_stmt;
    }
#if AstStatistics
    Stats.addStmt(StmtKind.If, size);
#endif
    return s;
}

func Stmt* IfStmt.instantiate(IfStmt* s, Instantiator* inst) {
    Stmt* cond2 = s.cond.instantiate(inst);
    Stmt* then2 = s.then.instantiate(inst);
    Stmt* else2 = nil;
    if (s.parent.ifStmtBits.has_else) else2 = s.else_stmt[0].instantiate(inst);

    return cast<Stmt*>(IfStmt.create(inst.c, cond2, then2, else2));
}

public func Stmt* IfStmt.getCond(const IfStmt* s) @(inline) { return s.cond; }
public func Stmt** IfStmt.getCond2(IfStmt* s) @(inline) { return &s.cond; }

public func Stmt* IfStmt.getThen(const IfStmt* s) @(inline) { return s.then; }

public func Stmt* IfStmt.getElse(const IfStmt* s) {
    if (s.parent.ifStmtBits.has_else) return s.else_stmt[0];
    return nil;
}

func void IfStmt.print(const IfStmt* s, string_buffer.Buf* out, u32 indent) {
    s.parent.printKind(out, indent);
    out.add1('\n');

    s.cond.print(out, indent + 1);
    if (s.then) s.then.print(out, indent + 1);
    if (s.parent.ifStmtBits.has_else) s.else_stmt[0].print(out, indent + 1);
}


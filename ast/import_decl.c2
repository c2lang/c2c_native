/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

type ImportDeclBits struct {
    u32 : NumDeclBits;
    u32 is_local : 1;
//    u32 own_component : 1;
}

public type ImportDecl struct {
    Decl parent;
    u32 alias_idx;
    SrcLoc alias_loc;
} @(opaque)

public func ImportDecl* ImportDecl.create(ast_context.Context* c,
                                          const char* name,
                                          SrcLoc loc,
                                          const char* alias_name,
                                          SrcLoc alias_loc,
                                          bool is_local) @(inline)
{
    ImportDecl* d = c.alloc(sizeof(ImportDecl));
    d.parent.init(DeclKind.Import, name, loc, true, QualType.init0(), nil);
    d.parent.importDeclBits.is_local = is_local;
    d.alias_idx = name2idx(alias_name);
    d.alias_loc = alias_loc;
    return d;
}

public func Decl* ImportDecl.asDecl(ImportDecl* d) { return &d.parent; }

public func u32 ImportDecl.getAliasNameIdx(const ImportDecl* d) @(inline) { return d.alias_idx; }

public func u32 ImportDecl.getImportNameIdx(const ImportDecl* d) @(inline) {
    if (d.alias_idx) return d.alias_idx;
    return d.parent.name_idx;
}

public func SrcLoc ImportDecl.getAliasLoc(const ImportDecl* d) @(inline) { return d.alias_loc; }

public func void ImportDecl.setModule(ImportDecl* d, Module* mod) { d.parent.mod = mod; }

func void ImportDecl.print(const ImportDecl* d, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.color(col_Decl);
    out.add("ImportDecl");
    d.parent.printName(out);

    if (d.parent.importDeclBits.is_local) {
        out.color(col_Attr);
        out.add(" local");
    }
    if (d.alias_idx) {
        out.color(col_Attr);
        out.add(" as ");
        out.color(col_Value);
        out.print("%s", idx2name(d.alias_idx));
    }
    d.parent.printUsed(out);
    out.add(" module=");
    if (d.parent.mod) {
        out.add(d.parent.mod.getName());
    } else {
        out.add("<nil>");
    }
    out.add("\n");
}


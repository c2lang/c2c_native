/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

type ImportDeclBits struct {
    u32 : NumDeclBits;
    u32 is_local : 1;
}

public type ImportDecl struct {
    Decl decl;
    const char* alias_name;
    SrcLoc alias_loc;
} @(opaque)

public func ImportDecl* ImportDecl.create(ast_context.Context* c, const char* name, SrcLoc loc, const char* alias_name, SrcLoc alias_loc, bool is_local) @(inline) {
    ImportDecl* d = c.alloc(sizeof(ImportDecl));
    d.decl.init(DeclKind.Import, name, loc, true);
    d.decl.importDeclBits.is_local = is_local;
    d.alias_name = alias_name;
    d.alias_loc = alias_loc;
    return d;
}

public func const char* ImportDecl.getAliasName(const ImportDecl* d) @(inline) {
    return d.alias_name;
}

public func SrcLoc ImportDecl.getAliasLoc(const ImportDecl* d) @(inline) {
    return d.alias_loc;
}


public func void ImportDecl.print(const ImportDecl* d, string_buffer.Buf* out, u32 indent) {
    d.decl.printKind(out, indent, "ImportDecl");
    d.decl.printName(out);

    if (d.decl.importDeclBits.is_local) {
        out.color(col_Attr);
        out.add(" local");
    }
    if (d.alias_name) {
        out.color(col_Attr);
        out.add(" as ");
        out.color(col_Value);
        out.print("%s", d.alias_name);
    }
    d.decl.printUsed(out);
    out.add("\n");
}


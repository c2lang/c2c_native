/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import src_loc local;
import string;

public type InitListExprBits struct {
    u32 : NumExprBits;
    u32 num_values : 32 - NumExprBits;
}

public type InitListExpr struct {
    Expr parent;
    SrcLoc right;
    Expr*[0] values; // tail-allocated
} @(opaque)

public func InitListExpr* InitListExpr.create(ast_context.Context* c, SrcLoc left, SrcLoc right, Expr** values, u32 num_values) @(inline) {
    u32 size = sizeof(InitListExpr) + num_values * sizeof(Expr*);
    InitListExpr* e = c.alloc(size);
    e.parent.init(ExprKind.InitList, left, 0, 0, ValType.RValue);
    e.parent.parent.initListExprBits.num_values = num_values;
    e.right = right;
    if (num_values) {
        string.memcpy(cast<void*>(e.values), cast<void*>(values), num_values * sizeof(Expr*));
    }
#if AstStatistics
    Stats.addExpr(ExprKind.InitList, size);
#endif
    return e;
}

public func u32 InitListExpr.getNumValues(const InitListExpr* e) @(inline) {
    return e.parent.parent.initListExprBits.num_values;
}

public func Expr** InitListExpr.getValues(InitListExpr* e) {
    return e.values;
}

func void InitListExpr.print(const InitListExpr* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.add1('\n');

    for (u32 i=0; i<e.getNumValues(); i++) {
        e.values[i].print(out, indent + 2);
    }
}


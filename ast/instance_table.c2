/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import string;
import stdlib;

type TemplateInstance struct {
    QualType qt;
    FunctionDecl* instance;
}

type TemplateFunction struct {
    FunctionDecl* fd;
    u16 count;
    u16 capacity;
    TemplateInstance* instances;
}

func void TemplateFunction.init(TemplateFunction* f, FunctionDecl* fd) {
    f.fd = fd;
    f.count = 0;
    f.capacity = 0;
    f.instances = nil;
    f.resize(2);
}

func void TemplateFunction.resize(TemplateFunction* f, u16 capacity) {
    f.capacity = capacity;
    TemplateInstance* inst2 = stdlib.malloc(capacity* sizeof(TemplateInstance));
    if (f.count) {
        string.memcpy(inst2, f.instances, f.count * sizeof(TemplateInstance));
        stdlib.free(f.instances);
    }
    f.instances = inst2;
}

func u16 TemplateFunction.add(TemplateFunction* f, QualType qt, FunctionDecl* instance) {
    if (f.count == f.capacity) f.resize(f.capacity * 2);

    u16 idx = f.count;
    TemplateInstance* ti = &f.instances[idx];
    f.count++;
    ti.qt = qt;
    ti.instance = instance;
    return idx;
}

func FunctionDecl* TemplateFunction.find(const TemplateFunction* f, QualType qt) {
    for (u32 i=0; i<f.count; i++) {
        const TemplateInstance* ti = &f.instances[i];
        if (ti.qt.ptr == qt.ptr) return ti.instance;
    }
    return nil;
}

func FunctionDecl* TemplateFunction.get(const TemplateFunction* f, u32 idx) {
    return f.instances[idx].instance;
}

type InstanceTable struct {
    u32 count;
    u32 capacity;
    TemplateFunction* funcs;
}

// Note: name must be allocated in target StringPool
func void InstanceTable.init(InstanceTable* t) {
    t.count = 0;
    t.capacity = 0;
    t.funcs = nil;
}

func void InstanceTable.free(InstanceTable* t) {
    for (u32 i=0; i<t.count; i++) {
        stdlib.free(t.funcs[i].instances);
    }
    stdlib.free(t.funcs);
}

func void InstanceTable.resize(InstanceTable* t, u32 capacity) {
    t.capacity = capacity;
    TemplateFunction* funcs2 = stdlib.malloc(capacity * sizeof(TemplateFunction));
    if (t.count) {
        string.memcpy(funcs2, t.funcs, t.count * sizeof(TemplateFunction));
        stdlib.free(t.funcs);
    }
    t.funcs = funcs2;
}

func TemplateFunction* InstanceTable.findFunc(const InstanceTable* t, FunctionDecl* fd) {
    for (u32 i=0; i<t.count; i++) {
        TemplateFunction* fi = &t.funcs[i];
        if (fi.fd == fd) return fi;
    }
    return nil;
}

func FunctionDecl* InstanceTable.find(const InstanceTable* t, FunctionDecl* fd, QualType qt) {
    const TemplateFunction* fi = t.findFunc(fd);
    if (fi) return fi.find(qt);
    return nil;
}

func FunctionDecl* InstanceTable.get(const InstanceTable* t, FunctionDecl* fd, u32 idx) {
    const TemplateFunction* fi = t.findFunc(fd);
    assert(fi);
    return fi.get(idx);
}

func u16 InstanceTable.add(InstanceTable* t, FunctionDecl* fd, QualType qt, FunctionDecl* instance) {
    TemplateFunction* fi = t.findFunc(fd);
    if (!fi) {
        if (t.count == t.capacity) {
            if (t.capacity == 0) t.capacity = 2;
            t.resize(t.capacity * 2);
        }
        fi = &t.funcs[t.count];
        t.count++;
        fi.init(fd);
    }

    return fi.add(qt, instance);
}

func void InstanceTable.visit(const InstanceTable* t, ast.FunctionDecl* fd, TemplateVisitor visitor, void* arg) {
    TemplateFunction* fi = t.findFunc(fd);
    if (!fi) return;
    for (u32 i=0; i<fi.count; i++) {
        visitor(arg, fi.instances[i].instance, i+1);
    }
}


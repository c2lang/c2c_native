/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

public type IntegerLiteralBits struct {
    u32 : NumExprBits;
    //u32 radix : 4;
    u32 is_signed : 1;
}

public type IntegerLiteral struct {
    Expr parent;
    u64 val;
} @(opaque)

public func IntegerLiteral* IntegerLiteral.create(ast_context.Context* c, SrcLoc loc, u64 val) @(inline) {
    IntegerLiteral* i = c.alloc(sizeof(IntegerLiteral));
    i.parent.init(ExprKind.IntegerLiteral, loc, 1, 1, 0);
    i.val = val;
    return i;
}

public func IntegerLiteral* IntegerLiteral.createUnsignedConstant(ast_context.Context* c, SrcLoc loc, u64 val, QualType qt) @(inline) {
    IntegerLiteral* i = IntegerLiteral.create(c, loc, val);
    Expr* ie = cast<Expr*>(i);
    ie.setCtv();
    ie.setCtc();
    ie.setType(qt);
    return i;
}

public func IntegerLiteral* IntegerLiteral.createSignedConstant(ast_context.Context* c, SrcLoc loc, i64 val, QualType qt) @(inline) {
    IntegerLiteral* i = IntegerLiteral.create(c, loc, cast<u64>(val));
    i.parent.parent.integerLiteralBits.is_signed = 1;
    Expr* ie = cast<Expr*>(i);
    ie.setCtv();
    ie.setCtc();
    ie.setType(qt);
    return i;
}

public func u64 IntegerLiteral.getValue(const IntegerLiteral* e) @(inline) { return e.val; }

func void IntegerLiteral.print(const IntegerLiteral* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent, "IntegerLiteral");
    e.parent.printTypeBits(out);
    out.color(col_Value);
    if (e.parent.parent.integerLiteralBits.is_signed) {
        out.print(" %ld", cast<i64>(e.val));
    } else {
        out.print(" %lu", e.val);
    }
    out.add("\n");
}

func void IntegerLiteral.printLiteral(const IntegerLiteral* e, string_buffer.Buf* out) {
    out.print("%lu", e.val);
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;

import stdlib;
import string;

public type Module struct {
    u32 name_idx;
    bool used;
    ModuleType* mt;

    ast.AST** files;
    u32 num_files;
    u32 max_files;

    SymbolTable symbols;
} @(opaque)

// Note: name must be allocated in target StringPool
public func Module* Module.create(ast_context.Context* c, const char* name) {
    Module* m = stdlib.calloc(1, sizeof(Module));
    m.mt = ModuleType.create(c, m);
    m.name_idx = name2idx(name);
    m.resizeFiles(1);
    m.symbols.init(16);
    return m;
}

public func void Module.free(Module* m) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].free();
    }
    stdlib.free(cast<void*>(m.files));
    m.symbols.free();
    stdlib.free(m);
}

public func void Module.setUsed(Module* m) { m.used = true; }
public func bool Module.isUsed(const Module* m) { return m.used; }

public func const SymbolTable* Module.getSymbols(const Module* m) { return &m.symbols; }

public func ModuleType* Module.getType(const Module* m) { return m.mt; }

public type ASTVisitor func void (void* arg, AST* d);

public func void Module.visitASTs(const Module* m, ASTVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        visitor(arg, m.files[i]);
    }
}

public func void Module.visitImports(const Module* m, ImportVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitImports(visitor, arg);
    }
}

public func void Module.visitStructFunctions(const Module* m, FunctionVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitStructFunctions(visitor, arg);
    }
}

public func void Module.visitFunctions(const Module* m, FunctionVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitFunctions(visitor, arg);
    }
}

public func void Module.visitTypeDecls(const Module* m, TypeDeclVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitTypeDecls(visitor, arg);
    }
}

public func void Module.visitVarDecls(const Module* m, VarDeclVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitVarDecls(visitor, arg);
    }
}

public func void Module.visitDecls(const Module* m, DeclVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitDecls(visitor, arg);
    }
}


public func Decl* Module.findType(const Module* m, u32 name_idx) {
    Decl* result = nil;
    for (u32 i=0; i<m.num_files; i++) {
        result = m.files[i].findType(name_idx);
        if (result) break;
    }
    return result;
}

public func const char* Module.getName(const Module* m) @(inline) { return idx2name(m.name_idx); }

public func u32 Module.getNameIdx(const Module* m) @(inline) { return m.name_idx; }

func void Module.resizeFiles(Module* m, u32 cap) {
    m.max_files = cap;
    void* buf = stdlib.malloc(m.max_files * sizeof(ast.AST*));
    if (m.files) {
        void* old = cast<void*>(m.files);
        string.memcpy(buf, old, m.num_files * sizeof(ast.AST*));
        stdlib.free(old);
    }
    m.files = buf;
}

// Note: filename must be allocated in StringPool
public func ast.AST* Module.add(Module* m, const char* filename) {
    ast.AST* a = ast.AST.create(filename, m);

    if (m.num_files == m.max_files) m.resizeFiles(m.max_files * 2);

    m.files[m.num_files] = a;
    m.num_files++;
    return a;
}

public func void Module.addSymbol(Module* m, u32 name_idx, ast.Decl* d) {
    m.symbols.add(name_idx, d);
}

public func ast.Decl* Module.findSymbol(const Module* m, u32 name_idx) {
    return m.symbols.find(name_idx);
}

public func void Module.info(const Module* m, string_buffer.Buf* out) {
    out.print("  module %s\n", idx2name(m.name_idx));
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].info(out);
    }
#if 0
    out.print("    Symbol: (%u)\n", m.num_symbols);
    for (u32 i=0; i<m.num_symbols; i++) {
        out.print("      %s\n", idx2name(m.symbols[i]));
    }
#endif
}

public func void Module.print(const Module* m, string_buffer.Buf* out) {
    out.print("------ module %s (used %d) ------\n", idx2name(m.name_idx), m.used);
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].print(out);
    }
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;

public type ModuleType struct {
    Type parent;
    Module* mod;
} @(opaque)

// Note: non-public since only Module.create will create a ModuleType
func ModuleType* ModuleType.create(ast_context.Context* c, Module* mod) @(inline) {
    ModuleType* t = c.alloc(sizeof(ModuleType));
    t.parent.init(TypeKind.Module);
    t.mod = mod;
    t.parent.setCanonicalType(QualType.init2(&t.parent));
#if AstStatistics
    Stats.addType(TypeKind.Module, sizeof(ModuleType));
#endif
    return t;
}

public func Type* ModuleType.asType(ModuleType* t) @(inline) { return &t.parent; }

public func Module* ModuleType.getModule(const ModuleType* t) {
    return t.mod;
}

func void ModuleType.print(const ModuleType* t, string_buffer.Buf* out) {
    out.print("Module %s", t.mod.getName());
}

func void ModuleType.debugPrint(const ModuleType* t, string_buffer.Buf* out) {
    out.print("ModuleType %s\n", t.mod.getName());
}

public func void ModuleType.fullPrint(const ModuleType* t, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.print("ModuleType %s\n", t.mod.getName());
}


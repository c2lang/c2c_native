/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;

public type ModuleType struct {
    Type parent;
    Module* mod;
} @(opaque)

// Note: non-public since only Module.create will create a ModuleType
fn ModuleType* ModuleType.create(ast_context.Context* c, Module* mod) {
    ModuleType* t = c.alloc(sizeof(ModuleType));
    t.parent.init(TypeKind.Module);
    t.mod = mod;
    t.parent.setCanonicalType(QualType.init(&t.parent));
#if AstStatistics
    Stats.addType(TypeKind.Module, sizeof(ModuleType));
#endif
    return t;
}

public fn Type* ModuleType.asType(ModuleType* t) { return &t.parent; }

public fn Module* ModuleType.getModule(const ModuleType* t) {
    return t.mod;
}

fn void ModuleType.print(const ModuleType* t, string_buffer.Buf* out) {
    out.print("Module %s", t.mod.getName());
}

public fn void ModuleType.fullPrint(const ModuleType* t, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.print("ModuleType %s\n", t.mod.getName());
}


/* Copyright 2022-2024 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;

public type NilExpr struct @(opaque) {
    Expr parent;
}

public fn NilExpr* NilExpr.create(ast_context.Context* c, SrcLoc loc) {
    NilExpr* e = c.alloc(sizeof(NilExpr));
    e.parent.init(ExprKind.Nil, loc, 1, 1, 0, ValType.RValue);
    e.parent.setType(getVoidPtr());
#if AstStatistics
    Stats.addExpr(ExprKind.Nil, sizeof(NilExpr));
#endif
    return e;
}

fn void NilExpr.print(const NilExpr* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.newline();
}

fn void NilExpr.printLiteral(const NilExpr*, string_buffer.Buf* out) {
    out.add("nil");
}


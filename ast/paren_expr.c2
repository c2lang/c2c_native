/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;

public type ParenExpr struct {
    Expr parent;
    Expr* inner;
} @(opaque)

public func ParenExpr* ParenExpr.create(ast_context.Context* c, SrcLoc loc, Expr* inner) @(inline) {
    ParenExpr* e = c.alloc(sizeof(ParenExpr));
    e.parent.init(ExprKind.Paren, loc, 0, 0, 0, ValType.NValue);
    e.inner = inner;
#if AstStatistics
    Stats.addExpr(ExprKind.Paren, sizeof(ParenExpr));
#endif
    return e;
}

func Expr* ParenExpr.instantiate(ParenExpr* e, Instantiator* inst) {
    return cast<Expr*>(ParenExpr.create(inst.c, e.parent.loc, e.inner.instantiate(inst)));
}

public func Expr* ParenExpr.getInner(const ParenExpr* e) @(inline) { return e.inner; }

public func Expr** ParenExpr.getInner2(ParenExpr* e) @(inline) { return &e.inner; }

func void ParenExpr.print(const ParenExpr* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.newline();

    e.inner.print(out, indent + 1);
}

func void ParenExpr.printLiteral(const ParenExpr* e, string_buffer.Buf* out) {
    out.add1('(');
    e.inner.printLiteral(out);
    out.add1('(');
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import src_loc local;

public type ParenExpr struct {
    Expr parent;
    Expr* inner;
} @(opaque)

public func ParenExpr* ParenExpr.create(ast_context.Context* c, SrcLoc loc, Expr* inner) @(inline) {
    ParenExpr* e = c.alloc(sizeof(ParenExpr));
    e.parent.init(ExprKind.Paren, loc, 0, 0, ValType.NValue);
    e.inner = inner;
#if AstStatistics
    Stats.addExpr(ExprKind.Paren, sizeof(ParenExpr));
#endif
    return e;
}

public func Expr* ParenExpr.getInner(const ParenExpr* e) @(inline) { return e.inner; }

public func Expr** ParenExpr.getInner2(ParenExpr* e) @(inline) { return &e.inner; }

func void ParenExpr.print(const ParenExpr* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.add1('\n');

    e.inner.print(out, indent + 2);
}

func void ParenExpr.printLiteral(const ParenExpr* e, string_buffer.Buf* out) {
    out.add1('(');
    e.inner.printLiteral(out);
    out.add1('(');
}


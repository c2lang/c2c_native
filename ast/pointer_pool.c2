/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;

import string local;
import stdlib local;

/*
    This pool is used to lookup pointers to a certain type. It keeps 4 variants:
        *
        const*
        volatile*
        const volatile*
*/

type Slot struct {
    Type*[4] ptrs;  // Note: quals is index
}

type PointerPool struct {
    u32 count;
    u32 capacity;
    Slot* slots;

    ast_context.Context* context;
}

func void PointerPool.init(PointerPool* p, ast_context.Context* c) {
    p.count = 0;
    p.capacity = 0;
    p.slots = nil;
    p.context = c;
    p.resize(64);
}

func void PointerPool.clear(PointerPool* p) {
    free(p.slots);
    p.count = 0;
    p.capacity = 0;
    p.slots = nil;
}

func void PointerPool.resize(PointerPool* p, u32 cap) {
    p.capacity = cap;
    Slot* slots2 = malloc(p.capacity * sizeof(Slot));
    if (p.count) {
        memcpy(slots2, p.slots, p.count * sizeof(Slot));
        free(p.slots);
    }
    p.slots = slots2;
}

func Type* PointerPool.getPointer(PointerPool* p, QualType qt) {
    Type* t = qt.getTypeOrNil();
    assert(t);

    const u32 ptr_idx = t.ptr_idx;
    Slot* slot = &p.slots[ptr_idx];
    if (ptr_idx == 0) {
        u32 slot_idx = p.count;
        if (slot_idx == p.capacity) p.resize(p.capacity * 2);

        slot = &p.slots[slot_idx];
        memset(slot, 0, sizeof(Slot));
        t.ptr_idx = slot_idx;
        p.count++;
    }

    u32 quals = qt.getQuals();
    Type* ptr = slot.ptrs[quals];
    if (ptr) return ptr;

    ptr = cast<Type*>(PointerType.create(p.context, qt));
    slot.ptrs[quals] = ptr;
    return ptr;
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;

import stdio;

u32 bb_count;
u32 bb_reuse;

public type PointerType struct {
    Type parent;
    QualType inner;
} @(opaque)

// Note: non-public, since all pointers should be created via ast.getPointerType()
func PointerType* PointerType.create(ast_context.Context* c, QualType inner) @(inline) {
#if 0
    Type* i = inner.getTypeOrNil();
    Type* ptr = i.getPtrType();
    if (ptr) {
        bb_reuse++;
        stdio.printf("PTR OLD %p  %u | %u\n", i, bb_reuse, bb_count);
        return cast<PointerType*>(ptr);
    }
#endif
    PointerType* t = c.alloc(sizeof(PointerType));
    t.parent.init(TypeKind.Pointer);
    t.inner = inner;
#if 0
    i.setPtrType(t);
    bb_count++;
    stdio.printf("PTR NEW %p  %u | %u\n", i, bb_reuse, bb_count);
    i.dump();
#endif
#if AstStatistics
    stats.pointerCount++;
#endif
    return t;
}

public func Type* PointerType.asType(PointerType* t) @(inline) { return &t.parent; }

public func QualType PointerType.getInner(const PointerType* t) { return t.inner; }

func void PointerType.print(const PointerType* t, string_buffer.Buf* out) {
    t.inner.print(out);
    out.add("*");
}

func void PointerType.debugPrint(const PointerType* t, string_buffer.Buf* out) {
    t.inner.debugPrint(out);
    out.add("*");
}

public func void PointerType.fullPrint(const PointerType* t, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.print("PointerType [%p]\n", t);
    t.inner.fullPrint(out, indent + 2);
}

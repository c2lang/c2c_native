/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;

public type PointerType struct {
    Type parent;
    QualType inner;
} @(opaque)

// Note: non-public, since all pointers should be created via ast.getPointerType()
func PointerType* PointerType.create(ast_context.Context* c, QualType inner) @(inline) {
    PointerType* t = c.alloc(sizeof(PointerType));
    t.parent.init(TypeKind.Pointer);
    t.inner = inner;
#if AstStatistics
    Stats.addType(TypeKind.Pointer, sizeof(PointerType));
#endif
    return t;
}

public func Type* PointerType.asType(PointerType* t) @(inline) { return &t.parent; }

public func QualType PointerType.getInner(const PointerType* t) {
    return t.inner;
}

func void PointerType.print(const PointerType* t, string_buffer.Buf* out) {
    t.inner.printInner(out, false, true, true);
    out.add1('*');
}

public func void PointerType.fullPrint(const PointerType* t, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.print("PointerType [%p]\n", t);
    t.inner.fullPrint(out, indent + 1);
}

/* Copyright 2022 Bas van den Berg
*/

module ast;

import utils;
import string_buffer;
import stdio;

public const u32 QualType_Const    = 0x1;
public const u32 QualType_Volatile = 0x2;
public const u32 QualType_Mask     = 0x3;

public type QualType struct {
    usize ptr;
}

public func QualType QualType.init(Type* t, u32 qualifiers) @(inline) {
    QualType qt = { cast<usize>(t) | (qualifiers & QualType_Mask) }
    return qt;
}

public func QualType QualType.init2(Type* t) @(inline) {
    QualType qt = { cast<usize>(t) }
    return qt;
}

public func QualType QualType.init0() @(inline) {
    QualType qt = { 0 }
    return qt;
}

public func Type* QualType.getType(QualType* qt) @(inline) {
    Type* t = qt.getTypeOrNil();
    // assert(t);
    return t;
}

public func Type* QualType.getTypeOrNil(const QualType* qt) @(inline) {
    usize temp = qt.ptr & ~QualType_Mask;
    return cast<Type*>(temp);
    // TODO fix in C2C
    //return cast<Type*>(qt.ptr & ~QualType_Mask);
}

public func u32 QualType.getQualifiers(const QualType* qt) @(inline) {
    return qt.ptr & QualType_Mask;
}

public func void QualType.dump(const QualType* qt) {
    Type* t = qt.getTypeOrNil();
    if (t) {
        t.dump();
    } else {
        stdio.printf("QualType(nil)\n");
    }
}

// TODO remove
func void QualType.debugPrint(const QualType* qt, string_buffer.Buf* out) {
    const Type* t = qt.getTypeOrNil();
    if (t) {
        u32 quals = qt.getQualifiers();
        if (!t) out.add(" type=nil");
        if (quals & QualType_Const) out.add(" const");
        if (quals & QualType_Volatile) out.add(" volatile");
        t.debugPrint(out);
    } else {
        out.color(col_Error);
        out.add("NIL");
        out.color(col_Normal);
    }
}

public func void QualType.printQuoted(const QualType* qt, string_buffer.Buf* out) {
    out.color(col_Type);
    out.add("'");
    qt.print(out);
    out.color(col_Type);
    out.add("'");
}

public func void QualType.print(const QualType* qt, string_buffer.Buf* out) {
    const Type* t = qt.getTypeOrNil();
    if (t) {
        u32 quals = qt.getQualifiers();
        if (quals) out.color(col_Type);
        if (quals & QualType_Const) out.add("const ");
        if (quals & QualType_Volatile) out.add("volatile ");
        t.print(out);
        // TODO canonicalType '=> ..'
    } else {
        out.color(col_Error);
        out.add("??");
    }
}

/* Copyright 2022 Bas van den Berg
*/

module ast;

import utils;
import stdio;

public const u32 QualType_Const    = 0x1;
public const u32 QualType_Volatile = 0x2;
public const u32 QualType_Mask     = 0x3;

public type QualType struct {
    usize ptr;
}

public func QualType QualType.init(Type* t, u32 qualifiers) @(inline) {
    QualType qt = { cast<usize>(t) | qualifiers & QualType_Mask }
    return qt;
}

public func QualType QualType.init2(Type* t) @(inline) {
    QualType qt = { cast<usize>(t) }
    return qt;
}

public func Type* QualType.getType(QualType* qt) @(inline) {
    Type* t = qt.getTypeOrNil();
    // assert(t);
    return t;
}

public func Type* QualType.getTypeOrNil(QualType* qt) @(inline) {
    usize temp = qt.ptr & ~QualType_Mask;
    return cast<Type*>(temp);
    // TODO fix in C2C
    //return cast<Type*>(qt.ptr & ~QualType_Mask);
}

public func u32 QualType.getQualifiers(const QualType* qt) @(inline) {
    return qt.ptr & QualType_Mask;
}

public func void QualType.dump(const QualType* qt) {
    Type* t = qt.getTypeOrNil();
    if (t) {
        t.dump();
    } else {
        stdio.printf("QualType(nil)\n");
    }
}

public func void QualType.print(const QualType* qt, utils.StringBuffer* out, u32 indent) {
    out.indent(indent);
    out.add("QualType\n");
    // TODO
}
// TODO add helper functions

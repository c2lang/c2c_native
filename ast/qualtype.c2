/* Copyright 2022 Bas van den Berg
*/

module ast;

import color;
import utils;
import string_buffer;
import stdio local;

public const u32 QualType_Const    = 0x1;
public const u32 QualType_Volatile = 0x2;
public const u32 QualType_Mask     = 0x3;

public type QualType struct {
    usize ptr;
}

public func QualType QualType.init(Type* t) @(inline) {
    QualType qt = { cast<usize>(t) }
    return qt;
}

public func void QualType.set(QualType* qt, Type* t) @(inline) {
    qt.ptr = cast<usize>(t);
}

public func void QualType.setConst(QualType* qt) @(inline) {
    qt.ptr |= QualType_Const;
}

public func bool QualType.isConst(QualType* qt) @(inline) {
    return (qt.ptr & QualType_Const) != 0;
}

public func bool QualType.isVolatile(QualType* qt) @(inline) {
    return (qt.ptr & QualType_Volatile) != 0;
}

public func void QualType.setVolatile(QualType* qt) @(inline) {
    qt.ptr |= QualType_Volatile;
}

public func u32 QualType.getQuals(const QualType* qt) @(inline) {
    return qt.ptr & QualType_Mask;
}

public func void QualType.copyQuals(QualType* qt, QualType other) @(inline) {
    qt.ptr &= ~QualType_Mask;   // clear old flags
    qt.ptr |= (other.ptr & QualType_Mask);
}

public func void QualType.clearQuals(QualType* qt) @(inline) {
    qt.ptr &= ~QualType_Mask;   // clear old flags
}

public func bool QualType.isConstant(const QualType* qt) {
    QualType canon = qt.getCanonicalType();
    const Type* t = canon.getTypeOrNil();

    if (canon.isConst()) return true;

    if (t.getKind() == TypeKind.Array) {
        // constant if either array or element is const
        const ArrayType* at = cast<ArrayType*>(t);
        canon = at.getElemType();
        return canon.isConstant();
    }
    return false;
}

public func bool QualType.isValid(const QualType* qt) @(inline) { return qt.ptr != 0; }

public func bool QualType.isInvalid(const QualType* qt) @(inline) { return qt.ptr == 0; }

public func Type* QualType.getType(const QualType* qt) @(inline) {
    usize t = qt.ptr & ~QualType_Mask;
    assert(t);
    return cast<Type*>(t);
}

public func Type* QualType.getTypeOrNil(const QualType* qt) @(inline) {
    usize temp = qt.ptr & ~QualType_Mask;
    return cast<Type*>(temp);
    // TODO fix in C2C
    //return cast<Type*>(qt.ptr & ~QualType_Mask);
}

public func bool QualType.hasCanonicalType(const QualType* qt) @(inline) {
    const Type* t = qt.getType();
    return t.canonicalType.ptr != 0;
}

public func QualType QualType.getCanonicalType(const QualType* qt) @(inline) {
    const Type* t = qt.getType();
    QualType canon = t.canonicalType;
    // TODO BB why is this needed?
    canon.copyQuals(*qt);
    return canon;
}

public func void QualType.setCanonicalType(QualType* qt, QualType canon) @(inline) {
    Type* t = qt.getType();
    t.setCanonicalType(canon);
}

public func u32 QualType.getIndex(QualType* qt) {
    const Type* t = qt.getType();
    return t.getIndex();
}

public func u32 QualType.getAlignment(QualType* qt) {
    const Type* t = qt.getType();
    return t.getAlignment();
}

public func u32 QualType.getSize(QualType* qt) {
    const Type* t = qt.getType();
    return t.getSize();
}

public func bool QualType.isBuiltinType(const QualType* qt) {
    return qt.getTypeOrNil().isBuiltinType();
}

public func bool QualType.isArrayType(const QualType* qt) {
    return qt.getTypeOrNil().isArrayType();
}

public func bool QualType.isStructType(const QualType* qt) {
    return qt.getTypeOrNil().isStructType();
}

public func bool QualType.isPointerType(const QualType* qt) {
    return qt.getTypeOrNil().isPointerType();
}

public func bool QualType.isVoidType(const QualType* qt) {
    return qt.getTypeOrNil().isVoidType();
}

// NOTE: doesn't check if kind is ok
public func BuiltinType* QualType.getBuiltinType(const QualType* qt) {
    return cast<BuiltinType*>(qt.getTypeOrNil());
}

// NOTE: doesn't check if kind is ok
public func StructType* QualType.getStructType(const QualType* qt) {
    return cast<StructType*>(qt.getTypeOrNil());
}

// NOTE: doesn't check if kind is ok
public func PointerType* QualType.getPointerType(const QualType* qt) {
    return cast<PointerType*>(qt.getTypeOrNil());
}

// NOTE: doesn't check if kind is ok
public func ArrayType* QualType.getArrayType(const QualType* qt) {
    return cast<ArrayType*>(qt.getTypeOrNil());
}

// NOTE: doesn't check if kind is ok
public func FunctionType* QualType.getFunctionTypeOrNil(const QualType* qt) {
    const Type* t = qt.getTypeOrNil();
    if (t && t.getKind() == TypeKind.Function) {
        return cast<FunctionType*>(t);
    }
    return nil;
}


// Note: does not check if Type is valid, only if Type is StructType
public func StructType* QualType.getStructTypeOrNil(const QualType* qt) {
    const Type* t = qt.getTypeOrNil();
    if (t && t.getKind() == TypeKind.Struct) {
        return cast<StructType*>(t);
    }
    return nil;
}

// Note: does not check if Type is valid, only if Type is ArrayType
public func ArrayType* QualType.getArrayTypeOrNil(const QualType* qt) {
    const Type* t = qt.getTypeOrNil();
    if (t && t.getKind() == TypeKind.Array) {
        return cast<ArrayType*>(t);
    }
    return nil;
}

// Note: does not check if Type is valid, only if Type is EnumType
public func EnumType* QualType.getEnumTypeOrNil(const QualType* qt) {
    const Type* t = qt.getTypeOrNil();
    if (t.getKind() == TypeKind.Enum) {
        return cast<EnumType*>(t);
    }
    return nil;
}

public func bool QualType.needsCtvInit(const QualType* qt) {
    QualType canon = qt.getCanonicalType();
    const Type* t = canon.getTypeOrNil();

    if (!t) {
        stdio.printf("MISSING CANONICAL\n");
        qt.dump_full();
        return false;
    }
    assert(t);

    switch (t.getKind()) {
    case Builtin:   return true;
    case Pointer:   return false;
    case Array:     return true;
    case Struct:    return true;
    case Enum:      return true;
    case Function:  return false;
    case Alias:     return false;   // is never a canonical type
    case Module:    return false;
    }
    return false;
}

public func const char* QualType.diagName(const QualType* qt, bool showQualifiers = true) {
    local char[4][128] msgs;
    local u32 msg_id = 0;
    char* msg = msgs[msg_id];
    msg_id = (msg_id + 1) % elemsof(msgs);

    string_buffer.Buf* buf = string_buffer.create_static(128, false, msg);
    // TODO need to create another print?

    //buf.add1('\'');
    qt.print(buf);
    //buf.add1('\'');
    buf.free();

    return msg;
}

public func void QualType.dump(const QualType* qt) {
    string_buffer.Buf* out = string_buffer.create(512, utils.useColor());
    Type* t = qt.getTypeOrNil();
    if (t) {
        u32 quals = qt.getQuals();
        if (quals) out.color(col_Type);
        if (quals & QualType_Const) out.add("const ");
        if (quals & QualType_Volatile) out.add("volatile ");
        t.print(out);
    } else {
        out.add("QualType(nil)\n");
    }
    out.color(color.Normal);
    stdio.puts(out.data());
    out.free();
}

public func void QualType.dump_full(const QualType* qt) {
    string_buffer.Buf* out = string_buffer.create(512, utils.useColor());
    qt.fullPrint(out, 0);
    stdio.puts(out.data());
    out.free();
}

// TODO remove
func void QualType.debugPrint(const QualType* qt, string_buffer.Buf* out) {
    const Type* t = qt.getTypeOrNil();
    if (t) {
        u32 quals = qt.getQuals();
        if (!t) out.add(" type=nil");
        if (quals & QualType_Const) out.add(" const");
        if (quals & QualType_Volatile) out.add(" volatile");
        t.debugPrint(out);
    } else {
        out.color(col_Error);
        out.add("NIL");
        out.color(col_Normal);
    }
}

public func void QualType.printQuoted(const QualType* qt, string_buffer.Buf* out) {
    out.color(col_Type);
    //out.add1('\'');
    qt.print(out);
    out.color(col_Type);
    //out.add1('\'');
}

public func void QualType.print(const QualType* qt, string_buffer.Buf* out) {
    const Type* t = qt.getTypeOrNil();
    if (t) {
        u32 quals = qt.getQuals();
        if (quals) out.color(col_Type);
        if (quals & QualType_Const) out.add("const ");
        if (quals & QualType_Volatile) out.add("volatile ");
        t.print(out);

        QualType qt2 = qt.getCanonicalType();
        const Type* canon = qt2.getTypeOrNil();
        if (canon && canon != t) {
            out.add(" => ");
            qt2.print(out);
        }
    } else {
        out.color(col_Error);
        out.add("??");
    }
}

public func void QualType.fullPrint(const QualType* qt, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.add("QualType");
    u32 quals = qt.getQuals();
    if (quals & QualType_Const) out.add(" const");
    if (quals & QualType_Volatile) out.add(" volatile");
    const Type* t = qt.getTypeOrNil();
    if (t) {
        out.add1('\n');
        t.fullPrint(out, indent + 2);
    }
    else out.add(" type=nil\n");
}


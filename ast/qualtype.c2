/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import color;
import string_buffer;
import stdio local;

public const usize QualType_Const    = 0x1;
public const usize QualType_Volatile = 0x2;
public const usize QualType_Mask     = 0x3;

public type QualType struct {
    usize ptr;
}

public func QualType QualType.init(Type* t) @(inline) {
    QualType qt = { cast<usize>(t) }
    return qt;
}

public func void QualType.set(QualType* qt, Type* t) @(inline) {
    qt.ptr = cast<usize>(t);
}

public func void QualType.setConst(QualType* qt) @(inline) {
    qt.ptr |= QualType_Const;
}

public func void QualType.unsetConst(QualType* qt) @(inline) {
    qt.ptr &= ~QualType_Const;
}

public func bool QualType.isConst(QualType* qt) @(inline) {
    return (qt.ptr & QualType_Const) != 0;
}

public func bool QualType.isVolatile(QualType* qt) @(inline) {
    return (qt.ptr & QualType_Volatile) != 0;
}

public func void QualType.setVolatile(QualType* qt) @(inline) {
    qt.ptr |= QualType_Volatile;
}

public func u32 QualType.getQuals(const QualType* qt) @(inline) {
    return qt.ptr & QualType_Mask;
}

public func void QualType.copyQuals(QualType* qt, QualType other) @(inline) {
    qt.ptr &= ~QualType_Mask;   // clear old flags
    qt.ptr |= (other.ptr & QualType_Mask);
}

public func void QualType.clearQuals(QualType* qt) @(inline) {
    qt.ptr &= ~QualType_Mask;   // clear old flags
}

public func bool QualType.isConstant(const QualType* qt) {
    QualType canon = qt.getCanonicalType();
    const Type* t = canon.getTypeOrNil();

    if (canon.isConst()) return true;

    if (t.getKind() == TypeKind.Array) {
        // constant if either array or element is const
        const ArrayType* at = cast<ArrayType*>(t);
        canon = at.getElemType();
        return canon.isConstant();
    }
    return false;
}

public func bool QualType.isValid(const QualType* qt) @(inline) { return qt.ptr != 0; }

public func bool QualType.isInvalid(const QualType* qt) @(inline) { return qt.ptr == 0; }

// Note: assumes type is valid
public func bool QualType.isScalar(const QualType* qt) {
    QualType canon = qt.getCanonicalType();
    const Type* t = canon.getTypeOrNil();
    if (t.isBuiltinType()) {
        BuiltinType* bi = cast<BuiltinType*>(t);
        // bool and arithmetic types are allowed
        return !bi.isVoid();
    }
    if (canon.isPointer()) return true;
    if (canon.isFunction()) return true;
    if (canon.isEnum()) return true;

    return false;
}

public func Type* QualType.getType(const QualType* qt) @(inline) {
    usize t = qt.ptr & ~QualType_Mask;
    assert(t);
    return cast<Type*>(t);
}

public func Type* QualType.getTypeOrNil(const QualType* qt) @(inline) {
    usize temp = qt.ptr & ~QualType_Mask;
    return cast<Type*>(temp);
}

public func bool QualType.hasCanonicalType(const QualType* qt) @(inline) {
    const Type* t = qt.getType();
    return t.canonicalType.ptr != 0;
}

public func QualType QualType.getCanonicalType(const QualType* qt) @(inline) {
    const Type* t = qt.getType();
    QualType canon = t.canonicalType;
    canon.copyQuals(*qt); // TODO fix in canonicalType, this should not be needed
    return canon;
}

public func void QualType.setCanonicalType(QualType* qt, QualType canon) @(inline) {
    Type* t = qt.getType();
    t.setCanonicalType(canon);
}

// Note: should be valid and PointerType
public func bool QualType.isConstPtr(QualType* qt) @(inline) {
    PointerType* pt = qt.getPointerType();
    return pt.inner.isConst();
}

public func TypeKind QualType.getKind(QualType* qt) {
    Type* t = qt.getType();
    return t.getKind();
}

public func u32 QualType.getIndex(QualType* qt) {
    const Type* t = qt.getType();
    return t.getIndex();
}

public func u32 QualType.getAlignment(QualType* qt) {
    const Type* t = qt.getType();
    return t.getAlignment();
}

public func u32 QualType.getSize(QualType* qt) {
    const Type* t = qt.getType();
    return t.getSize();
}

public func bool QualType.isBuiltin(const QualType* qt) {
    return qt.getTypeOrNil().isBuiltinType();
}

public func bool QualType.isArray(const QualType* qt) {
    return qt.getTypeOrNil().isArrayType();
}

public func bool QualType.isStruct(const QualType* qt) {
    return qt.getTypeOrNil().isStructType();
}

// Note: ignores const/volatile flags
public func bool QualType.isCharPointer(const QualType* qt) {
    // Note: we cannot compare with g_char_ptr since const char* is different!
    if (!qt.isPointer()) return false;
    const PointerType* pt = qt.getPointerType();
    QualType inner = pt.getInner();
    return inner.isChar();
}

public func bool QualType.isPointer(const QualType* qt) {
    return qt.getTypeOrNil().isPointerType();
}

public func bool QualType.isFunction(const QualType* qt) {
    return qt.getTypeOrNil().isFunctionType();
}

public func bool QualType.isEnum(const QualType* qt) {
    return qt.getTypeOrNil().isEnumType();
}

public func bool QualType.isVoid(const QualType* qt) {
    return qt.getTypeOrNil().isVoidType();
}

// NOTE: doesn't check if kind is ok
public func BuiltinType* QualType.getBuiltinType(const QualType* qt) {
    return cast<BuiltinType*>(qt.getTypeOrNil());
}

public func BuiltinType* QualType.getBuiltinTypeOrNil(const QualType* qt) {
    const Type* t = qt.getTypeOrNil();
    if (t && t.getKind() == TypeKind.Builtin) return cast<BuiltinType*>(t);
    return nil;
}

// NOTE: doesn't check if kind is ok
public func StructType* QualType.getStructType(const QualType* qt) {
    return cast<StructType*>(qt.getTypeOrNil());
}

// NOTE: doesn't check if kind is ok
public func PointerType* QualType.getPointerType(const QualType* qt) {
    return cast<PointerType*>(qt.getTypeOrNil());
}

// NOTE: doesn't check if kind is ok
public func ArrayType* QualType.getArrayType(const QualType* qt) {
    return cast<ArrayType*>(qt.getTypeOrNil());
}

// NOTE: doesn't check if kind is ok
public func FunctionType* QualType.getFunctionTypeOrNil(const QualType* qt) {
    const Type* t = qt.getTypeOrNil();
    if (t && t.getKind() == TypeKind.Function) return cast<FunctionType*>(t);
    return nil;
}

public func StructType* QualType.getStructTypeOrNil(const QualType* qt) {
    const Type* t = qt.getTypeOrNil();
    if (t && t.getKind() == TypeKind.Struct) return cast<StructType*>(t);
    return nil;
}

public func PointerType* QualType.getPointerTypeOrNil(const QualType* qt) {
    const Type* t = qt.getTypeOrNil();
    if (t && t.getKind() == TypeKind.Pointer) return cast<PointerType*>(t);
    return nil;
}

public func ArrayType* QualType.getArrayTypeOrNil(const QualType* qt) {
    const Type* t = qt.getTypeOrNil();
    if (t && t.getKind() == TypeKind.Array) return cast<ArrayType*>(t);
    return nil;
}

public func EnumType* QualType.getEnumType(const QualType* qt) {
    return cast<EnumType*>(qt.getTypeOrNil());
}

// Note: does not check if Type is valid, only if Type is EnumType
public func EnumType* QualType.getEnumTypeOrNil(const QualType* qt) {
    const Type* t = qt.getTypeOrNil();
    if (t.getKind() == TypeKind.Enum) return cast<EnumType*>(t);
    return nil;
}

public func bool QualType.isChar(const QualType* qt) {
    const Type* t = qt.getTypeOrNil();
    if (t.getKind() != TypeKind.Builtin) return false;
    const BuiltinType* bi = cast<BuiltinType*>(t);
    return bi.isChar();
}

public func bool QualType.isInt8(const QualType* qt) {
    const Type* t = qt.getTypeOrNil();
    if (t.getKind() != TypeKind.Builtin) return false;
    const BuiltinType* bi = cast<BuiltinType*>(t);
    return bi.isInt8();
}

public func bool QualType.needsCtvInit(const QualType* qt) {
    QualType canon = qt.getCanonicalType();
    const Type* t = canon.getTypeOrNil();

    if (!t) {
        stdio.printf("MISSING CANONICAL\n");
        qt.dump_full();
        return false;
    }
    assert(t);

    switch (t.getKind()) {
    case Builtin:   return true;
    case Pointer:   return false;
    case Array:     return true;
    case Struct:    return true;
    case Enum:      return true;
    case Function:  return false;
    case Alias:     return false;   // is never a canonical type
    case Module:    return false;
    }
    return false;
}

public func const char* QualType.diagName(const QualType* qt) {
    local char[4][128] msgs;
    local u32 msg_id = 0;
    char* msg = msgs[msg_id];
    msg_id = (msg_id + 1) % elemsof(msgs);

    string_buffer.Buf* buf = string_buffer.create_static(128, false, msg);
    // TODO need to create another print?

    //buf.add1('\'');
    qt.printInner(buf, true, true, true);
    //buf.add1('\'');
    buf.free();

    return msg;
}

public func const char* QualType.diagNameBare(const QualType* qt) {
    local char[4][128] msgs;
    local u32 msg_id = 0;
    char* msg = msgs[msg_id];
    msg_id = (msg_id + 1) % elemsof(msgs);

    string_buffer.Buf* buf = string_buffer.create_static(128, false, msg);

    qt.printInner(buf, true, false, true);
    buf.free();

    return msg;
}

public func void QualType.dump(const QualType* qt) {
    string_buffer.Buf* out = string_buffer.create(512, g_use_color, 2);
    qt.printInner(out, false, true, false);
    out.color(color.Normal);
    stdio.puts(out.data());
    out.free();
}

public func void QualType.dump_full(const QualType* qt) {
    string_buffer.Buf* out = string_buffer.create(512, g_use_color, 1);
    qt.fullPrint(out, 0);
    stdio.puts(out.data());
    out.free();
}

public func void QualType.printQuoted(const QualType* qt, string_buffer.Buf* out) {
    out.color(col_Type);
    //out.add1('\'');
    qt.printInner(out, true, true, true);
    out.color(col_Type);
    //out.add1('\'');
}

public func void QualType.print(const QualType* qt, string_buffer.Buf* out) {
    qt.printInner(out, true, true, true);
}

func void QualType.printInner(const QualType* qt, string_buffer.Buf* out,  bool printCanon, bool printModifiers, bool print_error) {
    // output examples: const char*,  const char const *,
    const Type* t = qt.getTypeOrNil();
    if (t) {
        u32 quals = qt.getQuals();

        if (qt.isPointer()) {
            t.print(out);
            if (printModifiers) {
                if (quals & QualType_Const) out.add(" const");
                if (quals & QualType_Volatile) out.add(" volatile");
            }
        } else {
            if (printModifiers) {
                if (quals) out.color(col_Type);
                if (quals & QualType_Const) out.add("const ");
                if (quals & QualType_Volatile) out.add("volatile ");
            }
            t.print(out);
        }

        if (printCanon) {
            QualType qt2 = qt.getCanonicalType();
            const Type* canon = qt2.getTypeOrNil();
            if (canon && canon != t) {
                out.add(" => ");
                qt2.printInner(out, false, true, true);
            }
        }
    } else {
        if (print_error) {
            out.color(col_Error);
            out.add("??");
        } else {
            out.add("QualType(nil)");
        }
    }
}

public func void QualType.fullPrint(const QualType* qt, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.add("QualType");
    u32 quals = qt.getQuals();
    if (quals & QualType_Const) out.add(" const");
    if (quals & QualType_Volatile) out.add(" volatile");
    const Type* t = qt.getTypeOrNil();
    if (t) {
        out.newline();
        t.fullPrint(out, indent + 1);
    }
    else out.add(" type=nil\n");
}


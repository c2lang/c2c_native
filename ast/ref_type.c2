/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils;

public type RefTypeBits struct {
    u32 : NumTypeBits;
    u32 have_prefix : 1;
}

public type RefType struct {
    Type parent;
    IdentifierExpr* ref;
    IdentifierExpr*[0] prefixRef; // tail-allocated
} @(opaque)

public func RefType* RefType.create(ast_context.Context* c, IdentifierExpr* prefix, IdentifierExpr* ref) @(inline) {
    u32 size = sizeof(RefType);
    if (prefix) size += sizeof(Expr*);
    RefType* t = c.alloc(size);
    t.parent.init(TypeKind.Ref);
    t.ref = ref;

    if (prefix) {
        t.parent.refTypeBits.have_prefix;
        t.prefixRef[0] = prefix;
    }
    return t;
}

public func Expr* RefType.getRef(const RefType* t) @(inline) {
    return t.ref;
}

public func Expr** RefType.getRef2(RefType* t) @(inline) {
    return &t.ref;
}

public func void RefType.print(const RefType* t, string_buffer.Buf* out) {
    const Decl* d = t.ref.getDecl();
    if (d) {
    } else {
        out.color(col_Error);
        if (t.parent.refTypeBits.have_prefix) {
            t.prefixRef[0].printLiteral(out);
            out.add(".");
        }
        t.ref.printLiteral(out);
        out.add(" => ??");
    }
}

func void RefType.debugPrint(const RefType* t, string_buffer.Buf* out) {
    // TODO
}


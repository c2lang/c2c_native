/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

type ReturnStmtBits struct {
    u32 : NumStmtBits;
    u32 has_value : 1;
}

public type ReturnStmt struct {
    Stmt parent;
    SrcLoc loc;
    Expr*[0] value; // tail-allocated, dependent on returnStmtBits.has_value
} @(opaque)

public func ReturnStmt* ReturnStmt.create(ast_context.Context* c, SrcLoc loc, Expr* value) @(inline) {
    u32 size = sizeof(ReturnStmt);
    if (value) size += sizeof(Expr*);

    ReturnStmt* r = c.alloc(size);
    r.parent.init(StmtKind.Return);
    r.loc = loc;

    if (value) {
        r.parent.returnStmtBits.has_value = 1;
        r.value[0] = value;
    }
    return r;
}

public func void ReturnStmt.print(const ReturnStmt* r, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.color(col_Stmt);
    out.add("ReturnStmt\n");
    if (r.parent.returnStmtBits.has_value) {
        r.value[0].print(out, indent + 2);
    }
}

public func Expr* ReturnStmt.getValue(const ReturnStmt* r) {
    if (r.parent.returnStmtBits.has_value) return r.value[0];
    return nil;
}

public func Expr** ReturnStmt.getValue2(ReturnStmt* r) {
    if (r.parent.returnStmtBits.has_value) return &r.value[0];
    return nil;
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

#if AstStatistics
import string;
import stdio local;

type Stat struct {
    u32 count;
    u32 size;
}

type Stats struct {
    Stat[elemsof(TypeKind)] types;
    Stat[elemsof(ExprKind)] exprs;
    Stat[elemsof(StmtKind)] stmts;
    Stat[elemsof(DeclKind)] decls;
}

Stats stats;

func void Stats.reset(Stats* s) {
    string.memset(s, 0, sizeof(Stats));
}

func void Stats.addType(TypeKind kind, u32 size) {
    stats.types[kind].count++;
    stats.types[kind].size += size;
}

func void Stats.addExpr(ExprKind kind, u32 size) {
    stats.exprs[kind].count++;
    stats.exprs[kind].size += size;
}

func void Stats.addStmt(StmtKind kind, u32 size) {
    stats.stmts[kind].count++;
    stats.stmts[kind].size += size;
}

func void Stats.addDecl(DeclKind kind, u32 size) {
    stats.decls[kind].count++;
    stats.decls[kind].size += size;
}

func void Stats.dump(const Stats* s) {
    printf("----------------------------\n");

    printf("--- Types ---\n");
    u32 typesTotal = 0;
    u32 typesCount = 0;
    for (u32 i=0; i<elemsof(TypeKind); i++) {
        const Stat* ss = &s.types[i];
        printf("  %20s  %6u  %7u\n", typeKind_names[i], ss.count, ss.size);
        typesCount += ss.count;
        typesTotal += ss.size;
    }
    printf("  %20s  %6u  %7u\n", "total", typesCount, typesTotal);

    printf("--- Expressions ---\n");
    u32 exprTotal = 0;
    u32 exprCount = 0;
    for (u32 i=0; i<elemsof(ExprKind); i++) {
        const Stat* ss = &s.exprs[i];
        printf("  %20s  %6u  %7u\n", exprKind_names[i], ss.count, ss.size);
        exprCount += ss.count;
        exprTotal += ss.size;
    }
    printf("  %20s  %6u  %7u\n", "total", exprCount, exprTotal);

    printf("--- Statements ---\n");
    u32 stmtTotal = 0;
    u32 stmtCount = 0;
    for (u32 i=0; i<elemsof(StmtKind); i++) {
        const Stat* ss = &s.stmts[i];
        printf("  %20s  %6u  %7u\n", stmtKind_names[i], ss.count, ss.size);
        stmtCount += ss.count;
        stmtTotal += ss.size;
    }
    printf("  %20s  %6u  %7u\n", "total", stmtCount, stmtTotal);

    printf("--- Decls ---\n");
    u32 declTotal = 0;
    u32 declCount = 0;
    for (u32 i=0; i<elemsof(DeclKind); i++) {
        const Stat* ss = &s.decls[i];
        printf("  %20s  %6u  %7u\n", declKind_names[i], ss.count, ss.size);
        declCount += ss.count;
        declTotal += ss.size;
    }
    printf("  %20s  %6u  %7u\n", "total", declCount, declTotal);

    printf("--- Total ---\n");
    u32 totalCount = typesCount + exprCount + stmtCount + declCount;
    u32 totalSize = typesTotal + exprTotal + stmtTotal + declTotal;
    printf("  %20s  %6u  %7u\n", "objects", totalCount, totalSize);

    printf("----------------------------\n");
}

#endif

/* Copyright 2022 Bas van den Berg
*/

module ast;

#if AstStatistics
import string;
import stdio local;

type AstStats struct {
    // Types
    u32 typeCount;
    u32 pointerCount;
    u32 aliasCount;
    u32 builtinCount;
    u32 enumCount;
    u32 arrayCount;
    u32 functionTypeCount;
    u32 structCount;
    u32 moduleCount;

    u32 arraySize;

    // Expr
    u32 exprCount;
    u32 integerLitCount;
    u32 booleanCount;
    u32 charLitCount;
    u32 stringLitCount;
    u32 identifierCount;

    // TODO order like Expr.c2
    u32 builtinExprCount;
    u32 builtinExprSize;
    u32 arraySubCount;
    u32 binaryOpCount;
    u32 unaryOpCount;
    u32 callCount;
    u32 callSize;
    u32 memberCount;

    // Stmts
    u32 stmtCount; // includes Expr, subtrace those in dump()

    // Decls
    u32 declCount;
    u32 varDeclCount;
    u32 varDeclSize;
    u32 functionDeclCount;
    u32 functionDeclSize;
    u32 enumTypeDeclCount;
    u32 enumTypeDeclSize;
    u32 enumConstantCount;
    u32 enumConstantSize;
}

func void AstStats.reset(AstStats* s) {
    string.memset(s, 0, sizeof(AstStats));
}

func void AstStats.dump(const AstStats* s) {
    u32 all = 0;
    printf("----------------------------\n");
    printf("--- Types ---\n");
    u32 total = 0;
    total += stats.pointerCount * sizeof(PointerType);
    total += stats.functionTypeCount * sizeof(FunctionType);
    total += stats.moduleCount * sizeof(ModuleType);
    total += stats.structCount * sizeof(StructType);
    total += stats.arraySize;
    total += stats.enumCount * sizeof(EnumType);
    total += stats.aliasCount * sizeof(AliasType);
    total += stats.builtinCount * sizeof(BuiltinType);
    // TODO count tail-allocators as wel (need total count in create functions)
    printf("   types      %5u   %6u\n", stats.typeCount, total);
    printf("   function   %5u   %6u\n", stats.functionTypeCount, stats.functionTypeCount * sizeof(FunctionType));
    printf("   pointers   %5u   %6u\n", stats.pointerCount, stats.pointerCount * sizeof(PointerType));
    printf("   modules    %5u   %6u\n", stats.moduleCount, stats.moduleCount * sizeof(ModuleType));
    printf("   structs    %5u   %6u\n", stats.structCount, stats.structCount * sizeof(StructType));
    printf("   array      %5u   %6u\n", stats.arrayCount, stats.arraySize);
    printf("   enum       %5u   %6u\n", stats.enumCount, stats.enumCount * sizeof(EnumType));
    printf("   alias      %5u   %6u\n", stats.aliasCount, stats.aliasCount * sizeof(AliasType));
    printf("   builtins   %5u   %6u\n", stats.builtinCount, stats.builtinCount * sizeof(BuiltinType));

    all += total;
    printf("--- Expressions ---\n");
    total = 0;
    total += stats.integerLitCount * sizeof(IntegerLiteral);
    total += stats.booleanCount * sizeof(BooleanLiteral);
    total += stats.charLitCount * sizeof(CharLiteral);
    total += stats.stringLitCount * sizeof(StringLiteral);
    total += stats.identifierCount * sizeof(IdentifierExpr);
    total += stats.builtinExprSize;
    total += stats.arraySubCount * sizeof(ArraySubscriptExpr);
    total += stats.binaryOpCount * sizeof(BinaryOperator);
    total += stats.unaryOpCount * sizeof(UnaryOperator);
    total += stats.callSize;
    total += stats.memberCount * sizeof(MemberExpr);
    printf("   expr       %5u   %6u\n", stats.exprCount, total);
    printf("   boolean    %5u   %6u\n", stats.booleanCount, stats.booleanCount * sizeof(BooleanLiteral));
    printf("   char       %5u   %6u\n", stats.charLitCount, stats.charLitCount * sizeof(CharLiteral));
    printf("   string     %5u   %6u\n", stats.stringLitCount, stats.stringLitCount * sizeof(StringLiteral));
    printf("   identifier %5u   %6u\n", stats.identifierCount, stats.identifierCount * sizeof(IdentifierExpr));
    printf("   integer    %5u   %6u\n", stats.integerLitCount, stats.integerLitCount * sizeof(IntegerLiteral));
    printf("   builtin    %5u   %6u\n", stats.builtinExprCount, stats.builtinExprSize);
    printf("   arraysub   %5u   %6u\n", stats.arraySubCount, stats.arraySubCount * sizeof(ArraySubscriptExpr));
    printf("   binaryOp   %5u   %6u\n", stats.binaryOpCount, stats.binaryOpCount * sizeof(BinaryOperator));
    printf("   unaryOp    %5u   %6u\n", stats.unaryOpCount, stats.unaryOpCount * sizeof(UnaryOperator));
    printf("   calls      %5u   %6u\n", stats.callCount, stats.callSize);
    printf("   member     %5u   %6u\n", stats.memberCount, stats.memberCount * sizeof(MemberExpr));

    all += total;
    printf("--- Statements ---\n");
    total = 0;
    printf("   stmts      %5u   %6u\n", stats.stmtCount - stats.exprCount, total);

    all += total;
    printf("--- Decls ---\n");
    total = 0;
    total += stats.varDeclSize;
    total += stats.functionDeclSize;
    total += stats.enumTypeDeclSize;
    total += stats.enumConstantSize;
    printf("   decls      %5u   %6u\n", stats.declCount, total);
    printf("   vardecl    %5u   %6u\n", stats.varDeclCount, stats.varDeclSize);
    printf("   funcdecl   %5u   %6u\n", stats.functionDeclCount, stats.functionDeclSize);
    printf("   enumdecl   %5u   %6u\n", stats.enumTypeDeclCount, stats.enumTypeDeclSize);
    printf("   enumconst  %5u   %6u\n", stats.enumConstantCount, stats.enumConstantSize);

    all += total;

    printf(" TOTAL %u\n", all);
    printf("----------------------------\n");
}

AstStats stats;
#endif

module ast;

import ast_context local;

public type StmtKind enum u8 {
    Return,
    Expr,
    If,
/*
    While,
    Do,
    For,
    Switch,
    SSwitch,
    Case,
    Default,
    Break,
    Continue,
    Fallthrough,
    Label,
    Goto,
    Compound,
    Decl,
    Asm,
*/
}

public type StmtBits struct {
    u32 kind : 8;
}
public const u32 NumStmtBits = 8;

public type Stmt struct {
    union {
        StmtBits stmtBits;
        ReturnStmtBits returnStmtBits;
        ExprBits exprBits;
        BuiltinExprBits builtinExprBits;
        BooleanLiteralBits booleanLiteralBits;
        u32 bits;
    }
} @(opaque)

// TEMP cast needed until Analyser fixed
public func StmtKind Stmt.getKind(const Stmt* s) @(inline) { return cast<StmtKind>(s.stmtBits.kind); }

func void Stmt.init(Stmt* s, StmtKind k) @(inline) {
    s.bits = 0;
    s.stmtBits.kind = k;
}

public func void Stmt.dump(const Stmt* s) {
    switch (s.getKind()) {
    case StmtKind.Return:
        ReturnStmt.print(cast<ReturnStmt*>(s));
        break;
    case StmtKind.Expr:
        Expr.dump(cast<Expr*>(s));
        break;
    case StmtKind.If:
        // TODO
        break;
    }
}


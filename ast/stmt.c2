/* Copyright 2022 Bas van den Berg
*/

module ast;

import utils;
import string_buffer;
import stdio;

public type StmtKind enum u8 {
    Return,
    Expr,
    If,
    While,
    Do,
    For,
    Switch,
/*
    SSwitch,
*/
    Case,
    Default,
    Break,
    Continue,
    Fallthrough,
    Label,
    Goto,
    Compound,
    Decl,
/*
    Asm,
*/
    Assert,
}

public type StmtBits struct {
    u32 kind : 8;
}
public const u32 NumStmtBits = 8;

public type Stmt struct {
    union {
        StmtBits stmtBits;
        ReturnStmtBits returnStmtBits;
        SwitchStmtBits switchStmtBits;
        CaseStmtBits caseStmtBits;
        DefaultStmtBits defaultStmtBits;
        CompoundStmtBits compoundStmtBits;

        ExprBits exprBits;
        IfStmtBits ifStmtBits;
        BuiltinExprBits builtinExprBits;
        BooleanLiteralBits booleanLiteralBits;
        CharLiteralBits charLiteralBits;
        IdentifierExprBits identifierExprBits;
        UnaryOperatorBits unaryOperatorBits;
        BinaryOperatorBits binaryOperatorBits;
        CallExprBits callExprBits;
        InitListExprBits initListExprBits;
        ImplicitCastBits implicitCastBits;
        u32 bits;
    }
} @(opaque)

func void Stmt.init(Stmt* s, StmtKind k) @(inline) {
    s.bits = 0;
    s.stmtBits.kind = k;
}

// TEMP cast needed until Analyser fixed
public func StmtKind Stmt.getKind(const Stmt* s) @(inline) { return cast<StmtKind>(s.stmtBits.kind); }

public func void Stmt.dump(const Stmt* s) {
    string_buffer.Buf* out = string_buffer.create(10*4096, utils.useColor());
    s.print(out, 0);
    stdio.puts(out.data());
    out.free();
}

func void Stmt.print(const Stmt* s, string_buffer.Buf* out, u32 indent) {
    switch (s.getKind()) {
    case StmtKind.Return:
        ReturnStmt.print(cast<ReturnStmt*>(s), out, indent);
        break;
    case StmtKind.Expr:
        Expr.print(cast<Expr*>(s), out, indent);
        break;
    case StmtKind.If:
        IfStmt.print(cast<IfStmt*>(s), out, indent);
        break;
    case StmtKind.While:
        WhileStmt.print(cast<WhileStmt*>(s), out, indent);
        break;
    case StmtKind.Do:
        DoStmt.print(cast<DoStmt*>(s), out, indent);
        break;
    case StmtKind.For:
        ForStmt.print(cast<ForStmt*>(s), out, indent);
        break;
    case StmtKind.Switch:
        SwitchStmt.print(cast<SwitchStmt*>(s), out, indent);
        break;
    case StmtKind.Case:
        CaseStmt.print(cast<CaseStmt*>(s), out, indent);
        break;
    case StmtKind.Default:
        DefaultStmt.print(cast<DefaultStmt*>(s), out, indent);
        break;
    case StmtKind.Break:
        BreakStmt.print(cast<BreakStmt*>(s), out, indent);
        break;
    case StmtKind.Continue:
        ContinueStmt.print(cast<ContinueStmt*>(s), out, indent);
        break;
    case StmtKind.Fallthrough:
        FallthroughStmt.print(cast<FallthroughStmt*>(s), out, indent);
        break;
    case StmtKind.Label:
        LabelStmt.print(cast<LabelStmt*>(s), out, indent);
        break;
    case StmtKind.Goto:
        GotoStmt.print(cast<GotoStmt*>(s), out, indent);
        break;
    case StmtKind.Compound:
        CompoundStmt.print(cast<CompoundStmt*>(s), out, indent);
        break;
    case StmtKind.Decl:
        DeclStmt.print(cast<DeclStmt*>(s), out, indent);
        break;
    case StmtKind.Assert:
        AssertStmt.print(cast<AssertStmt*>(s), out, indent);
        break;
    }
}

func void Stmt.printKind(const Stmt* s, string_buffer.Buf* out, u32 indent, const char* kind_) {
    out.indent(indent);
    out.color(col_Stmt);
    out.add(kind_);
}


/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;

public type StringLiteral struct {
    Expr parent;
    u32 value;
    // Note: 4 bytes padding here on 64-bit systems
} @(opaque)

public func StringLiteral* StringLiteral.create(ast_context.Context* c, SrcLoc loc, u32 value, u32 len) {
    StringLiteral* e = c.alloc(sizeof(StringLiteral));
    e.parent.init(ExprKind.StringLiteral, loc, 0, 1, 0, ValType.LValue);
    e.value = value;
#if AstStatistics
    Stats.addExpr(ExprKind.StringLiteral, sizeof(StringLiteral));
#endif
    e.parent.setType(getStringType(len));
    return e;
}

public func const char* StringLiteral.getText(const StringLiteral* e) {
    return idx2name(e.value);
}

public func void StringLiteral.printLiteral(const StringLiteral* e, string_buffer.Buf* out) {
    out.print("\"%s\"", idx2name(e.value));
}

func void StringLiteral.print(const StringLiteral* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.space();
    out.color(col_Value);
    e.printLiteral(out);
    out.newline();
}


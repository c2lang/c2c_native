/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import src_loc local;

public type StringLiteral struct {
    Expr parent;
    u32 value;
    // Note: 4 bytes padding here on 64-bit systems
} @(opaque)

public func StringLiteral* StringLiteral.create(ast_context.Context* c, SrcLoc loc, u32 value, u32 len) @(inline) {
    StringLiteral* e = c.alloc(sizeof(StringLiteral));
    e.parent.init(ExprKind.StringLiteral, loc, 1, 1, 0);
    e.value = value;
#if AstStatistics
    Stats.addExpr(ExprKind.StringLiteral, sizeof(StringLiteral));
#endif
    e.parent.setType(g_string_types.get(len));
    e.parent.setLValue();   // lvalue by default unless used in array init
    return e;
}

public func const char* StringLiteral.getText(const StringLiteral* e) {
    return idx2name(e.value);
}

func void StringLiteral.print(const StringLiteral* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.color(col_Value);
    out.print(" \"%s\"\n", idx2name(e.value));
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils;

public type StructType struct {
    Type parent;
    StructTypeDecl* decl;
} @(opaque)

public func StructType* StructType.create(ast_context.Context* c) @(inline) {
    StructType* t = c.alloc(sizeof(StructType));
    t.parent.init(TypeKind.Struct);
    t.decl = nil;
    return t;
}

public func void StructType.setDecl(StructType* t, StructTypeDecl* decl) @(inline) {
    t.decl = decl;
}

public func StructTypeDecl* StructType.getDecl(const StructType* t) @(inline) { return t.decl; }

public func void StructType.print(const StructType* t, string_buffer.Buf* out) {
    out.add("(struct)");
    const char* name = t.decl.parent.name;
    if (name) out.add(name);
    else out.add("<anonymous>");
}

func void StructType.debugPrint(const StructType* t, string_buffer.Buf* out) {
    // TODO
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;
import string;

type StructTypeDeclBits struct {
    u32 : NumDeclBits;
    u32 is_struct : 1;
    u32 is_global : 1;
    u32 num_members : 10;
}

public type StructTypeDecl struct {
    Decl parent;
    u32 size;
    u32 alignment;
    u32 num_struct_functions;
    FunctionDecl** struct_functions;
    Decl*[0] members;   // tail-allocated
} @(opaque)

public func StructTypeDecl* StructTypeDecl.create(ast_context.Context* c,
                                                  u32 name,
                                                  SrcLoc loc,
                                                  bool is_public,
                                                  u32 ast_idx,
                                                  bool is_struct,
                                                  bool is_global,
                                                  VarDecl** members,
                                                  u32 num_members)
@(inline)
{
    u32 size = sizeof(StructTypeDecl) + num_members * sizeof(VarDecl*);
    StructTypeDecl* d = c.alloc(size);
    StructType* stype = StructType.create(c, d);
    QualType qt = QualType.init(stype.asType());
    stype.asType().setCanonicalType(qt);
    d.parent.init(DeclKind.StructType, name, loc, is_public, qt, ast_idx);
    d.parent.structTypeDeclBits.is_struct = is_struct;
    d.parent.structTypeDeclBits.is_global = is_global;
    d.parent.structTypeDeclBits.num_members = num_members;
    d.size = 0;
    d.alignment = 0;
    d.num_struct_functions = 0;
    d.struct_functions = nil;
    if (num_members) {
        string.memcpy(cast<void*>(d.members), cast<void*>(members), num_members * sizeof(VarDecl*));
    }
#if AstStatistics
    Stats.addDecl(DeclKind.StructType, size);
#endif
    return d;
}

public func Decl* StructTypeDecl.asDecl(StructTypeDecl* d) @(inline) {
    return &d.parent;
}

public func u32 StructTypeDecl.getNumMembers(const StructTypeDecl* d) @(inline) {
    return d.parent.structTypeDeclBits.num_members;
}

public func Decl** StructTypeDecl.getMembers(StructTypeDecl* d) {
    // NOTE: doesn't check if present!
    return d.members;
}

public func bool StructTypeDecl.isStruct(const StructTypeDecl* d) {
    return d.parent.structTypeDeclBits.is_struct;
}

public func u32 StructTypeDecl.getSize(const StructTypeDecl* d) {
    return d.size;
}

public func void StructTypeDecl.setSize(StructTypeDecl* d, u32 size) {
    d.size = size;
}

public func u32 StructTypeDecl.getAlignment(const StructTypeDecl* d) {
    return d.alignment;
}

public func void StructTypeDecl.setAlignment(StructTypeDecl* d, u32 alignment) {
    d.alignment = alignment;
}

public func void StructTypeDecl.setStructFunctions(StructTypeDecl* d, ast_context.Context* c, FunctionDecl** funcs, u32 count) {
    const u32 size = count * sizeof(FunctionDecl*);
    void* dest = c.alloc(size);
    string.memcpy(dest, cast<void*>(funcs), size);
    d.struct_functions = dest;
    d.num_struct_functions = count;
}

public func Decl* StructTypeDecl.find(StructTypeDecl* d, u32 name_idx) {
    for (u32 i=0; i<d.getNumMembers(); i++) {
        if (d.members[i].getNameIdx() == name_idx) return d.members[i];
    }
    return nil;
}

func void StructTypeDecl.print(const StructTypeDecl* d, string_buffer.Buf* out, u32 indent) {
    d.parent.printKind(out, indent, true);
    d.parent.printBits(out);
    bool is_global = d.parent.structTypeDeclBits.is_global;
    if (is_global) out.add(" global");
    if (d.parent.structTypeDeclBits.is_struct) out.add(" struct");
    else out.add(" union");

    if (is_global) {
        out.color(col_Attributes);
        out.print(" size=%u align=%u", d.size, d.alignment);
    }

    d.parent.printName(out);
    out.add("\n");

    for (u32 i=0; i<d.parent.structTypeDeclBits.num_members; i++) {
        d.members[i].print(out, indent + 2);
    }
}


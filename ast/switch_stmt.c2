/* Copyright 2022-2024 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import src_loc local;
import string_buffer;
import string;

type SwitchStmtBits struct {
    u32 : NumStmtBits;
    u32 is_sswitch : 1;
    u32 num_cases : 31 - NumStmtBits;
}

public type SwitchStmt struct @(opaque) {
    Stmt parent;
    SrcLoc loc;
    Expr* cond;
    SwitchCase*[0] cases; // tail-allocated
}

public fn SwitchStmt* SwitchStmt.create(ast_context.Context* c,
                                          SrcLoc loc,
                                          Expr* cond,
                                          SwitchCase** cases,
                                          u32 numCases,
                                          bool is_sswitch)
{
    u32 size = sizeof(SwitchStmt) + numCases * sizeof(Stmt*);
    SwitchStmt* s = c.alloc(size);
    s.parent.init(StmtKind.Switch);
    s.parent.switchStmtBits.is_sswitch = is_sswitch;
    s.parent.switchStmtBits.num_cases = numCases;
    s.loc = loc;
    s.cond = cond;
    string.memcpy(cast<void*>(s.cases), cast<void*>(cases), numCases * sizeof(SwitchCase*));
#if AstStatistics
    Stats.addStmt(StmtKind.Switch, size);
#endif
    return s;
}

fn Stmt* SwitchStmt.instantiate(SwitchStmt* s, Instantiator* inst) {
    u32 numCases = s.getNumCases();
    u32 size = sizeof(SwitchStmt) + numCases * sizeof(SwitchCase*);
    SwitchStmt* s2 = inst.c.alloc(size);
    s2.parent = s.parent;
    s2.cond = s.cond.instantiate(inst);
    for (u32 i=0; i<numCases; i++) {
        s2.cases[i] = s.cases[i].instantiate(inst);
    }
#if AstStatistics
    Stats.addStmt(StmtKind.Switch, size);
#endif
    return cast<Stmt*>(s2);
}

public fn SrcLoc SwitchStmt.getLoc(const SwitchStmt* s) {
    return s.loc;
}

public fn Expr* SwitchStmt.getCond(const SwitchStmt* s) {
    return s.cond;
}

public fn Expr** SwitchStmt.getCond2(SwitchStmt* s) {
    return s.cond ? &s.cond : nil;
}

public fn bool SwitchStmt.isSSwitch(const SwitchStmt* s) {
    return s.parent.switchStmtBits.is_sswitch;
}

public fn u32 SwitchStmt.getNumCases(const SwitchStmt* s) {
    return s.parent.switchStmtBits.num_cases;
}

public fn SwitchCase** SwitchStmt.getCases(SwitchStmt* s) {
    return s.cases;
}

fn void SwitchStmt.print(const SwitchStmt* s, string_buffer.Buf* out, u32 indent) {
    s.parent.printKind(out, indent);
    if (s.isSSwitch()) {
        out.color(col_Attr);
        out.add(" string");
    }
    out.newline();

    s.cond.print(out, indent + 1);
    for (u32 i=0; i<s.parent.switchStmtBits.num_cases; i++) {
        s.cases[i].print(out, indent + 1);
    }
}


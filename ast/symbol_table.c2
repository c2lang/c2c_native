/* Copyright 2022 Bas van den Berg
*/

module ast;

import string_buffer;
import color;

import stdlib;
import string;

public type SymbolTable struct {
    u32 num_symbols;
    u32 max_symbols;
    u32* symbols;
    ast.DeclList decls;
}

// Note: name must be allocated in target StringPool
public func void SymbolTable.init(SymbolTable* t, u32 initial) {
    t.num_symbols = 0;
    t.max_symbols = 0;
    t.resize(initial);
    t.decls.init(initial);
}

public func void SymbolTable.free(SymbolTable* t) {
    stdlib.free(t.symbols);
    t.decls.free();
}

public func u32 SymbolTable.size(SymbolTable* t) {
    return t.num_symbols;
}

public func Decl** SymbolTable.getDecls(const SymbolTable* l) {
    return l.decls.getDecls();
}

public func void SymbolTable.crop(SymbolTable* t, u32 size) {
    t.num_symbols = size;
    t.decls.setSize(size);
}

func void SymbolTable.resize(SymbolTable* t, u32 capacity) {
    u32* symbols = stdlib.malloc(capacity * sizeof(u32));
    t.max_symbols = capacity;
    if (t.symbols) {
        string.memcpy(symbols, t.symbols, t.num_symbols * sizeof(u32));
        stdlib.free(t.symbols);
    }
    t.symbols = symbols;
}

public func void SymbolTable.add(SymbolTable* t, u32 name_idx, ast.Decl* d) {
    if (t.num_symbols == t.max_symbols) t.resize(t.max_symbols * 2);

    t.symbols[t.num_symbols] = name_idx;
    t.num_symbols++;
    t.decls.add(d);
}

public func ast.Decl* SymbolTable.find(const SymbolTable* t, u32 name_idx) {
    for (u32 i=0; i<t.num_symbols; i++) {
        if (t.symbols[i] == name_idx) return t.decls.get(i);
    }
    return nil;
}

public func void SymbolTable.print(const SymbolTable* t, string_buffer.Buf* out) {
    for (u32 i=0; i<t.num_symbols; i++) {
        const Decl* d = t.decls.get(i);
        const char* col = d.isUsed() ? color.Normal : color.Grey;
        out.color(col);
        out.print("     %s", ast.idx2name(t.symbols[i]));
        if (d.isPublic()) {
            out.color(color.Yellow);
            out.add(" public");
        }
        out.add1('\n');
    }
}


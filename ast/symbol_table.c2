/* Copyright 2022-2024 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import string_buffer;
import color;

import stdlib;
import string;
import stdio;

public type SymbolTable struct {
    u32 num_symbols;
    u32 max_symbols;
    u32* symbols;
    ast.DeclList decls;
}

// Note: name must be allocated in target StringPool
public fn void SymbolTable.init(SymbolTable* t, u32 initial) {
    t.num_symbols = 0;
    t.max_symbols = 0;
    t.resize(initial);
    t.decls.init(initial);
}

public fn void SymbolTable.free(SymbolTable* t) {
    stdlib.free(t.symbols);
    t.decls.free();
}

public fn u32 SymbolTable.size(const SymbolTable* t) {
    return t.num_symbols;
}

public fn Decl** SymbolTable.getDecls(const SymbolTable* l) {
    return l.decls.getDecls();
}

public fn void SymbolTable.crop(SymbolTable* t, u32 size) {
    t.num_symbols = size;
    t.decls.setSize(size);
}

fn void SymbolTable.resize(SymbolTable* t, u32 capacity) {
    u32* symbols = stdlib.malloc(capacity * sizeof(u32));
    t.max_symbols = capacity;
    if (t.symbols) {
        string.memcpy(symbols, t.symbols, t.num_symbols * sizeof(u32));
        stdlib.free(t.symbols);
    }
    t.symbols = symbols;
}

public fn void SymbolTable.add(SymbolTable* t, u32 name_idx, ast.Decl* d) {
    if (t.num_symbols == t.max_symbols) t.resize(t.max_symbols * 2);

    t.symbols[t.num_symbols] = name_idx;
    t.num_symbols++;
    t.decls.add(d);
}

public fn ast.Decl* SymbolTable.find(const SymbolTable* t, u32 name_idx) {
    for (u32 i=0; i<t.num_symbols; i++) {
        if (t.symbols[i] == name_idx) return t.decls.get(i);
    }
    return nil;
}

public fn void SymbolTable.print(const SymbolTable* t, string_buffer.Buf* out) {
    for (u32 i=0; i<t.num_symbols; i++) {
        const Decl* d = t.decls.get(i);
        const char* col = d.isUsed() ? color.Normal : color.Grey;
        out.color(col);
        const char* name = ast.idx2name(t.symbols[i]);
        out.print("    %s", name);
        if (d.isPublic()) {
            out.color(color.Yellow);
            out.add(" public");
        }
        out.newline();
        if (d.isStructType()) {
            StructTypeDecl* std = cast<StructTypeDecl*>(d);
            const FunctionDecl** fds = std.getStructFunctions();
            for (u32 j=0; j<std.getNumStructFunctions(); j++) {
                Decl* fd = cast<Decl*>(fds[j]);
                col = fd.isUsed() ? color.Normal : color.Grey;
                out.color(col);
                out.indent(6);
                out.print("%s.%s", name, fd.getName());
                if (fd.isPublic()) {
                    out.color(color.Yellow);
                    out.add(" public");
                }
                out.newline();
            }
        }
    }
}

public fn void SymbolTable.dump(const SymbolTable* t) {
    string_buffer.Buf* out = string_buffer.create(4096, useColor(), 2);

    out.add("Symbols:\n");
    for (u32 i=0; i<t.num_symbols; i++) {
        const Decl* d = t.decls.get(i);
        u32 name_idx = t.symbols[i];
        const char* name = ast.idx2name(name_idx);
        out.print("  [%2d]  %6d  %s\n", i, name_idx, name);
    }
    out.stripNewline();  // puts will add another
    stdio.puts(out.data());
    out.free();
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import color;
import utils local;
import string_buffer;
import stdio;

public type TypeKind enum u8 {
    Builtin,
    Pointer,
    Array,      // TODO move to after Enum (for BinOp check tables)
    Struct,
    Enum,
    Function,
    Alias,
    Module,
}

const char*[] typeKind_names = {
    "Builtin",
    "Pointer",
    "Array",
    "Struct",
    "Enum",
    "Function",
    "Alias",
    "Module",
}

static_assert(elemsof(TypeKind), elemsof(typeKind_names));

public type TypeBits struct {
    u32 kind : 8;
}
public const u32 NumTypeBits = 8;

public type Type struct {
    union {
        TypeBits typeBits;
        BuiltinTypeBits builtinTypeBits;
        ArrayTypeBits arrayTypeBits;
        u32 bits;
    }
    u32 ptr_pool_idx;            // index into PointerPool, 0 means no pointers
    QualType canonicalType;
} @(opaque)

func void Type.init(Type* t, TypeKind k) @(inline) {
    t.bits = 0;
    t.typeBits.kind = k;
    t.ptr_pool_idx = 0;
    t.canonicalType.ptr = 0;
}

// TEMP cast needed until Analyser fixed
public func TypeKind Type.getKind(const Type* t) @(inline) { return cast<TypeKind>(t.typeBits.kind); }

public func bool Type.hasCanonicalType(const Type* t) @(inline) {
    return t.canonicalType.ptr != 0;
}

public func QualType Type.getCanonicalType(const Type* t) @(inline) { return t.canonicalType; }

public func void Type.setCanonicalType(Type* t, QualType canon) @(inline) { t.canonicalType = canon; }

public func u32 Type.getIndex(const Type* t) { return t.ptr_pool_idx; }

public func ArrayType* Type.asArray(Type* t) {
    if (t.getKind() == TypeKind.Array) return cast<ArrayType*>(t);
    return nil;
}

public func bool Type.isBuiltinType(const Type* t) @(inline) {
    return (t.getKind() == TypeKind.Builtin);
}

public func bool Type.isArrayType(const Type* t) @(inline) {
    return (t.getKind() == TypeKind.Array);
}

public func bool Type.isStructType(const Type* t) @(inline) {
    return (t.getKind() == TypeKind.Struct);
}

public func bool Type.isPointerType(const Type* t) @(inline) {
    return (t.getKind() == TypeKind.Pointer);
}

public func bool Type.isVoidType(const Type* t) @(inline) {
    return t == g_void.getTypeOrNil();
}

public func void Type.dump(const Type* t) {
    string_buffer.Buf* out = string_buffer.create(256, utils.useColor(), 2);
    t.print(out);
    out.color(color.Normal);
    stdio.printf("%s\n", out.data());
    out.free();
}

public func u32 Type.getAlignment(const Type* t) {
    switch (t.getKind()) {
    case Builtin:
        const BuiltinType* bi =  cast<BuiltinType*>(t);
        return bi.getAlignment();
    case Pointer:
        break;
    case Array:
        const ArrayType* at =  cast<ArrayType*>(t);
        QualType elem = at.getElemType();
        return elem.getAlignment();
    case Struct:
        const StructType* s = cast<StructType*>(t);
        const StructTypeDecl* std = s.getDecl();
        return std.getAlignment();
    case Enum:
        const EnumType * e = cast<EnumType*>(t);
        const EnumTypeDecl* etd = e.getDecl();
        QualType it = etd.getImplType();
        return it.getTypeOrNil().getAlignment();
    case Function:
        break;
    case Alias:
        QualType canon = t.getCanonicalType();
        return canon.getAlignment();
    case Module:
        // should not happen
        return 0;
    }
    return g_wordsize;
}

public func u32 Type.getSize(const Type* t) {
    switch (t.getKind()) {
    case Builtin:
        const BuiltinType* bi =  cast<BuiltinType*>(t);
        return bi.getAlignment();   // note: alignment is size
    case Pointer:
        break;
    case Array:
        const ArrayType* at =  cast<ArrayType*>(t);
        QualType elem = at.getElemType();
        return at.getSize() * elem.getSize();
    case Struct:
        const StructType* s = cast<StructType*>(t);
        const StructTypeDecl* std = s.getDecl();
        return std.getSize();
    case Enum:
        const EnumType * e = cast<EnumType*>(t);
        const EnumTypeDecl* etd = e.getDecl();
        QualType it = etd.getImplType();
        return it.getTypeOrNil().getSize();
    case Function:
        break;
    case Alias:
        QualType canon = t.getCanonicalType();
        return canon.getAlignment();
    case Module:
        // should not happen
        return 0;
    }
    return g_wordsize;
}

func void Type.print(const Type* t, string_buffer.Buf* out) {
    out.color(col_Type);
    switch (t.getKind()) {
    case Builtin:
        BuiltinType.print(cast<BuiltinType*>(t), out);
        break;
    case Pointer:
        PointerType.print(cast<PointerType*>(t), out);
        break;
    case Array:
        ArrayType.print(cast<ArrayType*>(t), out);
        break;
    case Struct:
        StructType.print(cast<StructType*>(t), out);
        break;
    case Enum:
        EnumType.print(cast<EnumType*>(t), out);
        break;
    case Function:
        FunctionType.print(cast<FunctionType*>(t), out);
        break;
    case Alias:
        AliasType.print(cast<AliasType*>(t), out);
        break;
    case Module:
        ModuleType.print(cast<ModuleType*>(t), out);
        break;
    }
}

func void Type.debugPrint(const Type* t, string_buffer.Buf* out) {
    switch (t.getKind()) {
    case Builtin:
        BuiltinType.debugPrint(cast<BuiltinType*>(t), out);
        break;
    case Pointer:
        PointerType.debugPrint(cast<PointerType*>(t), out);
        break;
    case Array:
        ArrayType.debugPrint(cast<ArrayType*>(t), out);
        break;
    case Struct:
        StructType.debugPrint(cast<StructType*>(t), out);
        break;
    case Enum:
        EnumType.debugPrint(cast<EnumType*>(t), out);
        break;
    case Function:
        FunctionType.debugPrint(cast<FunctionType*>(t), out);
        break;
    case Alias:
        AliasType.debugPrint(cast<AliasType*>(t), out);
        break;
    case Module:
        ModuleType.debugPrint(cast<ModuleType*>(t), out);
        break;
    }
}

public func void Type.fullPrint(const Type* t, string_buffer.Buf* out, u32 indent) {
    switch (t.getKind()) {
    case Builtin:
        BuiltinType.fullPrint(cast<BuiltinType*>(t), out, indent);
        break;
    case Pointer:
        PointerType.fullPrint(cast<PointerType*>(t), out, indent);
        break;
    case Array:
        ArrayType.fullPrint(cast<ArrayType*>(t), out, indent);
        break;
    case Struct:
        StructType.fullPrint(cast<StructType*>(t), out, indent);
        break;
    case Enum:
        EnumType.fullPrint(cast<EnumType*>(t), out, indent);
        break;
    case Function:
        FunctionType.fullPrint(cast<FunctionType*>(t), out, indent);
        break;
    case Alias:
        AliasType.fullPrint(cast<AliasType*>(t), out, indent);
        break;
    case Module:
        ModuleType.fullPrint(cast<ModuleType*>(t), out, indent);
        break;
    }
    out.indent(indent);
    out.add("canonical=");
    Type* canon = t.canonicalType.getTypeOrNil();
    if (canon) {
        if (canon == t) {
            out.add("this\n");
        } else {
            canon.fullPrint(out, indent + 1);
        }
    } else {
        out.add("NIL\n");
    }
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import utils local;
import stdio;

public type TypeKind enum u8 {
    Builtin,
    Pointer,
    Array,
    Ref,
}

public type TypeBits struct {
    u32 kind : 8;
}
public const u32 NumTypeBits = 8;

public type Type struct {
    union {
        TypeBits typeBits;
        BuiltinTypeBits builtinTypeBits;
        ArrayTypeBits arrayTypeBits;
        RefTypeBits refTypeBits;
        u32 bits;
    }
} @(opaque)

func void Type.init(Type* t, TypeKind k) @(inline) {
    t.bits = 0;
    t.typeBits.kind = k;
}

// TEMP cast needed until Analyser fixed
public func TypeKind Type.getKind(const Type* t) @(inline) { return cast<TypeKind>(t.typeBits.kind); }

public func void Type.dump(const Type* t) {
    StringBuffer* out = StringBuffer.create(10*4096);
    t.print(out, 0);
    stdio.printf("%s\n", out.data());
    out.free();
}

public func void Type.print(const Type* t, StringBuffer* out, u32 indent) {
    switch (t.getKind()) {
    case TypeKind.Builtin:
        BuiltinType.print(cast<BuiltinType*>(t), out, indent);
        break;
    case TypeKind.Pointer:
        PointerType.print(cast<PointerType*>(t), out, indent);
        break;
    case TypeKind.Array:
        ArrayType.print(cast<ArrayType*>(t), out, indent);
        break;
    case TypeKind.Ref:
        RefType.print(cast<RefType*>(t), out, indent);
        break;
    }
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import src_loc local;

public type TypeExpr struct {
    Expr parent;
    TypeRef typeRef;    // Note: variable size!
} @(opaque)

public func TypeExpr* TypeExpr.create(ast_context.Context* c,
                                      SrcLoc loc,
                                      const TypeRefHolder* ref) @(inline)
{
    u32 size = sizeof(TypeExpr) + ref.getExtraSize();
    TypeExpr* e = c.alloc(size);
    e.parent.init(ExprKind.Type, loc, 0, 0, 0, ValType.NValue);
    ref.fill(&e.typeRef);
#if AstStatistics
    Stats.addExpr(ExprKind.Type, size);
#endif
    return e;
}

func Expr* TypeExpr.instantiate(TypeExpr* e, Instantiator* inst) {
    bool matches = e.typeRef.matchesTemplate(inst.template_name);
    u32 extra = matches ? inst.ref.getExtraSize() : e.typeRef.getExtraSize();
    u32 size = sizeof(TypeExpr) + extra;
    TypeExpr* e2 = inst.c.alloc(size);
    e2.parent = e.parent;
    e2.typeRef.instantiate(&e.typeRef, inst.ref, inst.template_name);
#if AstStatistics
    Stats.addExpr(ExprKind.Type, size);
#endif
    return cast<Expr*>(e2);
}

public func TypeRef* TypeExpr.getTypeRef(TypeExpr* e) @(inline) {
    return &e.typeRef;
}

func void TypeExpr.print(const TypeExpr* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.add1(' ');
    e.typeRef.print(out, true);
    out.add1('\n');
}


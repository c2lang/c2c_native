/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

public type UnaryOperatorBits struct {
    u32 : NumExprBits;
    u32 kind : 4;
}

public type UnaryOperator struct {
    Expr parent;
    Expr* inner;
} @(opaque)

public type UnaryOpcode enum u8 {
    PostInc,
    PostDec,
    PreInc,
    PreDec,
    AddrOf,
    Deref,
    Minus,
    Not,
    LNot,
}

public func UnaryOperator* UnaryOperator.create(ast_context.Context* c, SrcLoc loc, UnaryOpcode kind, Expr* inner) @(inline) {
    UnaryOperator* e = c.alloc(sizeof(UnaryOperator));
    e.parent.init(ExprKind.UnaryOperator, loc, 0, 0, 0);
    e.parent.parent.unaryOperatorBits.kind = kind;
    e.inner = inner;
    return e;
}

public func UnaryOpcode UnaryOperator.getKind(const UnaryOperator* e) {
    return cast<UnaryOpcode>(e.parent.parent.unaryOperatorBits.kind);
}

public func Expr* UnaryOperator.getExpr(UnaryOperator* e) { return e.inner; }
public func Expr** UnaryOperator.getExpr2(UnaryOperator* e) { return &e.inner; }

public func const char* unaryOpcode2Str(UnaryOpcode k) {
    switch (k) {
    case UnaryOpcode.PostInc: return "++";
    case UnaryOpcode.PostDec: return "--";
    case UnaryOpcode.PreInc:  return "++";
    case UnaryOpcode.PreDec:  return "--";
    case UnaryOpcode.AddrOf:  return "&";
    case UnaryOpcode.Deref:   return "*";
    case UnaryOpcode.Minus:   return "-";
    case UnaryOpcode.Not:     return "~";
    case UnaryOpcode.LNot:    return "";
    }
    return "";
}

func bool UnaryOperator.isBefore(const UnaryOperator* e) {
    switch (e.getKind()) {
    case UnaryOpcode.PostInc: return false;
    case UnaryOpcode.PostDec: return false;
    case UnaryOpcode.PreInc:  return true;
    case UnaryOpcode.PreDec:  return true;
    case UnaryOpcode.AddrOf:  return true;
    case UnaryOpcode.Deref:   return true;
    case UnaryOpcode.Minus:   return true;
    case UnaryOpcode.Not:     return true;
    case UnaryOpcode.LNot:    return true;
    }
    return true;
}

public func void UnaryOperator.print(const UnaryOperator* e, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.print("UnaryOperator %s\n", unaryOpcode2Str(e.getKind()));
    e.inner.print(out, indent + 2);
}

public func void UnaryOperator.printLiteral(const UnaryOperator* e, string_buffer.Buf* out) {
    const char* opcode = unaryOpcode2Str(e.getKind());
    if (e.isBefore()) {
        out.add(opcode);
        e.inner.printLiteral(out);
    } else {
        e.inner.printLiteral(out);
        out.add(opcode);
    }
}


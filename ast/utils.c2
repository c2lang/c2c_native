/* Copyright 2022 Bas van den Berg
*/

module ast;

import color;
import ast_context local;

import string_pool; // TEMP

static_assert(32, sizeof(Decl));
static_assert(48, sizeof(FunctionDecl));
static_assert(48, sizeof(StructTypeDecl));
static_assert(48, sizeof(ImportDecl));
static_assert(40, sizeof(EnumTypeDecl));
static_assert(40, sizeof(EnumConstantDecl));
static_assert(32, sizeof(VarDecl));
static_assert(40, sizeof(AliasTypeDecl));
static_assert(40, sizeof(FunctionTypeDecl));
static_assert(48, sizeof(StaticAssertDecl));

static_assert(4, sizeof(Stmt));
static_assert(8, sizeof(CompoundStmt));
static_assert(24, sizeof(DoStmt));
static_assert(40, sizeof(ForStmt));
static_assert(24, sizeof(IfStmt));
static_assert(8, sizeof(ReturnStmt));
static_assert(24, sizeof(WhileStmt));
static_assert(16, sizeof(SwitchStmt));
static_assert(16, sizeof(CaseStmt));
static_assert(8, sizeof(DefaultStmt));
static_assert(8, sizeof(BreakStmt));
static_assert(8, sizeof(ContinueStmt));
static_assert(8, sizeof(FallthroughStmt));
static_assert(16, sizeof(DeclStmt));
static_assert(16, sizeof(LabelStmt));
static_assert(16, sizeof(GotoStmt));

static_assert(16, sizeof(Expr));
static_assert(24, sizeof(TypeExpr));
static_assert(32, sizeof(BuiltinExpr));
static_assert(16, sizeof(BooleanLiteral));
static_assert(16, sizeof(CharLiteral));
static_assert(24, sizeof(StringLiteral));
static_assert(16, sizeof(NilExpr));
static_assert(24, sizeof(IdentifierExpr));
static_assert(24, sizeof(CallExpr));
static_assert(24, sizeof(InitListExpr));
static_assert(32, sizeof(FieldDesignatedInitExpr));
static_assert(32, sizeof(ArrayDesignatedInitExpr));
static_assert(24, sizeof(IntegerLiteral));
static_assert(24, sizeof(ParenExpr));
static_assert(32, sizeof(MemberExpr));
static_assert(32, sizeof(BitOffsetExpr));
static_assert(32, sizeof(ArraySubscriptExpr));
static_assert(24, sizeof(UnaryOperator));
static_assert(48, sizeof(ConditionalOperator));
static_assert(32, sizeof(BinaryOperator));
static_assert(32, sizeof(ExplicitCastExpr));
static_assert(24, sizeof(ImplicitCastExpr));

static_assert(8, sizeof(QualType));
static_assert(4, sizeof(Type));
static_assert(4, sizeof(BuiltinType));
static_assert(16, sizeof(PointerType));
static_assert(16, sizeof(ArrayType));
static_assert(16, sizeof(RefType));
static_assert(16, sizeof(StructType));
static_assert(16, sizeof(EnumType));
static_assert(16, sizeof(FunctionType));

public BuiltinType* g_u8;
public BuiltinType* g_u16;
public BuiltinType* g_u32;
public BuiltinType* g_u64;
public BuiltinType* g_i8;
public BuiltinType* g_i16;
public BuiltinType* g_i32;
public BuiltinType* g_i64;
public BuiltinType* g_void;
public BuiltinType* g_bool;

const char* g_names_start;

public func void init(Context* c, const char* names_start) {
    g_u8 = BuiltinType.create(c, BuiltinTypeKind.UInt8);
    g_u16 = BuiltinType.create(c, BuiltinTypeKind.UInt16);
    g_u32 = BuiltinType.create(c, BuiltinTypeKind.UInt32);
    g_u64 = BuiltinType.create(c, BuiltinTypeKind.UInt64);
    g_i8 = BuiltinType.create(c, BuiltinTypeKind.Int8);
    g_i16 = BuiltinType.create(c, BuiltinTypeKind.Int16);
    g_i32 = BuiltinType.create(c, BuiltinTypeKind.Int32);
    g_i64 = BuiltinType.create(c, BuiltinTypeKind.Int64);
    g_void = BuiltinType.create(c, BuiltinTypeKind.Void);
    g_bool = BuiltinType.create(c, BuiltinTypeKind.Bool);
    g_names_start = names_start;
}

const char* col_Stmt = color.Bmagenta;
const char* col_Decl = color.Bgreen;
const char* col_Expr = color.Bmagenta;
const char* col_Attr = color.Blue;
const char* col_Type = color.Green;
const char* col_Value = color.Bcyan;
const char* col_Error = color.Red;
const char* col_Attributes = color.Yellow;
const char* col_Normal = color.Normal;


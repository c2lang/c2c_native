/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import attr;
import color;
import ast_context local;
import src_loc local;

import stdlib;
import string;
import stdio;

#if Arch32
#else

static_assert(24, sizeof(Decl));
static_assert(32, sizeof(AliasTypeDecl));
static_assert(40, sizeof(EnumConstantDecl));
static_assert(32, sizeof(EnumTypeDecl));
static_assert(32, sizeof(FunctionTypeDecl));
static_assert(32, sizeof(VarDecl));
static_assert(64, sizeof(FunctionDecl));
static_assert(40, sizeof(ImportDecl));
static_assert(56, sizeof(StructTypeDecl));

static_assert(4, sizeof(Stmt));
static_assert(24, sizeof(AsmStmt));
static_assert(16, sizeof(AssertStmt));
static_assert(16, sizeof(DeclStmt));
static_assert(12, sizeof(GotoStmt));
static_assert(12, sizeof(LabelStmt));
static_assert(16, sizeof(SwitchStmt));
static_assert(24, sizeof(DoStmt));
static_assert(24, sizeof(IfStmt));
static_assert(24, sizeof(WhileStmt));
static_assert(40, sizeof(ForStmt));
static_assert(8, sizeof(BreakStmt));
static_assert(8, sizeof(CompoundStmt));
static_assert(8, sizeof(ContinueStmt));
static_assert(8, sizeof(FallthroughStmt));
static_assert(8, sizeof(ReturnStmt));

static_assert(16, sizeof(Expr));
static_assert(16, sizeof(BooleanLiteral));
static_assert(16, sizeof(CharLiteral));
static_assert(16, sizeof(NilExpr));
static_assert(32, sizeof(CallExpr));
static_assert(24, sizeof(IdentifierExpr));
static_assert(24, sizeof(ImplicitCastExpr));
static_assert(24, sizeof(InitListExpr));
static_assert(24, sizeof(IntegerLiteral));
static_assert(24, sizeof(ParenExpr));
static_assert(24, sizeof(StringLiteral));
static_assert(24, sizeof(UnaryOperator));
static_assert(32, sizeof(ArrayDesignatedInitExpr));
static_assert(32, sizeof(ArraySubscriptExpr));
static_assert(32, sizeof(BinaryOperator));
static_assert(32, sizeof(BitOffsetExpr));
static_assert(40, sizeof(BuiltinExpr));
static_assert(32, sizeof(ExplicitCastExpr));
static_assert(40, sizeof(FieldDesignatedInitExpr));
static_assert(16, sizeof(MemberExpr));
static_assert(24, sizeof(TypeExpr));
static_assert(48, sizeof(ConditionalOperator));

static_assert(8, sizeof(QualType));
static_assert(16, sizeof(Type));
static_assert(16, sizeof(BuiltinType));
static_assert(24, sizeof(PointerType));
static_assert(32, sizeof(ArrayType));
static_assert(24, sizeof(StructType));
static_assert(24, sizeof(EnumType));
static_assert(24, sizeof(FunctionType));

static_assert(8, sizeof(TypeRef));
static_assert(16, sizeof(SwitchCase));
static_assert(8, sizeof(TypeRef));
static_assert(16, sizeof(ArrayValue));
static_assert(24, sizeof(StaticAssert));

#endif

public const QualType QualType_Invalid = { }

public type Globals struct {
    const char* names_start;
    PointerPool pointers;
    StringTypePool string_types;
    u32 wordsize;
    bool use_color;
    // TODO just use AST vector (also in modules, but modules has ownership)
    u32 ast_count;      // Note: first index used to indicate nil
    u32 ast_capacity;
    AST** ast_list;
#if AstStatistics
    Stats stats;
#endif
    u32[elemsof(BuiltinKind)] builtinType_sizes;
    u32[elemsof(BuiltinKind)] builtinType_width;
    BuiltinKind[elemsof(BuiltinKind)] builtinType_baseTypes;
} @(opaque)

// The only globals for AST are here, since they must be set explicitly for plugins!!
Globals* globals;
public QualType* builtins;

// for plugins
public func Globals* getGlobals() { return globals; }
public func void setGlobals(Globals* g) { globals = g; }


// wordsize in bytes, must NOT be called from Plugin!
public func void init(Context* c, const char* names_start, u32 wordsize, bool use_color) {
    globals = stdlib.malloc(sizeof(Globals));
    globals.pointers.init(c);
    globals.string_types.init(c);
    globals.wordsize = wordsize;
    globals.use_color = use_color;
    globals.names_start = names_start;
    globals.ast_count = 1;
    globals.ast_capacity = 0;
    globals.ast_list = nil;
#if AstStatistics
    globals.stats.reset();
#endif

    // create all Qualtypes for builtin-types, 1 extra for void-ptr
    builtins = stdlib.malloc((elemsof(BuiltinKind) + 1) * sizeof(QualType));
    for (u32 i=0; i<elemsof(BuiltinKind); i++) {
        builtins[i].set(cast<Type*>(BuiltinType.create(c, cast<BuiltinKind>(i))));
    }

    // create void* Type so its easy to check if a type is a void*
    Type* void_ptr = ast.getPointerType(builtins[BuiltinKind.Void]);
    builtins[elemsof(BuiltinKind)].set(void_ptr);
    void_ptr.setCanonicalType(builtins[elemsof(BuiltinKind)]);

    string.memcpy(globals.builtinType_sizes, BuiltinType_default_sizes, sizeof(BuiltinType_default_sizes));
    globals.builtinType_sizes[BuiltinKind.ISize] = wordsize;
    globals.builtinType_sizes[BuiltinKind.USize] = wordsize;

    string.memcpy(globals.builtinType_width, BuiltinType_default_widths, sizeof(BuiltinType_default_widths));
    globals.builtinType_width[BuiltinKind.ISize] = wordsize * 8 - 1;
    globals.builtinType_width[BuiltinKind.USize] = wordsize * 8;

    for (u32 i=0; i<elemsof(BuiltinKind); i++) {
        globals.builtinType_baseTypes[i] = cast<BuiltinKind>(i);
    }
    if (wordsize == 4) {
        globals.builtinType_baseTypes[BuiltinKind.ISize] = BuiltinKind.Int32;
        globals.builtinType_baseTypes[BuiltinKind.USize] = BuiltinKind.UInt32;
    } else {
        globals.builtinType_baseTypes[BuiltinKind.ISize] = BuiltinKind.Int64;
        globals.builtinType_baseTypes[BuiltinKind.USize] = BuiltinKind.UInt64;
    }
}

public func void deinit(bool print_stats) {
#if AstStatistics
    if (print_stats) globals.stats.dump();
#endif
    globals.names_start = nil;
    globals.ast_count = 0;
    globals.ast_capacity = 0;
    stdlib.free(cast<void*>(globals.ast_list));
    globals.ast_list = nil;
    globals.pointers.clear();
    globals.string_types.clear();
    stdlib.free(globals);
    stdlib.free(builtins);
}

public func u32 getWordSize() {
    return globals.wordsize;
}

func bool useColor() {
    return globals.use_color;
}

func QualType getStringType(u32 len) {
    return globals.string_types.get(len);
}

public func const char* idx2name(u32 idx) {
    // TODO just keep pointer to string_pool. That way it can resize!
    if (idx) return globals.names_start + idx;
    return nil;
}

public func QualType getVoidPtr() {
    return builtins[elemsof(BuiltinKind)];
}

public func Type* getPointerType(QualType inner) {
    return globals.pointers.getPointer(inner);
}

func u32 addAST(AST* ast_) {
    if (globals.ast_count >= globals.ast_capacity) {
        if (globals.ast_capacity == 0) globals.ast_capacity = 16;
        else globals.ast_capacity *= 2;

        void* buf = stdlib.malloc(globals.ast_capacity * sizeof(ast.AST*));
        if (globals.ast_list) {
            void* old = cast<void*>(globals.ast_list);
            string.memcpy(buf, old, globals.ast_count * sizeof(ast.AST*));
            stdlib.free(old);
        }
        globals.ast_list = buf;
    }

    u32 idx = globals.ast_count;
    globals.ast_list[idx] = ast_;
    globals.ast_count++;
    return idx;
}

public func u32 ast2idx(const AST* ast_) {
    if (ast_) return ast_.idx;
    return 0;
}

public func AST* idx2ast(u32 idx) {
    if (idx == 0) return nil;
    return globals.ast_list[idx];
}

// Note: qt must be valid
public func void setTypePublicUsed(QualType qt) {
    const Type* t = qt.getType();
    Decl* d = nil;
    switch (t.getKind()) {
    case Builtin:
        return;
    case Pointer:
        PointerType* pt = cast<PointerType*>(t);
        setTypePublicUsed(pt.inner);
        return;
    case Array:
        ArrayType* at = cast<ArrayType*>(t);
        setTypePublicUsed(at.elem);
        return;
    case Struct:
        StructType* st = cast<StructType*>(t);
        d = cast<Decl*>(st.decl);
        break;
    case Enum:
        EnumType* et = cast<EnumType*>(t);
        d = cast<Decl*>(et.decl);
        break;
    case Function:
        //FunctionType* ft = cast<FunctionType*>(t);
        // TODO how to get from FunctionType to FunctionTypeDecl?
        return;
    case Alias:
        AliasType* at = cast<AliasType*>(t);
        d = cast<Decl*>(at.decl);
        break;
    case Module:
        return;
    }
    if (d) d.setUsedPublic();
}

public func const char* getPrefixedName(const Decl* d) {
    switch (d.getKind()) {
    case Function:
        const FunctionDecl* fd = cast<FunctionDecl*>(d);
        if (fd.hasPrefix()) {
            local char[64] fullname;
            stdio.sprintf(fullname, "%s.%s", fd.getPrefixName(), d.getName());
            return fullname;
        }
        break;
    case Import:
        break;
    case StructType:
        break;
    case EnumType:
        break;
    case EnumConstant:
        // TODO
        break;
    case FunctionType:
        break;
    case AliasType:
        break;
    case Var:
        break;
    }
    return d.getName();
}

public func bool isGlobal(const Decl* d) {
    switch (d.getKind()) {
    case Function:
        break;
    case Import:
        return false;
    case StructType:
        const StructTypeDecl* std = cast<StructTypeDecl*>(d);
        return std.isGlobal();
    case EnumType:
        break;
    case EnumConstant:
        break;
    case FunctionType:
        break;
    case AliasType:
        break;
    case Var:
        const VarDecl* vd = cast<VarDecl*>(d);
        return vd.isGlobal();
    }
    return true;
}

public func QualType getNativeType() {
    BuiltinKind kind = globals.wordsize == 8 ? BuiltinKind.UInt64 : BuiltinKind.UInt32;
    return builtins[kind];
}

const char* col_Stmt = color.Bmagenta;
const char* col_Decl = color.Bgreen;
const char* col_Expr = color.Bmagenta;
const char* col_Attr = color.Blue;
const char* col_Template = color.Green;
//const char* col_Cast = color.Red;
const char* col_Type = color.Green;
const char* col_Value = color.Bcyan;
const char* col_Error = color.Red;
const char* col_Calc = color.Yellow;    // all calculated value
const char* col_Normal = color.Normal;

public type AttrHandlerFn func bool (void* arg, Decl* d, SrcLoc loc, u32 name, const attr.Value* value);


/* Copyright 2022-2024 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import c2 local;
import stdio;

public type ValueKind enum u8 {
    SignedDecimal,
    UnsignedDecimal,
    Float,
}

public type Value struct {
    ValueKind kind;
    union {
        u64 uvalue;
        i64 svalue;
        f64 fvalue;
    }
}

public fn bool Value.isNegative(const Value* v) {
    switch (v.kind) {
    case SignedDecimal:
        return v.svalue < 0;
    case Float:
        return v.fvalue < 0;
    default:
        break;
    }
    return false;
}

public fn bool Value.isFloat(const Value* v) {
    switch (v.kind) {
    case SignedDecimal: fallthrough;
    case UnsignedDecimal:
        return false;
    case Float:
        break;
    }
    return true;
}

public fn bool Value.isDecimal(const Value* v) {
    switch (v.kind) {
    case SignedDecimal: fallthrough;
    case UnsignedDecimal:
        break;
    case Float:
        return false;
    }
    return true;
}

public fn bool Value.isZero(const Value* v) {
    switch (v.kind) {
    case SignedDecimal:
        return v.svalue == 0;
    case UnsignedDecimal:
        return v.uvalue == 0;
    case Float:
        return v.fvalue == 0;
    }
    return false;
}

public fn void Value.negate(Value* v) {
    switch (v.kind) {
    case SignedDecimal:
        v.svalue = -v.svalue;
        break;
    case UnsignedDecimal:
        v.kind = ValueKind.SignedDecimal;
        v.svalue = - cast<i64>(v.uvalue);
        break;
    case Float:
        v.fvalue = -v.fvalue;
        break;
    }
}

public fn Value Value.minus(const Value* v1, const Value* v2) {
    // signed or not depends on value, if negative value is needed, make signed
    Value result;
    switch (v1.kind) {
    case SignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            result.kind = ValueKind.SignedDecimal;
            result.svalue = v1.svalue - v2.svalue;
            break;
        case UnsignedDecimal:
            result.kind = ValueKind.SignedDecimal;
            result.svalue = v1.svalue - cast<i64>(v2.uvalue);
            break;
        case Float:
            result.kind = ValueKind.Float;
            result.fvalue = v1.svalue - v2.fvalue;
            break;
        }
        break;
    case UnsignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            result.svalue = cast<i64>(v1.uvalue) - v2.svalue;
            result.kind = (result.svalue > 0) ? ValueKind.UnsignedDecimal : ValueKind.SignedDecimal;
            break;
        case UnsignedDecimal:
            if (v2.uvalue > v1.uvalue) {
                result.kind = ValueKind.SignedDecimal;
                result.svalue = cast<i64>(v1.uvalue - v2.uvalue);
            } else {
                result.kind = ValueKind.UnsignedDecimal;
                result.uvalue = v1.uvalue - v2.uvalue;
            }
            break;
        case Float:
            result.kind = ValueKind.Float;
            result.fvalue = v1.uvalue - v2.fvalue;
            break;
        }
        break;
    case Float:
        result.kind = ValueKind.Float;
        switch (v2.kind) {
        case SignedDecimal:
            result.fvalue = v1.fvalue - v2.svalue;
            break;
        case UnsignedDecimal:
            result.fvalue = v1.fvalue - v2.uvalue;
            break;
        case Float:
            result.fvalue = v1.fvalue - v2.fvalue;
            break;
        }
        break;
    }
    return result;
}

public fn Value Value.add(const Value* v1, const Value* v2) {
    // signed or not depends on value, if negative value is needed, make signed

    Value result;
    switch (v1.kind) {
    case SignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            result.kind = ValueKind.SignedDecimal;
            result.svalue = v1.svalue + v2.svalue;
            break;
        case UnsignedDecimal:
            result.svalue = v1.svalue + cast<i64>(v2.uvalue);
            result.kind = (result.svalue > 0) ? ValueKind.UnsignedDecimal : ValueKind.SignedDecimal;
            break;
        case Float:
            result.kind = ValueKind.Float;
            result.fvalue = v1.svalue + v2.fvalue;
            break;
        }
        break;
    case UnsignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            result.svalue = cast<i64>(v1.uvalue) + v2.svalue;
            result.kind = (result.svalue > 0) ? ValueKind.UnsignedDecimal : ValueKind.SignedDecimal;
            break;
        case UnsignedDecimal:
            result.kind = ValueKind.UnsignedDecimal;
            result.uvalue = v1.uvalue + v2.uvalue;
            break;
        case Float:
            result.kind = ValueKind.Float;
            result.fvalue = v1.uvalue + v2.fvalue;
            break;
        }
        break;
    case Float:
        result.kind = ValueKind.Float;
        switch (v2.kind) {
        case SignedDecimal:
            result.fvalue = v1.fvalue + v2.svalue;
            break;
        case UnsignedDecimal:
            result.fvalue = v1.fvalue + v2.uvalue;
            break;
        case Float:
            result.fvalue = v1.fvalue + v2.fvalue;
            break;
        }
        break;
    }
    return result;
}

public fn Value Value.multiply(const Value* v1, const Value* v2) {
    Value result;
    switch (v1.kind) {
    case SignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            result.kind = ValueKind.SignedDecimal;
            result.svalue = v1.svalue * v2.svalue;
            break;
        case UnsignedDecimal:
            result.kind = ValueKind.SignedDecimal;
            result.svalue = v1.svalue * cast<i64>(v2.uvalue);
            break;
        case Float:
            result.kind = ValueKind.Float;
            result.fvalue = v1.svalue * v2.fvalue;
            break;
        }
        break;
    case UnsignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            result.kind = ValueKind.SignedDecimal;
            result.svalue = cast<i64>(v1.uvalue) * v2.svalue;
            break;
        case UnsignedDecimal:
            result.kind = ValueKind.UnsignedDecimal;
            result.uvalue = v1.uvalue * v2.uvalue;
            break;
        case Float:
            result.kind = ValueKind.Float;
            result.fvalue = v1.uvalue * v2.fvalue;
            break;
        }
        break;
    case Float:
        result.kind = ValueKind.Float;
        switch (v2.kind) {
        case SignedDecimal:
            result.fvalue = v1.fvalue * v2.svalue;
            break;
        case UnsignedDecimal:
            result.fvalue = v1.fvalue * v2.uvalue;
            break;
        case Float:
            result.fvalue = v1.fvalue * v2.fvalue;
            break;
        }
        break;
    }
    return result;
}

public fn Value Value.divide(const Value* v1, const Value* v2) {
    Value result;
    switch (v1.kind) {
    case SignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            result.kind = ValueKind.SignedDecimal;
            result.svalue = v1.svalue / v2.svalue;
            break;
        case UnsignedDecimal:
            result.kind = ValueKind.SignedDecimal;
            result.svalue = v1.svalue / cast<i64>(v2.uvalue);
            break;
        case Float:
            result.kind = ValueKind.Float;
            result.fvalue = v1.svalue / v2.fvalue;
            break;
        }
        break;
    case UnsignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            result.kind = ValueKind.SignedDecimal;
            result.svalue = cast<i64>(v1.uvalue) / v2.svalue;
            break;
        case UnsignedDecimal:
            result.kind = ValueKind.UnsignedDecimal;
            result.uvalue = v1.uvalue / v2.uvalue;
            break;
        case Float:
            result.kind = ValueKind.Float;
            result.fvalue = v1.uvalue / v2.fvalue;
            break;
        }
        break;
    case Float:
        result.kind = ValueKind.Float;
        switch (v2.kind) {
        case SignedDecimal:
            result.fvalue = v1.fvalue / v2.svalue;
            break;
        case UnsignedDecimal:
            result.fvalue = v1.fvalue / v2.uvalue;
            break;
        case Float:
            result.fvalue = v1.fvalue / v2.fvalue;
            break;
        }
        break;
    }
    return result;
}

public fn Value Value.remainder(const Value* v1, const Value* v2) {
    assert(v1.isDecimal());
    assert(v2.isDecimal());

    // remainder of negative number is same as positive
    // -10 %  20  -> -10
    //  10 % -20  ->  10
    // -10 % -20  -> -10
    Value result;
    result.kind = v1.kind;
    if (v1.kind == ValueKind.SignedDecimal) {
        if (v2.kind == ValueKind.SignedDecimal) {
            result.svalue = v1.svalue % v2.svalue;
        } else {
            result.svalue = v1.svalue % cast<i64>(v2.uvalue);
        }
    } else {
        if (v2.kind == ValueKind.SignedDecimal) {
            result.uvalue = v1.uvalue % v2.svalue;
        } else {
            result.uvalue = v1.uvalue % v2.uvalue;
        }
    }
    return result;
}

public fn Value Value.and(const Value* v1, const Value* v2) {
    assert(v1.isDecimal());
    assert(v2.isDecimal());

    Value result;
    result.kind = ValueKind.UnsignedDecimal;
    if (v1.kind == ValueKind.SignedDecimal) {
        if (v2.kind == ValueKind.SignedDecimal) {
            result.svalue = v1.svalue & v2.svalue;
        } else {
            result.svalue = cast<i64>(v1.svalue & v2.uvalue);
        }
    } else {
        if (v2.kind == ValueKind.SignedDecimal) {
            result.uvalue = v1.uvalue & v2.svalue;
        } else {
            result.uvalue = v1.uvalue & v2.uvalue;
        }
    }
    return result;
}

public fn Value Value.or(const Value* v1, const Value* v2) {
    assert(v1.isDecimal());
    assert(v2.isDecimal());

    Value result;
    result.kind = ValueKind.UnsignedDecimal;
    if (v1.kind == ValueKind.SignedDecimal) {
        if (v2.kind == ValueKind.SignedDecimal) {
            result.svalue = v1.svalue | v2.svalue;
        } else {
            result.svalue = cast<i64>(v1.svalue | v2.uvalue);
        }
    } else {
        if (v2.kind == ValueKind.SignedDecimal) {
            result.uvalue = v1.uvalue | v2.svalue;
        } else {
            result.uvalue = v1.uvalue | v2.uvalue;
        }
    }
    return result;
}

public fn Value Value.xor(const Value* v1, const Value* v2) {
    assert(v1.isDecimal());
    assert(v2.isDecimal());

    Value result;
    result.kind = ValueKind.UnsignedDecimal;
    if (v1.kind == ValueKind.SignedDecimal) {
        if (v2.kind == ValueKind.SignedDecimal) {
            result.svalue = v1.svalue ^ v2.svalue;
        } else {
            result.svalue = cast<i64>(v1.svalue ^ v2.uvalue);
        }
    } else {
        if (v2.kind == ValueKind.SignedDecimal) {
            result.uvalue = v1.uvalue ^ v2.svalue;
        } else {
            result.uvalue = v1.uvalue ^ v2.uvalue;
        }
    }
    return result;
}

public fn bool Value.to_bool(const Value* v) {
    switch (v.kind) {
    case SignedDecimal:
        return v.svalue;
    case UnsignedDecimal:
        return v.uvalue;
    case Float:
        return v.fvalue != 0;
    }
    return false;
}

public fn Value Value.land(const Value* v1, const Value* v2) {
    Value result;
    result.kind = ValueKind.UnsignedDecimal;
    result.uvalue = v1.to_bool() && v2.to_bool();
    return result;
}

public fn Value Value.lor(const Value* v1, const Value* v2) {
    Value result;
    result.kind = ValueKind.UnsignedDecimal;
    result.uvalue = v1.to_bool() || v2.to_bool();
    return result;
}

public fn void Value.mask(Value* v, u32 width) {
    u64 mask = 0;
    for (u32 i=0; i<width; i++) mask |= (1<<i);

    v.uvalue &= mask;
}

public fn bool Value.is_equal(const Value* v1, const Value* v2) {
    switch (v1.kind) {
    case SignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            return v1.svalue == v2.svalue;
        case UnsignedDecimal:
            if (v2.uvalue > max_i64) return false;
            return v1.svalue == cast<i64>(v2.uvalue);
        case Float:
            return v1.svalue == v2.fvalue;
        }
        break;
    case UnsignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            if (v1.uvalue > max_i64) return false;
            return cast<i64>(v1.uvalue) == v2.svalue;
        case UnsignedDecimal:
            return v1.uvalue == v2.uvalue;
        case Float:
            return v1.uvalue == v2.fvalue;
        }
        break;
    case Float:
        switch (v2.kind) {
        case SignedDecimal:
            return v1.fvalue == v2.svalue;
        case UnsignedDecimal:
            return v1.fvalue == v2.uvalue;
        case Float:
            return v1.fvalue == v2.fvalue;
        }
        break;
    }
    return false;
}

public fn bool Value.is_less(const Value* v1, const Value* v2) {
    switch (v1.kind) {
    case SignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            return v1.svalue < v2.svalue;
        case UnsignedDecimal:
            if (v2.uvalue > max_i64) return true;
            return v1.svalue < cast<i64>(v2.uvalue);
        case Float:
            return v1.svalue < v2.fvalue;
        }
        break;
    case UnsignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            if (v1.uvalue > max_i64) return false;
            return cast<i64>(v1.uvalue) < v2.svalue;
        case UnsignedDecimal:
            return v1.uvalue < v2.uvalue;
        case Float:
            return v1.uvalue < v2.fvalue;
        }
        break;
    case Float:
        switch (v2.kind) {
        case SignedDecimal:
            return v1.fvalue < v2.svalue;
        case UnsignedDecimal:
            return v1.fvalue < v2.uvalue;
        case Float:
            return v1.fvalue < v2.fvalue;
        }
        break;
    }
    return false;
}

public fn bool Value.is_greater(const Value* v1, const Value* v2) {
    switch (v1.kind) {
    case SignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            return v1.svalue > v2.svalue;
        case UnsignedDecimal:
            if (v2.uvalue > max_i64) return false;
            return v1.svalue > cast<i64>(v2.uvalue);
        case Float:
            return v1.svalue > v2.fvalue;
        }
        break;
    case UnsignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            if (v2.svalue < 0) return true;
            return cast<i64>(v1.uvalue) > v2.svalue;
        case UnsignedDecimal:
            return v1.uvalue > v2.uvalue;
        case Float:
            return v1.uvalue > v2.fvalue;
        }
        break;
    case Float:
        switch (v2.kind) {
        case SignedDecimal:
            return v1.fvalue > v2.svalue;
        case UnsignedDecimal:
            return v1.fvalue > v2.uvalue;
        case Float:
            return v1.fvalue > v2.fvalue;
        }
        break;
    }
    return false;
}

public fn bool Value.is_less_equal(const Value* v1, const Value* v2) {
    switch (v1.kind) {
    case SignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            return v1.svalue <= v2.svalue;
        case UnsignedDecimal:
            if (v2.uvalue > max_i64) return true;
            return v1.svalue <= cast<i64>(v2.uvalue);
        case Float:
            return v1.svalue <= v2.fvalue;
        }
        break;
    case UnsignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            if (v1.uvalue > max_i64) return false;
            return cast<i64>(v1.uvalue) <= v2.svalue;
        case UnsignedDecimal:
            return v1.uvalue <= v2.uvalue;
        case Float:
            return v1.uvalue <= v2.fvalue;
        }
        break;
    case Float:
        switch (v2.kind) {
        case SignedDecimal:
            return v1.fvalue <= v2.svalue;
        case UnsignedDecimal:
            return v1.fvalue <= v2.uvalue;
        case Float:
            return v1.fvalue <= v2.fvalue;
        }
        break;
    }
    return false;
}

public fn bool Value.is_greater_equal(const Value* v1, const Value* v2) {
    switch (v1.kind) {
    case SignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            return v1.svalue >= v2.svalue;
        case UnsignedDecimal:
            if (v2.uvalue > max_i64) return false;
            return v1.svalue >= cast<i64>(v2.uvalue);
        case Float:
            return v1.svalue >= v2.fvalue;
        }
        break;
    case UnsignedDecimal:
        switch (v2.kind) {
        case SignedDecimal:
            if (v2.svalue < 0) return true;
            return cast<i64>(v1.uvalue) >= v2.svalue;
        case UnsignedDecimal:
            return v1.uvalue >= v2.uvalue;
        case Float:
            return v1.uvalue >= v2.fvalue;
        }
        break;
    case Float:
        switch (v2.kind) {
        case SignedDecimal:
            return v1.fvalue >= v2.svalue;
        case UnsignedDecimal:
            return v1.fvalue >= v2.uvalue;
        case Float:
            return v1.fvalue >= v2.fvalue;
        }
        break;
    }
    return false;
}

public fn bool Value.ugt(const Value* v1, u64 max) {
    switch (v1.kind) {
    case SignedDecimal:
        if (v1.svalue < 0) return false;
        u64 lval = cast<u64>(v1.svalue);
        return lval > max;
    case UnsignedDecimal:
        return v1.uvalue > max;
    case Float:
        break;
    }
    return false;
}

public fn void Value.incr(Value* v) {
    switch (v.kind) {
    case SignedDecimal:
        v.svalue++;
        break;
    case UnsignedDecimal:
        v.uvalue++;
        break;
    case Float:
        v.fvalue += 1;
        break;
    }
}

public fn const char* Value.str(const Value* v) {
    local char[4][64] text;
    local u8 index = 0;
    char* out = text[index];
    index = (index+1) % 4;

    switch (v.kind) {
    case SignedDecimal:
        stdio.sprintf(out, "%d", v.svalue);
        break;
    case UnsignedDecimal:
        stdio.sprintf(out, "%d", v.uvalue);
        break;
    case Float:
        stdio.sprintf(out, "%f", v.fvalue);
        break;
    }
    return out;
}

public fn const char* Value.str2(const Value* v) {
    local char[4][64] text;
    local u8 index = 0;
    char* out = text[index];
    index = (index+1) % 4;

    switch (v.kind) {
    case SignedDecimal:
        stdio.sprintf(out, "S %d", v.svalue);
        break;
    case UnsignedDecimal:
        stdio.sprintf(out, "U %d", v.uvalue);
        break;
    case Float:
        stdio.sprintf(out, "F %f", v.fvalue);
        break;
    }
    return out;
}


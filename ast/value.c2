/* Copyright 2022-2024 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import stdio;

public type Value struct {
    bool is_signed;
    union {
        u64 uvalue;
        i64 svalue;
    }
}

public fn bool Value.isNegative(const Value* v) {
    if (v.is_signed && v.svalue < 0) return true;
    return false;
}

public fn bool Value.equals(const Value* v1, const Value* v2) {
    if (v1.is_signed == v2.is_signed) {
        return v1.uvalue == v2.uvalue;
    }
    if (v1.is_signed) {
        if (v1.svalue >= 0) return v1.uvalue == v2.uvalue;
    } else {
        if (v2.svalue >= 0) return v1.uvalue == v2.uvalue;
    }
    return false;
}

public fn bool Value.less_than(const Value* v1, const Value* v2) {
    if (v1.is_signed) {
        if (v2.is_signed) {
            return v1.svalue < v2.svalue;
        }
        if (v1.svalue < 0) return true;
        u64 lval = cast<u64>(v1.svalue);
        return lval < v2.uvalue;
    } else {
        if (v2.is_signed && v2.svalue <= 0) return false;
        return v1.uvalue < cast<u64>(v2.svalue);
    }
    return true;
}

public fn Value Value.minus(const Value* v1, const Value* v2) {
    Value result;
    result.is_signed = false;
    if (v1.is_signed) {
        result.is_signed = true;
        if (v2.is_signed) {
            result.svalue = v1.svalue - v2.svalue;
        } else {
            result.svalue = v1.svalue - cast<i64>(v2.uvalue);
        }
    } else {
        if (v2.is_signed) {
            result.is_signed = true;
            result.svalue = cast<i64>(v1.uvalue - v2.svalue);
        } else {
            result.uvalue = v1.uvalue - v2.uvalue;
        }
    }
    return result;
}

public fn void Value.mask(Value* v, u32 width) {
    u64 mask = 0;
    for (u32 i=0; i<width; i++) mask |= (1<<i);

    v.uvalue &= mask;
}

public fn bool Value.ugt(const Value* v1, u64 max) {
    if (v1.is_signed) {
        if (v1.svalue < 0) return false;
        u64 lval = cast<u64>(v1.svalue);

        return lval > max;
    }
    return v1.uvalue > max;
}

public fn void Value.incr(Value* v) {
    if (v.is_signed) v.svalue++;
    else v.uvalue++;
}

public fn const char* Value.str(const Value* v) {
    local char[4][32] text;
    local u8 index = 0;
    char* out = text[index];
    index = (index+1) % 4;
    if (v.is_signed) {
        stdio.sprintf(out, "%d", v.svalue);
    } else {
        stdio.sprintf(out, "%d", v.uvalue);
    }
    return out;
}


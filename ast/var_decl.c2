/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

type VarDeclBits struct {
    u32 : NumDeclBits;
    u32 has_init_or_bitfield : 1;
    u32 has_local : 1;
    u32 kind : 3;
}

public type VarDeclKind enum u8 {
    GlobalVar,
    LocalVar,
    FunctionParam,
    StructMember,
}

const char*[] varDeclNames = {
    " global",
    " local",
    " parameter",
    " member",
}

static_assert(elemsof(VarDeclKind), elemsof(varDeclNames));

public type VarDecl struct {
    Decl parent;
    QualType origType;  // needed for ast-walking
    Expr*[0] init;  // tail-allocated
} @(opaque)

public func VarDecl* VarDecl.create(ast_context.Context* c,
                                    VarDeclKind kind,
                                    const char* name,
                                    SrcLoc loc,
                                    bool is_public,
                                    QualType qt,
                                    AST* ast_,
                                    Expr* initValue) @(inline)
{
    u32 size = sizeof(VarDecl);
    if (initValue) size += sizeof(Expr*);
    VarDecl* d = c.alloc(size);
    d.parent.init(DeclKind.Var, name, loc, is_public, qt, ast_);
    d.parent.varDeclBits.kind = kind;
    d.origType = qt;
    if (initValue) {
        d.parent.varDeclBits.has_init_or_bitfield = 1;
        d.init[0] = initValue;
    }
    return d;
}

public func VarDecl* VarDecl.createStructMember(ast_context.Context* c,
                                                const char* name,
                                                SrcLoc loc,
                                                bool is_public,
                                                QualType qt,
                                                AST* ast_,
                                                Expr* bitfield) @(inline)
{
    u32 size = sizeof(VarDecl);
    if (bitfield) size += sizeof(Expr*);
    VarDecl* d = c.alloc(size);
    d.parent.init(DeclKind.Var, name, loc, is_public, qt, ast_);
    d.parent.varDeclBits.kind = VarDeclKind.StructMember;

    if (bitfield) {
        d.parent.varDeclBits.has_init_or_bitfield = 1;
        d.init[0] = bitfield;
    }
    return d;
}

public func Decl* VarDecl.asDecl(VarDecl* d) @(inline) { return &d.parent; }

public func VarDeclKind VarDecl.getKind(const VarDecl* d) { return cast<VarDeclKind>(d.parent.varDeclBits.kind); }

public func QualType VarDecl.getOrigType(const VarDecl* d) { return d.origType; }


public func bool VarDecl.hasInit(const VarDecl* d) @(inline) {
    return d.parent.varDeclBits.has_init_or_bitfield;
}

public func Expr* VarDecl.getInit(const VarDecl* d) {
    if (d.parent.varDeclBits.has_init_or_bitfield) return d.init[0];
    return nil;
}

public func Expr* VarDecl.getInit2(const VarDecl* d) {
    if (d.parent.varDeclBits.has_init_or_bitfield) return &d.init[0];
    return nil;
}

public func void VarDecl.setLocal(VarDecl* d, bool has_local) {
    d.parent.varDeclBits.has_local = has_local;
}

func void VarDecl.print(const VarDecl* d, string_buffer.Buf* out, u32 indent) {
    d.parent.printKind(out, indent, "VarDecl");
    out.color(col_Attr);
    VarDeclKind k = d.getKind();
    out.add(varDeclNames[k]);
    if (k == VarDeclKind.StructMember && d.parent.varDeclBits.has_init_or_bitfield) out.add(" bitfield");
    d.parent.printBits(out);
    out.color(col_Value);
    d.parent.printName(out);
    out.add("\n");

    if (d.parent.varDeclBits.has_init_or_bitfield) {
        d.init[0].print(out, indent + 2);
    }
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context local;
import utils local;

import stdio local; // TEMP

type VarDeclBits struct {
    u32 : NumDeclBits;
    u32 has_init : 1;
}

public type VarDecl struct {
    Decl decl;
    Expr*[0] init;  // tail-allocated
} @(opaque)

public func VarDecl* VarDecl.create(Context* c, const char* name, SrcLoc loc, bool is_public, QualType qt, Expr* initValue) @(inline) {
    u32 size = sizeof(VarDecl);
    if (initValue) size += sizeof(Expr*);
    VarDecl* d = c.alloc(size);
    d.decl.init(DeclKind.Var, name, loc, is_public);
    // TODO put QualType in Decl
    if (initValue) {
        d.init[0] = initValue;
    }
    return d;
}

public func Decl* VarDecl.asDecl(VarDecl* d) @(inline) {
    return &d.decl;
}

public func void VarDecl.print(const VarDecl* d, StringBuffer* out, u32 indent) {
    out.indent(indent);
    out.print("VarDecl %s\n", d.decl.name);
    if (d.decl.varDeclBits.has_init) d.init[0].print(out, indent + 2);
}


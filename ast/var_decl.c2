/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import utils local;

type VarDeclBits struct {
    u32 : NumDeclBits;
    u32 has_init : 1;
    u32 kind : 3;
}

public type VarDeclKind enum u8 {
    GlobalVar,
    LocalVar,
    FunctionParam,
    StructMember,
}

const char*[] varDeclNames = {
    "global",
    "local",
    "function-param",
    "struct-member",
}

static_assert(elemsof(VarDeclKind), elemsof(varDeclNames));

public type VarDecl struct {
    Decl decl;
    QualType qt;
    Expr*[0] init;  // tail-allocated
} @(opaque)

public func VarDecl* VarDecl.create(ast_context.Context* c, VarDeclKind kind, const char* name, SrcLoc loc, bool is_public, QualType qt, Expr* initValue) @(inline) {
    u32 size = sizeof(VarDecl);
    if (initValue) size += sizeof(Expr*);
    VarDecl* d = c.alloc(size);
    d.decl.init(DeclKind.Var, name, loc, is_public);
    d.decl.varDeclBits.kind = kind;
    d.qt = qt;
    if (initValue) {
        d.decl.varDeclBits.has_init = 1;
        d.init[0] = initValue;
    }
    return d;
}

public func Decl* VarDecl.asDecl(VarDecl* d) @(inline) { return &d.decl; }

public func VarDeclKind VarDecl.getKind(const VarDecl* d) { return cast<VarDeclKind>(d.decl.varDeclBits.kind); }

public func void VarDecl.print(const VarDecl* d, StringBuffer* out, u32 indent) {
    out.indent(indent);
    out.print("VarDecl %s %s\n", d.decl.name, varDeclNames[d.getKind()]);
    d.qt.print(out, indent + 2);
    if (d.decl.varDeclBits.has_init) d.init[0].print(out, indent + 2);
}


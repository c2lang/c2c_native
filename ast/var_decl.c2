/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

type VarDeclBits struct {
    u32 : NumDeclBits;
    u32 has_init_or_bitfield : 1;
    u32 has_local : 1;
    u32 kind : 3;
}

public type VarDeclKind enum u8 {
    GlobalVar,
    LocalVar,
    FunctionParam,
    StructMember,
}

const char*[] varDeclNames = {
    " global",
    " local",
    " parameter",
    " member",
}

static_assert(elemsof(VarDeclKind), elemsof(varDeclNames));

public type VarDecl struct {
    Decl parent;
    TypeRef typeRef;    // Note: variable size due to tail allocs!
    //Expr*[0] init;      // tail-allocated, position changes
} @(opaque)

public func VarDecl* VarDecl.create(ast_context.Context* c,
                                    VarDeclKind kind,
                                    const char* name,
                                    SrcLoc loc,
                                    bool is_public,
                                    const TypeRefHolder* ref,
                                    AST* ast_,
                                    Expr* initValue) @(inline)
{
    u32 size = sizeof(VarDecl) + ref.getExtraSize();
    if (initValue) size += sizeof(Expr*);

    VarDecl* d = c.alloc(size);
    QualType qt = { 0 } // BB TODO create separate init
    d.parent.init(DeclKind.Var, name, loc, is_public, qt, ast_);
    d.parent.varDeclBits.kind = kind;
    ref.fill(&d.typeRef);
    if (initValue) {
        d.parent.varDeclBits.has_init_or_bitfield = 1;
        Expr** i = d.getInit2();
        *i = initValue;
    }
    return d;
}

public func VarDecl* VarDecl.createStructMember(ast_context.Context* c,
                                                const char* name,
                                                SrcLoc loc,
                                                bool is_public,
                                                const TypeRefHolder* ref,
                                                AST* ast_,
                                                Expr* bitfield) @(inline)
{
    u32 size = sizeof(VarDecl) + ref.getExtraSize();
    if (bitfield) size += sizeof(Expr*);

    VarDecl* d = c.alloc(size);
    QualType qt = { 0 }
    d.parent.init(DeclKind.Var, name, loc, is_public, qt, ast_);
    d.parent.varDeclBits.kind = VarDeclKind.StructMember;

    ref.fill(&d.typeRef);
    if (bitfield) {
        d.parent.varDeclBits.has_init_or_bitfield = 1;
        Expr** i = d.getInit2();
        *i = bitfield;
    }
    return d;
}

public func Decl* VarDecl.asDecl(VarDecl* d) @(inline) { return &d.parent; }

public func VarDeclKind VarDecl.getKind(const VarDecl* d) { return cast<VarDeclKind>(d.parent.varDeclBits.kind); }

public func TypeRef* VarDecl.getTypeRef(VarDecl* d) { return &d.typeRef; }

public func bool VarDecl.hasInit(const VarDecl* d) @(inline) {
    return d.parent.varDeclBits.has_init_or_bitfield;
}

public func Expr* VarDecl.getInit(const VarDecl* d) {
    if (d.parent.varDeclBits.has_init_or_bitfield) {
        Expr** init_ = d.typeRef.getPointerAfter();
        return init_[0];
    }
    return nil;
}

public func Expr** VarDecl.getInit2(VarDecl* d) {
    if (d.parent.varDeclBits.has_init_or_bitfield) {
        return d.typeRef.getPointerAfter();
    }
    return nil;
}

public func void VarDecl.setLocal(VarDecl* d, bool has_local) {
    d.parent.varDeclBits.has_local = has_local;
}

func void VarDecl.print(const VarDecl* d, string_buffer.Buf* out, u32 indent) {
    bool valid_type = d.parent.qt.isValid();
    d.parent.printKind(out, indent, "VarDecl", valid_type);
    if (!valid_type) {
        out.add(" ");
        d.typeRef.print(out, true);
    }
    out.color(col_Attr);
    VarDeclKind k = d.getKind();
    out.add(varDeclNames[k]);
    if (k == VarDeclKind.StructMember && d.parent.varDeclBits.has_init_or_bitfield) out.add(" bitfield");
    d.parent.printBits(out);
    out.color(col_Value);
    d.parent.printName(out);
    out.add("\n");

    if (d.parent.varDeclBits.has_init_or_bitfield) {
        Expr* i = d.getInit();
        i.print(out, indent + 2);
    }
}

func void VarDecl.printType(const VarDecl* d, string_buffer.Buf* out) {
    if (d.parent.qt.isValid()) {
        d.parent.qt.printQuoted(out);
    } else {
        d.typeRef.print(out, true);
    }
}

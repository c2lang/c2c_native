/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;

public type VarDeclKind enum u8 {
    GlobalVar,
    LocalVar,
    FunctionParam,
    StructMember,
}

const char*[] varDeclNames = {
    " global",
    " local",
    " parameter",
    " member",
}

static_assert(elemsof(VarDeclKind), elemsof(varDeclNames));

type VarDeclBits struct {
    u32 : NumDeclBits;
    u32 kind : 3;
    u32 has_init_or_bitfield : 1;
    u32 has_local : 1;
    u32 attr_weak : 1;
}

public type VarDecl struct {
    Decl parent;
    TypeRef typeRef;    // Note: variable size due to tail allocs!
    //Expr*[0] init;    // also for bitfields, tail-allocated, position changes
    //u32 offset        // tail-allocated, position changes, for struct members
} @(opaque)

public func VarDecl* VarDecl.create(ast_context.Context* c,
                                    VarDeclKind kind,
                                    u32 name,
                                    SrcLoc loc,
                                    bool is_public,
                                    const TypeRefHolder* ref,
                                    u32 ast_idx,
                                    Expr* initValue) @(inline)
{
    u32 size = sizeof(VarDecl) + ref.getExtraSize();
    if (initValue) size += sizeof(Expr*);
    assert (kind != VarDeclKind.StructMember);

    VarDecl* d = c.alloc(size);
    d.parent.init(DeclKind.Var, name, loc, is_public, QualType_Invalid, ast_idx);
    d.parent.varDeclBits.kind = kind;
    ref.fill(&d.typeRef);
    if (initValue) {
        d.parent.varDeclBits.has_init_or_bitfield = 1;
        Expr** i = d.getInit2();
        *i = initValue;
    }
#if AstStatistics
    Stats.addDecl(DeclKind.Var, size);
#endif
    return d;
}

public func VarDecl* VarDecl.createStructMember(ast_context.Context* c,
                                                u32 name,
                                                SrcLoc loc,
                                                bool is_public,
                                                const TypeRefHolder* ref,
                                                u32 ast_idx,
                                                Expr* bitfield) @(inline)
{
    u32 size = sizeof(VarDecl) + ref.getExtraSize();
    if (bitfield) size += sizeof(Expr*);
    size += sizeof(u32);
    size = (size + 7) & ~0x7; // round to 8-byte (temp)

    VarDecl* d = c.alloc(size);
    d.parent.init(DeclKind.Var, name, loc, is_public, QualType_Invalid, ast_idx);
    d.parent.varDeclBits.kind = VarDeclKind.StructMember;

    if (name == 0) d.parent.setUsed();  // set unnamed member to used
    ref.fill(&d.typeRef);
    if (bitfield) {
        d.parent.varDeclBits.has_init_or_bitfield = 1;
        Expr** i = d.getInit2();
        *i = bitfield;
    }
    u32* ptr = d.getOffsetPtr();
    *ptr = 0;
#if AstStatistics
    Stats.addDecl(DeclKind.Var, size);
#endif
    return d;
}

func VarDecl* VarDecl.instantiate(const VarDecl* vd, Instantiator* inst)
{
    bool matches = vd.typeRef.matchesTemplate(inst.template_name);
    u32 extra = matches ? inst.ref.getExtraSize() : vd.typeRef.getExtraSize();
    u32 size = sizeof(VarDecl) + extra;
    VarDecl* vd2 = inst.c.alloc(size);
    vd2.parent = vd.parent;
    vd2.typeRef.instantiate(&vd.typeRef, inst);

    Expr* ie = vd.getInit();
    if (ie) {
        Expr** ie2 = vd2.getInit2();
        *ie2 = ie.instantiate(inst);
    }
#if AstStatistics
    Stats.addDecl(DeclKind.Var, size);
#endif
    return vd2;
}

public func Decl* VarDecl.asDecl(VarDecl* d) @(inline) {
    return &d.parent;
}

public func VarDeclKind VarDecl.getKind(const VarDecl* d) {
    return cast<VarDeclKind>(d.parent.varDeclBits.kind);
}

public func bool VarDecl.isGlobal(const VarDecl* d) {
    return d.getKind() == VarDeclKind.GlobalVar;
}

public func bool VarDecl.isLocal(const VarDecl* d) {
    return d.getKind() == VarDeclKind.LocalVar;
}

public func TypeRef* VarDecl.getTypeRef(VarDecl* d) { return &d.typeRef; }

public func bool VarDecl.hasInit(const VarDecl* d) @(inline) {
    return d.parent.varDeclBits.has_init_or_bitfield;
}

public func Expr* VarDecl.getInit(const VarDecl* d) {
    if (d.parent.varDeclBits.has_init_or_bitfield) {
        Expr** init_ = d.typeRef.getPointerAfter();
        return init_[0];
    }
    return nil;
}

public func Expr** VarDecl.getInit2(VarDecl* d) {
    if (d.parent.varDeclBits.has_init_or_bitfield) {
        return d.typeRef.getPointerAfter();
    }
    return nil;
}

public func Expr* VarDecl.getBitfield(const VarDecl* d) {
    if (d.getKind() == VarDeclKind.StructMember) return d.getInit();
    return nil;
}

public func bool VarDecl.hasLocalQualifier(const VarDecl* d) {
    return d.parent.varDeclBits.has_local;
}

public func void VarDecl.setLocal(VarDecl* d, bool has_local) {
    d.parent.varDeclBits.has_local = has_local;
}

public func void VarDecl.setAttrWeak(VarDecl* d) {
    d.parent.varDeclBits.attr_weak = 1;
}

public func void VarDecl.setOffset(VarDecl* d, u32 offset) {
    u32* ptr = d.getOffsetPtr();
    *ptr = offset;
}

public func u32 VarDecl.getOffset(const VarDecl* d) {
    return *d.getOffsetPtr();
}

func u32* VarDecl.getOffsetPtr(const VarDecl* d) {
    u8* tail = d.typeRef.getPointerAfter();
    if (d.parent.varDeclBits.has_init_or_bitfield) tail += sizeof(Expr*);
    return cast<u32*>(tail);
}

func void VarDecl.print(const VarDecl* d, string_buffer.Buf* out, u32 indent) {
    bool valid_type = d.parent.qt.isValid();
    d.parent.printKind(out, indent, valid_type);
    if (!valid_type) {
        out.add1(' ');
        d.typeRef.print(out, true);
    }
    out.color(col_Attr);
    VarDeclKind k = d.getKind();
    out.add(varDeclNames[k]);
    bool has_init_or_bitfield = d.parent.varDeclBits.has_init_or_bitfield;
    if (k == VarDeclKind.StructMember && has_init_or_bitfield) out.add(" bitfield");
    if (d.parent.varDeclBits.attr_weak) out.add(" weak");
    d.parent.printBits(out);
    d.parent.printAttrs(out);
    if (k == VarDeclKind.StructMember) {
        out.color(col_Calc);
        out.print(" offset=%u", *d.getOffsetPtr());
    }
    out.color(col_Value);
    d.parent.printName(out);
    out.add1('\n');

    if (has_init_or_bitfield) {
        Expr* i = d.getInit();
        i.print(out, indent + 1);
    }
}

func void VarDecl.printType(const VarDecl* d, string_buffer.Buf* out) {
    if (d.parent.qt.isValid()) {
        d.parent.qt.printQuoted(out);
    } else {
        d.typeRef.print(out, true);
    }
}

// Note: only prints what needed for .c2i file
public func void VarDecl.printLiteral(const VarDecl* d, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);

    d.typeRef.print(out, true);
    out.add1(' ');
    out.add(d.parent.getName());

    // TODO attributes? weak etc
    // TODO if really constant, not const char* etc
    if (d.typeRef.isConst() && d.getInit()) {
        Expr* initExpr = d.getInit();
        out.add(" = ");
        initExpr.printLiteral(out);
    }
    // Note: dont print ; because this could also be a function argument
}


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

type VarDeclBits struct {
    u32 : NumDeclBits;
    u32 has_init_or_bitfield : 1;
    u32 has_local : 1;
    u32 kind : 3;
}

public type VarDeclKind enum u8 {
    GlobalVar,
    LocalVar,
    FunctionParam,
    StructMember,
}

const char*[] varDeclNames = {
    " global",
    " local",
    " parameter",
    " member",
}

static_assert(elemsof(VarDeclKind), elemsof(varDeclNames));

public type VarDecl struct {
    Decl decl;
    QualType qt;
    Expr*[0] init;  // tail-allocated
} @(opaque)

public func VarDecl* VarDecl.create(ast_context.Context* c, VarDeclKind kind, const char* name, SrcLoc loc, bool is_public, QualType qt, Expr* initValue) @(inline) {
    u32 size = sizeof(VarDecl);
    if (initValue) size += sizeof(Expr*);
    VarDecl* d = c.alloc(size);
    d.decl.init(DeclKind.Var, name, loc, is_public);
    d.decl.varDeclBits.kind = kind;
    d.qt = qt;
    if (initValue) {
        d.decl.varDeclBits.has_init_or_bitfield = 1;
        d.init[0] = initValue;
    }
    return d;
}

public func VarDecl* VarDecl.createStructMember(ast_context.Context* c, const char* name, SrcLoc loc, bool is_public, QualType qt, Expr* bitfield) @(inline) {
    u32 size = sizeof(VarDecl);
    if (bitfield) size += sizeof(Expr*);
    VarDecl* d = c.alloc(size);
    d.decl.init(DeclKind.Var, name, loc, is_public);
    d.decl.varDeclBits.kind = VarDeclKind.StructMember;
    d.qt = qt;
    if (bitfield) {
        d.decl.varDeclBits.has_init_or_bitfield = 1;
        d.init[0] = bitfield;
    }
    return d;
}

public func Decl* VarDecl.asDecl(VarDecl* d) @(inline) { return &d.decl; }

public func VarDeclKind VarDecl.getKind(const VarDecl* d) { return cast<VarDeclKind>(d.decl.varDeclBits.kind); }

public func void VarDecl.setLocal(VarDecl* d, bool has_local) {
    d.decl.varDeclBits.has_local = has_local;
}

public func void VarDecl.print(const VarDecl* d, string_buffer.Buf* out, u32 indent) {
    d.decl.printKind(out, indent, "VarDecl");
    out.add(" ");
    d.qt.printQuoted(out);
    out.color(col_Attr);
    VarDeclKind k = d.getKind();
    out.add(varDeclNames[k]);
    if (k == VarDeclKind.StructMember && d.decl.varDeclBits.has_init_or_bitfield) out.add(" bitfield");
    d.decl.printBits(out);
    out.color(col_Value);
    d.decl.printName(out);
    out.add("\n");

    if (k != VarDeclKind.StructMember && d.decl.varDeclBits.has_init_or_bitfield) {
        d.init[0].print(out, indent + 2);
    }
}


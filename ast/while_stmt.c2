/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;

public type WhileStmt struct @(opaque) {
    Stmt parent;
    Stmt* cond;
    Stmt* body;
}

public fn WhileStmt* WhileStmt.create(ast_context.Context* c,
                                        Stmt* cond,
                                        Stmt* body)
{
    WhileStmt* s = c.alloc(sizeof(WhileStmt));
    s.parent.init(StmtKind.While);
    s.cond = cond;
    s.body = body;
#if AstStatistics
    Stats.addStmt(StmtKind.While, sizeof(WhileStmt));
#endif
    return s;
}

fn Stmt* WhileStmt.instantiate(WhileStmt* s, Instantiator* inst) {
    Stmt* cond2 = s.cond.instantiate(inst);
    Stmt* body2 = s.body.instantiate(inst);
    return cast<Stmt*>(WhileStmt.create(inst.c, cond2, body2));
}

fn void WhileStmt.print(const WhileStmt* s, string_buffer.Buf* out, u32 indent) {
    s.parent.printKind(out, indent);
    out.newline();

    s.cond.print(out, indent + 1);
    s.body.print(out, indent + 1);
}

public fn Stmt* WhileStmt.getCond(const WhileStmt* s) { return s.cond; }
public fn Stmt** WhileStmt.getCond2(WhileStmt* s) { return &s.cond; }

public fn Stmt* WhileStmt.getBody(const WhileStmt* s) { return s.body; }


/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;

public type WhileStmt struct {
    Stmt parent;
    Stmt* cond;
    Stmt* body;
} @(opaque)

public func WhileStmt* WhileStmt.create(ast_context.Context* c, Stmt* cond, Stmt* body) @(inline) {
    WhileStmt* s = c.alloc(sizeof(WhileStmt));
    s.parent.init(StmtKind.While);
    s.cond = cond;
    s.body = body;
#if AstStatistics
    Stats.addStmt(StmtKind.While, sizeof(WhileStmt));
#endif
    return s;
}

func void WhileStmt.print(const WhileStmt* s, string_buffer.Buf* out, u32 indent) {
    s.parent.printKind(out, indent);
    out.add1('\n');

    s.cond.print(out, indent + 1);
    s.body.print(out, indent + 1);
}

public func Stmt* WhileStmt.getCond(const WhileStmt* s) @(inline) { return s.cond; }
public func Stmt** WhileStmt.getCond2(WhileStmt* s) @(inline) { return &s.cond; }

public func Stmt* WhileStmt.getBody(const WhileStmt* s) @(inline) { return s.body; }


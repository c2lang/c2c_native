/* Copyright 2022 Bas van den Berg
*/

module ast;

import ast_context;
import string_buffer;
import utils local;

public type WhileStmt struct {
    Stmt stmt;
    Stmt* cond;
    Stmt* then;
} @(opaque)

public func WhileStmt* WhileStmt.create(ast_context.Context* c, Stmt* cond, Stmt* then) @(inline) {
    WhileStmt* s = c.alloc(sizeof(WhileStmt));
    s.stmt.init(StmtKind.While);
    s.cond = cond;
    s.then = then;
    return s;
}

public func void WhileStmt.print(const WhileStmt* s, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.color(col_Stmt);
    out.add("WhileStmt\n");
    s.cond.print(out, indent + 2);
    s.then.print(out, indent + 2);
}

public func Stmt* WhileStmt.getCond(const WhileStmt* s) @(inline) { return s.cond; }

public func Stmt* WhileStmt.getThen(const WhileStmt* s) @(inline) { return s.then; }


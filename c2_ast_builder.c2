module c2_ast_builder;

import stdlib local;
import stdio local;

public type Builder struct {

} @(opaque)

public func Builder* Builder.create() {
    Builder* b = calloc(1, sizeof(Builder));
    return b;
}

public func void Builder.free(Builder* b) {
    free(b);
}

public func void Builder.actOnModule(Builder* b, const char* mod_name, u32 mod_loc) {
    printf("MODULE %s\n", mod_name);
    // TODO store
}

public func void Builder.actOnImport(Builder* b, const char* mod_name, u32 mod_loc, const char* alias_name, u32 alias_loc, bool islocal) {
    printf("IMPORT %s (as %s) %s\n", mod_name, alias_name, islocal ? "local" : "");
    // TODO store
}

public func void Builder.actOnStructType(Builder* b, const char* name, u32 loc, bool is_struct, bool is_public, bool is_global) {
    printf("%s %s  %s %s\n", is_struct ? "STRUCT" : "UNION", name, is_public ? "public" : "", is_global ? "global" : "");
    // TODO store
}

public func void Builder.actOnAttr(Builder* b, const char* name, u32 begin_loc, u32 end_loc) {
    printf("ATTR  %s\n", name);
}


module c2_ast_builder;

import tokens;
import ast local;
import ast_context local;

import stdlib local;
import stdio local;

public type Builder struct {
    Context* context;
} @(opaque)

public func Builder* Builder.create(Context* c) {
    Builder* b = calloc(1, sizeof(Builder));
    b.context = c;
    return b;
}

public func void Builder.free(Builder* b) {
    free(b);
}

public func void Builder.actOnModule(Builder* b, const char* mod_name, u32 mod_loc) {
    printf("MODULE %s\n", mod_name);
    // TODO store
}

public func void Builder.actOnImport(Builder* b, const char* mod_name, u32 mod_loc, const char* alias_name, u32 alias_loc, bool islocal) {
    ImportDecl.create(b.context, mod_name, mod_loc, alias_name, alias_loc, islocal);
}

public func void Builder.actOnStructType(Builder* b, const char* name, u32 loc, bool is_struct, bool is_public, bool is_global) {
    printf("%s %s  %s %s\n", is_struct ? "STRUCT" : "UNION", name, is_public ? "public" : "", is_global ? "global" : "");
    // TODO store
}

public func void Builder.actOnAttr(Builder* b, const char* name, u32 begin_loc, u32 end_loc) {
    printf("ATTR  %s\n", name);
}

public func void Builder.actOnBuiltinType(Builder* b, tokens.Kind kind) {
    printf("BUILTIN\n");
}

public func void Builder.actOnPointerType(Builder* b, /*base.get(),*/ u32 qualifier) {
    printf("POINTER\n");
}

public func void Builder.actOnTypeQualifier(Builder* b, u32 qualifier) {
    printf("QUALIFIER\n");
}

public func void Builder.actOnIdExpression(Builder* b, const char* name, u32 loc) {
    printf("ID %s\n", name);
}

public func void Builder.actOnFuncDecl(Builder* b, const char* name, u32 loc, bool is_public) {
    printf("FUNC %s %s\n", name, is_public ? "public" : "");
}


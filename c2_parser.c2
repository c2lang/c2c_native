module c2_parser;

import c2_source_mgr local;
import c2_tokenizer local;
import c2_ast_builder local;
import utils;
import color;

import stdarg local;
import stdlib local;
import string local;
import csetjmp local;
import ctype local;
import stdio local;


// TEMP HERE
char[1024*1024] alloc_buf;
u32 alloc_idx;

func const char* alloc(void* arg, const char* value, u32 len) {
    char* start = alloc_buf + alloc_idx;
    memcpy(start, value, len);
    alloc_idx += len;
    alloc_buf[alloc_idx] = 0;
    alloc_idx++;
    return start;
}

public type Parser struct {
    Tokenizer tokenizer;
    Token tok;
    Builder* builder;
    SourceMgr* sm;
    i32 file_id;

    JmpBufTag jmpbuf;
    char[256] error_msg;
} @(opaque)

public func Parser* create(SourceMgr* sm, i32 file_id) {
    Parser* p = calloc(1, sizeof(Parser));
    p.sm = sm;
    p.file_id = file_id;
    // TEMP create Builder here
    p.builder = Builder.create();

    return p;
}

public func void Parser.free(Parser* p) {
    p.builder.free();
    free(p);
}

public func bool Parser.parse(Parser* p) {
    p.error_msg[0] = 0;
    alloc_idx = 0;

    u64 t1 = utils.now();
#if 0
    i32 res = setjmp(&p.jmpbuf);
    if (res == 0) {

        p.tokenizer.init(p.sm.get_content(p.file_id), p.sm.get_offset(p.file_id), alloc, nil);
        p.tok.init();

        p.consumeToken();

        p.parseModule();
        p.parseImports();

        while (p.tok.more) {
            p.parseTopLevel();
        }
    } else {
        printf("%s\n", p.error_msg);
        return false;
    }
#else
    p.tokenizer.init(p.sm.get_content(p.file_id), p.sm.get_offset(p.file_id), alloc, nil);
    p.tok.init();
    u32 token_count = 0;
    while (p.tok.more) {
        p.tokenizer.lex(&p.tok);
        dump_token(p.sm, &p.tok);
        token_count++;
    }
#endif
    u64 t2 = utils.now();
    printf("--- %u tokens (%u alloc)  (%llu usec) ---\n", token_count, alloc_idx, t2 - t1);
/*
    if (p.tok.kind == TokenKind.Error) {
        c2_source_mgr.Location loc = p.sm.locate(p.tok.loc);
        printf("%s:%u:%u: %serror:%s %s\n",  loc.filename, loc.line, loc.column, color.Red, color.Normal, p.tok.error_msg);
        return false;
    }
*/
    return true;
}

func void Parser.consumeToken(Parser* p) {
    p.tokenizer.lex(&p.tok);

    // TODO dont check here, just jump from inner scope (pass jmpbuf to tokenizer)?
    if (p.tok.kind == TokenKind.Error) {
        p.error(p.tok.error_msg);
    }
}

func void Parser.expectAndConsume(Parser* p, TokenKind kind) {
    if (p.tok.kind == kind) {
        p.consumeToken();
        return;
    }

    p.error("expected %s got %s", kind2str(kind), kind2str(p.tok.kind));
}

func void Parser.expectIdentifier(Parser* p) {
    if (p.tok.kind == TokenKind.Identifier) return;

    p.error("expected identifier");
}

func void Parser.error(Parser* p, const char* format, ...) @(noreturn) {
    char* cp = p.error_msg;
    cp += sprintf(cp, "%s: error: ", p.sm.loc2str(p.tok.loc));
    Va_list args;
    va_start(args, format);
    vsnprintf(cp, sizeof(p.error_msg)-1, format, args);
    va_end(args);
    longjmp(&p.jmpbuf, 1);
}

func void Parser.parseModule(Parser* p) {
    p.expectAndConsume(TokenKind.KW_module);
    p.expectIdentifier();

    p.builder.actOnModule(p.tok.text_value, p.tok.loc);
    p.consumeToken();
    p.expectAndConsume(TokenKind.Semicolon);
}

func void Parser.parseImports(Parser* p) {
    while (p.tok.kind == TokenKind.KW_import) {
        p.consumeToken();
        p.expectIdentifier();
        const char* mod_name = p.tok.text_value;
        u32 mod_loc = p.tok.loc;

        const char* alias_name = nil;
        u32 alias_loc = 0;
        p.consumeToken();
        if (p.tok.kind == TokenKind.KW_as) {
            p.consumeToken();
            p.expectIdentifier();
            alias_name = p.tok.text_value;
            alias_loc = p.tok.loc;
        }
        bool islocal = false;
        if (p.tok.kind == TokenKind.KW_local) {
            p.consumeToken();
            islocal = true;
        }
        p.expectAndConsume(TokenKind.Semicolon);

        p.builder.actOnImport(mod_name, mod_loc, alias_name, alias_loc, islocal);
    }
}

func void Parser.parseTopLevel(Parser* p) {
    // TODO need next-token for array-entry

    bool is_public = p.parseOptionalAccessSpecifier();
    switch (p.tok.kind) {
    // TODO order
    case TokenKind.Eof:
        break;
    case TokenKind.KW_import:
        p.error("import after decls");
        break;
    case TokenKind.KW_type:
        p.parseTypeDef(is_public);
        break;
    case TokenKind.KW_func:
        p.parseFuncDef(is_public);
        break;
    case TokenKind.KW_static_assert:
        if (is_public) p.error("static_assert cannot be public");
        p.parseStaticAssert();
        break;
    default:
        p.parseVarDef(is_public);
        break;
    }
}

func bool Parser.parseOptionalAccessSpecifier(Parser* p) {
    if (p.tok.kind == TokenKind.KW_public) {
        p.consumeToken();
        return true;
    }
    return false;
}

func void Parser.parseTypeDef(Parser* p, bool is_public) {
    p.consumeToken();
    p.expectIdentifier();
    const char* type_name = p.tok.text_value;
    u32 type_loc = p.tok.loc;
    p.consumeToken();

    if (!isupper(type_name[0])) p.error("type name must start with upper-case character");

    switch (p.tok.kind) {
    case TokenKind.KW_func:
        p.parseFuncType(type_name, type_loc, is_public);
        break;
    case TokenKind.KW_struct:
        p.parseStructType(true, type_name, type_loc, is_public);
        break;
    case TokenKind.KW_union:
        p.parseStructType(false, type_name, type_loc, is_public);
        break;
    case TokenKind.KW_enum:
        p.parseEnumType(type_name, type_loc, is_public);
        break;
    default:
        p.parseAliasType(type_name, type_loc, is_public);
        break;
    }
}

func void Parser.parseFuncType(Parser* p, const char* name, u32 loc, bool is_public) {
    p.consumeToken();
    // TODO
}

func void Parser.parseStructType(Parser* p, bool is_struct, const char* name, u32 loc, bool is_public) {
    p.consumeToken();
    //StructTypeDecl* S = p.builder.actOnStructType(name, loc, is_struct, is_public, true);
    p.builder.actOnStructType(name, loc, is_struct, is_public, true);

    p.parseStructBlock();  // (S)
    p.parseAttributes(); // (S)
}

func void Parser.parseStructBlock(Parser* p /*, StructTypeDecl* s*/) {
    p.expectAndConsume(TokenKind.LBrace);

    //DeclList members

    while (1) {
        //Syntax:
        // struct_member ::= type_qualifier type_specifier.
        // struct_member ::= STRUCT <IDENTIFIER> LBRACE struct_block RBRACE.
        // struct_member ::= UNION <IDENTIFIER> LBRACE struct_block RBRACE.

        if (p.tok.kind == TokenKind.RBrace) break;
        if (p.tok.kind == TokenKind.KW_union || p.tok.kind == TokenKind.KW_struct) {
            bool is_struct = p.tok.kind == TokenKind.KW_struct;
            p.consumeToken();
            // name is optional
            const char* name = nil;
            u32 loc = 0;
            if (p.tok.kind == TokenKind.Identifier) {
                name = p.tok.text_value;
                loc = p.tok.loc;
                p.consumeToken();
            }
            /*StructTypeDecl* member = */ p.builder.actOnStructType(name, loc, is_struct, true /*S->isPublic()*/, false);
            // members.push_back(member);
            p.parseStructBlock(/*member*/);
        } else {
            // TODO
        }
    }
}

func void Parser.parseAttributes(Parser* p) {
    if (p.tok.kind != TokenKind.At) return;
    p.consumeToken();

    p.expectAndConsume(TokenKind.LParen);

    while (1) {
        p.expectIdentifier();
        const char* attr_id = p.tok.text_value;
        u32 attr_loc = p.tok.loc;
        p.consumeToken();

        u32 end_loc = attr_loc;
        if (p.tok.kind == TokenKind.Equal) {
        }

        p.builder.actOnAttr(/*D,*/ attr_id, attr_loc, end_loc /*, arg.get()*/);

        if (p.tok.kind != TokenKind.Comma) break;
        p.consumeToken();
    }

    p.expectAndConsume(TokenKind.RParen);
}

func void Parser.parseEnumType(Parser* p, const char* name, u32 loc, bool is_public) {
    p.consumeToken();
    // TODO
}

func void Parser.parseAliasType(Parser* p, const char* name, u32 loc, bool is_public) {
    // TODO
}

func void Parser.parseFuncDef(Parser* p, bool is_public) {
    p.consumeToken();
    // TODO
}

func void Parser.parseVarDef(Parser* p, bool is_public) {
    // TODO
}

func void Parser.parseStaticAssert(Parser* p) {
    p.consumeToken();
    // TODO
}


// TEMP here
public func void dump_token(SourceMgr* sm, const Token* tok) {
    if (tok.kind >= TokenKind.KW_as && tok.kind <= TokenKind.KW_while) {
        printf("%s%10s%s  %s\n", color.Green, tok.str(), color.Normal, sm.loc2str(tok.loc));
        return;
    }
    printf("%10s  %s  ", tok.str(), sm.loc2str(tok.loc));
    switch (tok.kind) {
    case TokenKind.Identifier:
        printf("  %s%s%s", color.Cyan, tok.text_value, color.Normal);
        break;
    case TokenKind.NumberLiteral:
        printf("  %s%s%s", color.Cyan, tok.text_value, color.Normal);
        break;
    case TokenKind.CharLiteral:
        printf("  %s'%c'%s", color.Cyan, tok.char_value, color.Normal);
        break;
    case TokenKind.StringLiteral:
        printf("  %s\"%s\"%s", color.Cyan, tok.text_value, color.Normal);
        break;
    case TokenKind.Warning:
        printf("  %s%s%s", color.Yellow, tok.error_msg, color.Normal);
        break;
    case TokenKind.Error:
        printf("  %s%s%s", color.Red, tok.error_msg, color.Normal);
        break;
    default:
        break;
    }
    printf("\n");
}


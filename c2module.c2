module c2module;

import ast_list local;
import string_buffer;
import stdlib local;
import string;

/*
    Used to:
    - store ASTs
*/

public type Module struct {
    const char* name;       // no ownership

    AST** files;
    u32 num_files;
    u32 max_files;
} @(opaque)

// Note: name must be allocated in target StringPool
public func Module* create(const char* name) {
    Module* m = calloc(1, sizeof(Module));
    m.name = name;
    m.resize(1);
    return m;
}

public func void Module.free(Module* m) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].free();
    }
    free(cast<void*>(m.files));
    free(m);
}

public func const char* Module.getName(const Module* m) @(inline) { return m.name; }

func void Module.resize(Module* m, u32 cap) {
    m.max_files = cap;
    void* buf = malloc(m.max_files * sizeof(AST*));
    if (m.files) {
        void* old = cast<void*>(m.files);
        string.memcpy(buf, old, m.num_files * sizeof(AST*));
        free(old);
    }
    m.files = buf;
}

// Note: filename must be allocated in StringPool
public func AST* Module.add(Module* m, const char* filename) {
    AST* ast = AST.create(filename);

    if (m.num_files == m.max_files) m.resize(m.max_files * 2);

    m.files[m.num_files] = ast;
    m.num_files++;
    return ast;
}

public func void Module.print(const Module* m, string_buffer.Buf* out) {
    out.print("  module %s\n", m.name);
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].print(out);
    }
}


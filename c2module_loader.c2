module c2module_loader;

import ast local;
import ast_context;
import string_pool;

import string;

type CType struct {
    const char* name;
    BuiltinTypeKind kind;
    //QualType qt;
}

CType[] ctypes = {
    { "c_char",      BuiltinTypeKind.Int8 },
    { "c_uchar",     BuiltinTypeKind.UInt8 },
    { "c_short",     BuiltinTypeKind.Int16 },
    { "c_ushort",    BuiltinTypeKind.UInt16 },
    { "c_int",       BuiltinTypeKind.Int32 },
    { "c_uint",      BuiltinTypeKind.UInt32 },
    // TODO dynamic 32-bit target types
    { "c_long",      BuiltinTypeKind.Int64 },
    { "c_ulong",     BuiltinTypeKind.UInt64 },
    { "c_size",      BuiltinTypeKind.UInt64 },
    { "c_ssize",     BuiltinTypeKind.Int64 },
    { "c_longlong",  BuiltinTypeKind.Int64 },
    { "c_ulonglong", BuiltinTypeKind.UInt64 },
    { "c_float",     BuiltinTypeKind.Float32 },
    { "c_double",    BuiltinTypeKind.Float64 },
}

public func Module* load(ast_context.Context* context, string_pool.Pool* pool) {
    // TODO if 32 bit change some kinds

    const char* name = pool.add("c2", 2, true);
    Module* m = Module.create(name);
    m.setUsed();

    for (u32 i=0; i<elemsof(ctypes); i++) {
        const char* type_name = ctypes[i].name;
        const char* type_name2 = pool.add(type_name, string.strlen(type_name), true);
        BuiltinType* type_ = nil;
        // TODO use table inside ast.utils, return QualType
        switch (ctypes[i].kind) {
        case BuiltinTypeKind.Int8:
            type_ = g_i8;
            break;
        case BuiltinTypeKind.Int16:
            type_ = g_i16;
            break;
        case BuiltinTypeKind.Int32:
            type_ = g_i32;
            break;
        case BuiltinTypeKind.Int64:
            type_ = g_i64;
            break;
        case BuiltinTypeKind.UInt8:
            type_ = g_u8;
            break;
        case BuiltinTypeKind.UInt16:
            type_ = g_u16;
            break;
        case BuiltinTypeKind.UInt32:
            type_ = g_u32;
            break;
        case BuiltinTypeKind.UInt64:
            type_ = g_u64;
            break;
        case BuiltinTypeKind.Float32:
            type_ = g_f32;
            break;
        case BuiltinTypeKind.Float64:
            type_ = g_f64;
            break;
        default:
            break;
        }
        AliasTypeDecl* t = AliasTypeDecl.create(context, type_name2, 0, true, nil, QualType.init2(cast<Type*>(type_)));
        m.addSymbol(ast.name2idx(type_name2), t.asDecl());
    }

    // TODO add other symbols

    return m;
}


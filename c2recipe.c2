/* Copyright 2022 Bas van den Berg
*/

module c2recipe;

import string_pool;
import source_mgr;
import utils local;

import stdlib;
import string;
#if RecipeDebug
import stdio local;
#endif

public type File struct {
    const char* name;       // no ownership
    SrcLoc loc;
} @(opaque)

public type Target struct {
    Recipe* recipe;
    const char* name;       // no ownership
    SrcLoc loc;

    File* files;
    u32 num_files;
    u32 max_files;
} @(opaque)

func Target* Target.create(Recipe* recipe, const char* name, SrcLoc loc) {
    Target* t = stdlib.calloc(1, sizeof(Target));
    t.recipe = recipe;
    t.name = name;
    t.loc = loc;
    t.max_files = 8;
    t.files = stdlib.malloc(t.max_files * sizeof(File));
    return t;
}

func void Target.free(Target* t) {
    stdlib.free(t);
}

public func const char* Target.getName(const Target* t) { return t.name; }

public func u32 Target.numFiles(const Target* t) { return t.num_files; }

public func void Target.addFile(Target* t, const char* filename, SrcLoc loc) {
    if (t.num_files == t.max_files) {
        t.max_files *= 2;
        File* files2 = stdlib.malloc(t.max_files * sizeof(File));
        string.memcpy(files2, t.files, t.num_files * sizeof(File));
        stdlib.free(t.files);
        t.files = files2;
    }

    t.files[t.num_files].name = filename;
    t.files[t.num_files].loc = loc;
    t.num_files++;
}

public func i32 Target.openFile(Target* t, u32 idx) {
    return t.recipe.openFile(&t.files[idx]);
}

public type Recipe struct {
    string_pool.Pool* pool;
    source_mgr.SourceMgr* sm;
    i32 file_id;

    Target** targets;
    u32 num_targets;
    u32 max_targets;
} @(opaque)

public func Recipe* create(source_mgr.SourceMgr* sm, string_pool.Pool* pool) {
    Recipe* r = stdlib.calloc(1, sizeof(Recipe));
    r.sm = sm;
    r.pool = pool;
    r.max_targets = 4;
    r.targets = stdlib.calloc(r.max_targets, sizeof(Target*));
    return r;
}

public func void Recipe.free(Recipe* r) {
    for (u32 i=0; i<r.num_targets; i++) {
        r.targets[i].free();
    }
    stdlib.free(cast<void*>(r.targets));
    stdlib.free(r);
}

func Target* Recipe.addTarget(Recipe* r, const char* name, SrcLoc loc) {
    // TODO just use Target.create() and store pointers
    if (r.num_targets == r.max_targets) {
        r.max_targets *= 2;
        Target** targets2 = stdlib.malloc(r.max_targets * sizeof(Target*));
        string.memcpy(cast<void*>(targets2), cast<void*>(r.targets), r.num_targets * sizeof(Target*));
        stdlib.free(cast<void*>(r.targets));
        r.targets = targets2;
    }
    Target* t = Target.create(r, name, loc);
    r.targets[r.num_targets] = t;
    r.num_targets++;
    return t;
}

public func void Recipe.addDummyTarget(Recipe* r, const char* filename) {
    Target* t = r.addTarget("dummy", 0);
    t.addFile(filename, 0);
}

public func bool Recipe.parse(Recipe* r, i32 file_id) {
    return Parser.parse(r, r.pool, r.sm, file_id);
}

public func u32 Recipe.numTargets(const Recipe* r) { return r.num_targets; }

public func Target* Recipe.getTarget(const Recipe* r, u32 idx) {
    return r.targets[idx];
}

#if RecipeDebug
public func void Recipe.dump(const Recipe* r) {
    printf("Recipe:\n");
    for (u32 i=0; i<r.num_targets; i++) {
        const Target* t = r.targets[i];
        printf("  target %s\n", t.name);
        for (u32 j=0; j<t.num_files; j++) {
            File* f = &t.files[j];
            printf("    %s\n", f.name);
        }
    }
}
#endif

public func i32 Recipe.openFile(Recipe* r, File* f) {
    return r.sm.open(f.name, f.loc);
}


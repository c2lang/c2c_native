/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module build_target;

import string_pool;
import src_loc local;
import warning_flags;
import string_list;

import stdlib;
import string;

public type Kind enum u8 {
    Executable,
    StaticLibrary,
    DynamicLibrary,
}

public type File struct {
    u32 name;       // index into auxPool
    SrcLoc loc;
}

public type Target struct {
    u32 name_idx;       // into aux pool
    SrcLoc loc;
    warning_flags.Flags warnings;
    Kind kind;

    bool enable_asserts;
    // cgen flags
    bool cgen_generate;
    bool no_libc;
    //bool cgen_single_module;
    bool cgen_no_build;
    bool cgen_fast;
    //bool cgen_gen_checks;

    string_list.List features;
    string_list.List libs;
    string_list.List exports;

    File* files;
    u32 num_files;
    u32 max_files;
} @(opaque)

public func Target* create(u32 name_idx, SrcLoc loc, Kind kind, string_pool.Pool* pool) {
    Target* t = stdlib.calloc(1, sizeof(Target));
    t.name_idx = name_idx;
    t.loc = loc;
    t.kind = kind;
    t.max_files = 8;
    t.features.init(pool);
    t.libs.init(pool);
    t.exports.init(pool);
    t.files = stdlib.malloc(t.max_files * sizeof(File));
    return t;
}

public func void Target.free(Target* t) {
    t.exports.free();
    t.libs.free();
    t.features.free();
    stdlib.free(t.files);
    stdlib.free(t);
}

public func u32 Target.getNameIdx(const Target* t) { return t.name_idx; }

public func u32 Target.numFiles(const Target* t) { return t.num_files; }

public func const string_list.List* Target.getFeatures(const Target* t) { return &t.features; }

public func void Target.addFeature(Target* t, u32 feature) {
    t.features.add(feature);
}

public func void Target.enableAsserts(Target* t) { t.enable_asserts = true; }

public func bool Target.hasAsserts(const Target* t) { return t.enable_asserts; }

public func const string_list.List* Target.getLibs(const Target* t) { return &t.libs; }

public func void Target.addLib(Target* t, u32 lib) {
    t.libs.add(lib);
}

public func const warning_flags.Flags* Target.getWarnings(const Target* t) {
    return &t.warnings;
}

public func warning_flags.Flags* Target.getWarnings2(Target* t) {
    return &t.warnings;
}

public func void Target.addExport(Target* t, u32 export) {
    t.exports.add(export);
}

public func const string_list.List* Target.getExports(const Target* t) { return &t.exports; }

public func Kind Target.getKind(const Target* t) { return t.kind; }

public func void Target.addFile(Target* t, u32 filename, SrcLoc loc) {
    if (t.num_files == t.max_files) {
        t.max_files *= 2;
        File* files2 = stdlib.malloc(t.max_files * sizeof(File));
        string.memcpy(files2, t.files, t.num_files * sizeof(File));
        stdlib.free(t.files);
        t.files = files2;
    }

    t.files[t.num_files].name = filename;
    t.files[t.num_files].loc = loc;
    t.num_files++;
}

public func const File* Target.getFile(const Target* t, u32 idx) {
    return &t.files[idx];
}

public func void Target.setNoLibC(Target* t) {
    t.no_libc = true;
}

public func bool Target.getNoLibC(const Target* t) {
    return t.no_libc;
}

public func void Target.setCGenGenerate(Target* t) {
    t.cgen_generate = true;
}

public func bool Target.getCGenGenerate(const Target* t) {
    return t.cgen_generate;
}

public func void Target.setCGenNoBuild(Target* t) {
    t.cgen_no_build = true;
}

public func bool Target.getCGenNoBuild(const Target* t) {
    return t.cgen_no_build;
}

public func void Target.setCGenFastBuild(Target* t) {
    t.cgen_fast = true;
}

public func bool Target.getCGenFastBuild(const Target* t) {
    return t.cgen_fast;
}


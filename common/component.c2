/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module component;

import ast;
import ast_context;
import color;
import module_list;
import string_buffer;

import stdlib local;
import string;
import stdio local;

/*
    Represents a library or the main-component

    Used to:
    - create + store Modules
*/
public type Component struct {
    const char* name;   // no ownership
    bool is_external;

    ast_context.Context* context;
    ast.Module** mods;
    u32 num_mods;
    u32 max_mods;
    module_list.ModList* globalList;
} @(opaque)

public func Component* create(ast_context.Context* context, module_list.ModList* globalList, const char* name, bool is_external) {
    Component* c = calloc(1, sizeof(Component));
    c.name = name;
    c.is_external = is_external;
    c.context = context;

    c.resize(4);
    c.globalList = globalList;
    return c;
}

public func void Component.free(Component* c) {
    for (u32 i=0; i<c.num_mods; i++) {
        c.mods[i].free();
    }
    free(cast<void*>(c.mods));
    free(c);
}

public func const char* Component.getName(const Component* c) { return c.name; }

public func bool Component.isExternal(const Component* c) { return c.is_external; }

public type ModuleVisitor func void (void* arg, ast.Module* m);

public func void Component.visitModules(const Component* c, ModuleVisitor visitor, void* arg) {
    for (u32 i=0; i<c.num_mods; i++) {
        visitor(arg, c.mods[i]);
    }
}

public func ast.Module* Component.getModule(const Component* c, u32 idx) {
    return c.mods[idx];
}

public func ast.Module** Component.getModules(Component* c) {
    return c.mods;
}

public func u32 Component.getNumModules(const Component* c) {
    return c.num_mods;
}

func void Component.resize(Component* c, u32 cap) {
    c.max_mods = cap;
    void* buf = malloc(c.max_mods * sizeof(ast.Module*));
    if (c.mods) {
        void* old = cast<void*>(c.mods);
        string.memcpy(buf, old, c.num_mods * sizeof(ast.Module*));
        free(old);
    }
    c.mods = buf;
}

public func ast.Module* Component.getOrAddModule(Component* c, u32 name_idx) {
    for (u32 i=0; i<c.num_mods; i++) {
        ast.Module* m = c.mods[i];
        if (m.getNameIdx() == name_idx) return m;
    }

    ast.Module* m = c.globalList.find(name_idx);
    if (m) return nil;

    m = ast.Module.create(c.context, name_idx, c.is_external);

    if (c.num_mods == c.max_mods) c.resize(c.max_mods * 2);

    c.globalList.add(m);
    c.mods[c.num_mods] = m;
    c.num_mods++;
    return m;
}

public func bool Component.hasModule(const Component* c, const ast.Module* mod) {
    for (u32 i=0; i<c.num_mods; i++) {
        if (c.mods[i] == mod) return true;
    }
    return false;
}

public func void Component.info(const Component* c) {
    string_buffer.Buf* out = string_buffer.create(64*1024, color.useColor(), 1);
    out.print("component %s\n", c.name);
    for (u32 i=0; i<c.num_mods; i++) {
        c.mods[i].info(out);
    }
    stdio.printf("%s\n", out.data());
    out.free();
}

public func void Component.print(const Component* c, bool show_funcs) {
    string_buffer.Buf* out = string_buffer.create(128*1024, color.useColor(), 1);
    for (u32 i=0; i<c.num_mods; i++) {
        c.mods[i].print(out, show_funcs);
    }

    out.color(color.Normal);
    stdio.puts(out.data());
    out.free();
}

public func void Component.printModules(const Component* c) {
    string_buffer.Buf* out = string_buffer.create(4096, color.useColor(), 1);
    out.print("--- %s ---\n", c.name);
    for (u32 i=0; i<c.num_mods; i++) {
        const ast.Module* m = c.mods[i];
        const char* col = m.isUsed() ? color.Normal : color.Grey;
        out.color(col);
        out.print("   %s\n", m.getName());
    }
    out.color(color.Normal);
    stdio.puts(out.data());
    out.free();
}

public func void Component.printSymbols(const Component* c) {
    string_buffer.Buf* out = string_buffer.create(4096, color.useColor(), 1);
    out.print("--- %s ---\n", c.name);
    for (u32 i=0; i<c.num_mods; i++) {
        out.color(color.Cyan);
        out.print("  %s\n", c.mods[i].getName());
        const ast.SymbolTable* table = c.mods[i].getSymbols();
        table.print(out);
    }
    out.color(color.Normal);
    stdio.puts(out.data());
    out.free();
}



public type List struct {
    Component** components;
    u32 count;
    u32 capacity;
}

public func void List.init(List* l) {
    l.components = nil;
    l.count = 0;
    l.resize(4);
}

public func void List.free(List* l) {
    for (u32 i=0; i<l.count; i++) {
        l.components[i].free();
    }
    free(cast<void*>(l.components));
}

func void List.resize(List* l, u32 capacity) {
    l.capacity = capacity;
    Component** comps2 = malloc(l.capacity * sizeof(Component*));
    if (l.count) {
        string.memcpy(cast<void*>(comps2), cast<void*>(l.components), l.count * sizeof(Component*));
        free(cast<void*>(l.components));
    }
    l.components = comps2;
}

public func void List.add(List* l, Component* c) {
    if (l.count == l.capacity) l.resize(l.capacity * 2);

    l.components[l.count] = c;
    l.count++;
}

public func u32 List.size(const List* l) @(inline) {
    return l.count;
}

public func Component* List.get(List* l, u32 idx) @(inline) {
    return l.components[idx];
}


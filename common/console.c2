module console;

import stdio local;
import stdarg local;

import color local;

bool use_color = false;
bool show_debug = false;
bool show_timing = false;

public func void init() {
    use_color = color.useColor();
}

public func void setDebug(bool enable) {
    show_debug = enable;
}

public func void setTiming(bool enable) {
    show_timing = enable;
}

public func void debug(const char* format, ...) @(printf_format=1) {
    if (!show_debug) return;

    char[256] buf;
    Va_list args;
    va_start(args, format);
    vsprintf(buf, format, args);
    va_end(args);
    if (use_color) {
        printf("%s%s%s\n", color.Blue, buf, color.Normal);
    } else {
        printf("%s\n", buf);
    }
}

public func void log(const char* format, ...) @(printf_format=1) {
    char[256] buf;
    Va_list args;
    va_start(args, format);
    vsprintf(buf, format, args);
    va_end(args);
    printf("%s\n", buf);
}

public func void warn(const char* format, ...) @(printf_format=1) {
    char[256] buf;
    Va_list args;
    va_start(args, format);
    vsprintf(buf, format, args);
    va_end(args);
    if (use_color) {
        fprintf(stderr, "%swarning: %s%s\n", color.Yellow, buf, color.Normal);
    } else {
        fprintf(stderr, "warning: %s\n", buf);
    }
}

public func void error(const char* format, ...) @(printf_format=1) {
    char[256] buf;
    Va_list args;
    va_start(args, format);
    vsprintf(buf, format, args);
    va_end(args);
    if (use_color) {
        fprintf(stderr, "%serror: %s%s\n", color.Red, buf, color.Normal);
    } else {
        fprintf(stderr, "error: %s\n", buf);
    }
}

public func void log_time(const char* item, u64 duration) {
    if (!show_timing) return;
    if (use_color) {
        printf("%s%s took %d usec%s\n", color.Blue, item, duration, color.Normal);
    } else {
        printf("%s took %d usec\n", item, duration);
    }
}


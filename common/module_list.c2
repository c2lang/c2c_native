/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module module_list;

import ast;

import stdlib;
import string;

public type ModList struct {
    ast.Module** mods;              // modules in this Component
    u32 num_mods;
    u32 max_mods;
    bool owns_modules;
} @(opaque)

public func ModList* create(bool owns_modules) {
    ModList* l = stdlib.calloc(1, sizeof(ModList));
    l.owns_modules = owns_modules;
    l.resize(4);
    return l;
}

public func void ModList.free(ModList* l) {
    if (l.owns_modules) {
        for (u32 i=0; i<l.num_mods; i++) {
            l.mods[i].free();
        }
    }
    stdlib.free(cast<void*>(l.mods));
    stdlib.free(l);
}

public func ast.Module* ModList.find(const ModList* l, u32 modname_idx) {
    for (u32 i=0; i<l.num_mods; i++) {
        if (l.mods[i].getNameIdx() == modname_idx) return l.mods[i];
    }
    return nil;
}

public func void ModList.add(ModList* list, ast.Module* m) {
    // Note: we dont check for duplicates here
    if (list.num_mods == list.max_mods) list.resize(list.max_mods * 2);
    list.mods[list.num_mods] = m;
    list.num_mods++;
}

//public func u32 Component.getNumModules(const Component* c) {
//    return c.num_mods;
//}

func void ModList.resize(ModList* l, u32 cap) {
    l.max_mods = cap;
    void* buf = stdlib.malloc(l.max_mods * sizeof(ast.Module*));
    if (l.mods) {
        void* old = cast<void*>(l.mods);
        string.memcpy(buf, old, l.num_mods * sizeof(ast.Module*));
        stdlib.free(old);
    }
    l.mods = buf;
}


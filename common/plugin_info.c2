/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module plugin_info;

import ast;
import ast_builder;
import ast_context;
import c2_parser;
import component;
import diagnostics;
import build_target;
import source_mgr;
import string_pool;

public type RegisterAttrFn func bool (void* arg, u32 name, ast.AttrHandlerFn fn, void* arg2);

public type Info struct {
    source_mgr.SourceMgr* sm;    // no ownership
    diagnostics.Diags* diags;    // no ownership
    build_target.Target* target;

    ast.Module* c2mod;  // since not in component
    component.List* components;
    string_pool.Pool* astPool;
    string_pool.Pool* auxPool;
    ast_context.Context* context;
    ast_builder.Builder* builder;
    c2_parser.Parser* parser;
    ast.Globals* ast_globals;
    ast.QualType* ast_builtins;

    RegisterAttrFn register_attr;
    void* register_arg;

    char[32] target_name;
    char[256] output_dir;
}

public func bool Info.registerAttr(Info* info, u32 name, ast.AttrHandlerFn fn, void* arg) {
    return info.register_attr(info.register_arg, name, fn, arg);
}

public type LoadFn func void*(const char* options, bool console_timing, bool console_debug);
public type UnloadFn func void(void* arg);
public type InitFn func void(void* arg, plugin_info.Info* info);
public type PostParseFn func void(void* arg);
public type PostAnalysisFn func void(void* arg);

public type Plugin struct {
    LoadFn load;
    UnloadFn unload;
    InitFn init;
    PostParseFn post_parse;
    PostAnalysisFn post_analysis;
    const char* name;
} @(unused)


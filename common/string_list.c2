/* Copyright 2022 Bas van den Berg
*/

module string_list;

import string_pool;
import string local;
import stdlib local;

public type List struct {
    const string_pool.Pool* pool;
    u32* indexes;   // into pool
    u32 count;
    u32 capacity;
}

public func void List.init(List* l, const string_pool.Pool* pool) {
    memset(l, 0, sizeof(List));
    l.pool = pool;
    l.resize(16);
}

public func void List.free(List* l) {
    free(l.indexes);
}

public func void List.clear(List* l) {
    l.count = 0;
}

func void List.resize(List* l, u32 capacity) {
    l.capacity = capacity;
    u32* indexes2 = malloc(capacity * sizeof(u32));
    if (l.count) {
        memcpy(indexes2, l.indexes, l.count * sizeof(u32));
        free(l.indexes);
    }
    l.indexes = indexes2;
}

public func void List.add(List* l, u32 name_idx) {
    if (l.count == l.capacity) l.resize(l.capacity * 2);

    l.indexes[l.count] = name_idx;
    l.count++;
}

public func bool List.contains(const List* l, const char* name) {
    for (u32 i=0; i<l.count; i++) {
        if (strcmp(l.pool.idx2str(l.indexes[i]), name) == 0) return true;
    }
    return false;
}


/* Copyright 2022 Bas van den Berg
*/

module compiler;

import ast;
import ast_builder;
import ast_context;
import c2_parser;
import c2module_loader;
import c2recipe;
import component;
import constants;
import diagnostics;
import manifest;
import module_list;
import module_analyser;
import module_sorter;
import source_mgr;
import string_list;
import string_pool;
import utils;

import string;
// for sort
import color;
import stdlib;

import stdio local;

// TODO or return/add Component?
func void openLib(source_mgr.SourceMgr* sm,
                  string_pool.Pool* auxPool,
                  string_pool.Pool* astPool,
                  component.Component* comp)
{
    const char* libdir = stdlib.getenv("C2_LIBDIR");
    if (!libdir) printf("Warning: environment variable C2_LIBDIR not set!\n");

    char[512] manifestFilename;
    i32 len = stdio.sprintf(manifestFilename, "%s/%s/manifest.yml", libdir, comp.getName());
    const char* name = auxPool.add(manifestFilename, cast<usize>(len), 0);

    i32 file_id = sm.open(name, 0);
    if (file_id == -1) return;
    // TODO fill component with stuff from manifest
    //if (!recipe.parseYaml(file_id)) return;
    // NOTE: dont parse modules (interface files) yet, only if needed
    // TODO erro handling
    manifest.parse(sm, file_id, astPool, comp);
}

type LibLoader struct {
    const char* libdir;
    source_mgr.SourceMgr* sm;
    c2_parser.Parser* parser;
    string_pool.Pool* auxPool;
    string_pool.Pool* astPool;
    component.Component* c;
}

func void LibLoader.init(LibLoader* l,
                         const char* libdir,
                         source_mgr.SourceMgr* sm,
                         c2_parser.Parser* parser,
                         string_pool.Pool* auxPool,
                         string_pool.Pool* astPool,
                         component.Component* comp)
{
    l.libdir = libdir;
    l.sm = sm;
    l.parser = parser;
    l.auxPool = auxPool;
    l.astPool = astPool;
    l.c = comp;
}

func void LibLoader.handleModule(void* arg, ast.Module* m) {
    LibLoader* l = arg;
    if (!m.isUsed()) return;

    // TODO also use LibLoader for openLib
    const char* libdir = stdlib.getenv("C2_LIBDIR");
    if (!libdir) printf("Warning: environment variable C2_LIBDIR not set!\n");

    char[512] filename;
    i32 len = stdio.sprintf(filename, "%s/%s/%s.c2i", l.libdir, l.c.getName(), m.getName());
    const char* name = l.auxPool.add(filename, cast<usize>(len), 0);

    // TODO get location  from manifest?
    i32 file_id = l.sm.open(name, 0);
    if (file_id == -1) return;   // note: error already printed

    bool ok = l.parser.parse(file_id, true);

    l.sm.close(file_id);
}

func void loadLib(source_mgr.SourceMgr* sm,
                  c2_parser.Parser* parser,
                  ast_builder.Builder* builder,
                  string_pool.Pool* auxPool,
                  string_pool.Pool* astPool,
                  component.Component* comp)
{
    const char* libdir = stdlib.getenv("C2_LIBDIR");
    if (!libdir) printf("Warning: environment variable C2_LIBDIR not set!\n");

    builder.setComponent(comp);

    LibLoader loader;
    loader.init(libdir, sm, parser, auxPool, astPool, comp);
    comp.visitModules(LibLoader.handleModule, &loader);
}

func void Compiler.handleModuleImports(void* arg, ast.Module* m) {
    Compiler* c = arg;
    m.visitImports(Compiler.handleImport, c);
}

func void Compiler.handleImport(void* arg, ast.ImportDecl* d) {
    Compiler* c = arg;

    u32 name_idx = d.asDecl().getNameIdx();
    ast.Module* m = c.allmodules.find(name_idx);
    if (m) {
        d.setDest(m);
        m.setUsed();
    } else {
        c.diags.report(d.asDecl().getLoc(), "unknown module '%s'", ast.idx2name(name_idx));
        // TODO longjmp?
        stdlib.exit(-1);
    }
}

type Compiler struct {
    string_pool.Pool* auxPool;   // no ownership
    source_mgr.SourceMgr* sm;    // no ownership
    diagnostics.Diags* diags;    // no ownership
    const c2recipe.Target* target;     // no ownership
    const Options* opts;        // no ownership

    // TODO: extract this to a Context? and pass that around? (container only)
    ast_context.Context* context;
    string_pool.Pool* astPool;
    ast_builder.Builder* builder;
    module_list.ModList* allmodules;
    c2_parser.Parser* parser;
    component.Component* mainComp;  // no ownership

    component.Component** components;
    u32 num_components;
    u32 max_components;
}

public type Options struct {
    bool print_ast;
    bool print_modules;
    bool print_symbols;
}

public func void build(string_pool.Pool* auxPool,
                       source_mgr.SourceMgr* sm,
                       diagnostics.Diags* diags,
                       c2recipe.Target* target,
                       const Options* opts)
{
    Compiler c;
    c.build(auxPool, sm, diags, target, opts);
    c.free();
}

func void Compiler.build(Compiler* c,
                         string_pool.Pool* auxPool,
                         source_mgr.SourceMgr* sm,
                         diagnostics.Diags* diags,
                         c2recipe.Target* target,
                         const Options* opts)
{
    string.memset(c, 0, sizeof(Compiler));
    c.auxPool = auxPool;
    c.sm = sm;
    c.diags = diags;
    c.target = target;
    c.opts = opts;

    c.context = ast_context.create(16*1024);
    c.astPool = string_pool.create(1024*1024, 2048);
    c.builder = ast_builder.create(c.context, diags);
    c.allmodules = module_list.create(false);
    c.resizeComponents(4);

    ast.init(c.context, c.astPool.getStart());
    // TODO set AST list
    // TODO memleak on ast.deinit() on early returns

    // create c2 module
    ast.Module* c2mod = c2module_loader.load(c.astPool);
    c.allmodules.add(c2mod);

    component.Component* libcComponent = component.create(c.allmodules, "libc", true);
    c.addComponent(libcComponent);
    c.builder.setComponent(libcComponent);
    // TODO parse manifest
    // NOTE: HMM manifest filename should go into auxPool, module-names into normal astPool
    openLib(sm, auxPool, c.astPool, libcComponent);

    c.mainComp = component.create(c.allmodules, "main", false);
    c.addComponent(c.mainComp);
    c.builder.setComponent(c.mainComp);

    // TODO get from recipe/target
    // TODO dynamic sizing
    string_list.List features;
    features.init(64);
    features.add("feature_a");
    c.parser = c2_parser.create(sm, diags, c.builder, c.astPool, &features);

    printf("%sparsing %s%s\n", color.Yellow, target.getName(), color.Normal);
    u64 t1_start = utils.now();
    bool ok = true;
    for (u32 j=0; j<target.numFiles(); j++) {
        i32 file_id = target.openFile(j);
        if (file_id == -1) return;   // note: error already printed

        ok != c.parser.parse(file_id, false);

        target.closeFile(file_id);
    }
    u64 t1_end = utils.now();
    printf("parsing took %lu usec\n", t1_end - t1_start);
#if 0
    for (u32 i=0; i<c.num_components; i++) {
        c.components[i].info();
    }
#endif
    if (!ok) return;

    u64 t2_start = utils.now();
    // step 1: resolve imports
    c.mainComp.visitModules(Compiler.handleModuleImports, c);

    // step 2: sort modules inside main component
    module_sorter.sort(c.mainComp, c.diags);

    // analyse each module, all files in it step by step
    loadLib(c.sm, c.parser, c.builder, c.auxPool, c.astPool, libcComponent);
    libcComponent.visitModules(Compiler.handleModuleImports, c);
    libcComponent.visitModules(Compiler.analyseUsedModule, c);
    module_sorter.sort(libcComponent, c.diags);


    c.mainComp.visitModules(Compiler.analyseModule, c);

    // check unused

    u64 t2_end = utils.now();
    printf("analysis took %lu usec\n", t2_end - t2_start);

#if DumpTokens
#else
    c.context.dump();
    c.astPool.dump();
#endif

    if (c.opts.print_ast) c.mainComp.print();
    if (c.opts.print_modules) {
        for (u32 i=0; i<c.num_components; i++) {
            c.components[i].printModules();
        }
    }
    if (c.opts.print_symbols) {
        for (u32 i=0; i<c.num_components; i++) {
            c.components[i].printSymbols();
        }
    }

    ast.deinit();
}

func void Compiler.free(Compiler* c) {
    for (u32 i=0; i<c.num_components; i++) {
        c.components[i].free();
    }
    stdlib.free(cast<void*>(c.components));
    c.parser.free();
    c.allmodules.free();
    c.builder.free();
    c.astPool.free();
    c.context.free();
}

func void Compiler.resizeComponents(Compiler* c, u32 capacity) {
    c.max_components = capacity;
    component.Component** comps2 = stdlib.malloc(c.max_components * sizeof(component.Component*));
    if (c.components) {
        string.memcpy(cast<void*>(comps2), cast<void*>(c.components), c.num_components * sizeof(component.Component*));
        stdlib.free(cast<void*>(c.components));
    }
    c.components = comps2;
}

func void Compiler.addComponent(Compiler* c, component.Component* comp) {
    if (c.num_components == c.max_components) c.resizeComponents(c.max_components * 2);

    c.components[c.num_components] = comp;
    c.num_components++;
}

func void Compiler.analyseModule(void* arg, ast.Module* m) {
    Compiler* c = arg;
    module_analyser.check(c.diags, c.context, c.allmodules, m);
}

func void Compiler.analyseUsedModule(void* arg, ast.Module* m) {
    Compiler* c = arg;
    if (m.isUsed()) {
        module_analyser.check(c.diags, c.context, c.allmodules, m);
    }
}


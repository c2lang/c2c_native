/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c2module_loader;

import ast local;
import ast_context;
import string_pool;

type CType struct {
    const char* name;
    BuiltinKind kind;
    QualType* qt;
}

// Not const because of architecture dependent entries
const CType[] CTypes = {
    { "c_char",      BuiltinKind.Char,    &g_char },
    { "c_uchar",     BuiltinKind.UInt8,   &g_u8 },
    { "c_short",     BuiltinKind.Int16,   &g_i16 },
    { "c_ushort",    BuiltinKind.UInt16,  &g_u16 },
    { "c_int",       BuiltinKind.Int32,   &g_i32 },
    { "c_uint",      BuiltinKind.UInt32,  &g_u32 },
    { "c_longlong",  BuiltinKind.Int64,   &g_i64 },
    { "c_ulonglong", BuiltinKind.UInt64,  &g_u64 },
    { "c_float",     BuiltinKind.Float32, &g_f32 },
    { "c_double",    BuiltinKind.Float64, &g_f64 },
}

func void create_signed(ast_context.Context* context,
                        AST* a,
                        string_pool.Pool* pool,
                        const char* name,
                        i64 value,
                        QualType qt,
                        BuiltinKind kind)
{
    Expr* ie = cast<Expr*>(IntegerLiteral.createSignedConstant(context, 0, value, qt));
    u32 name2 = pool.addStr(name, true);
    TypeRefHolder ref;
    ref.init();
    ref.setBuiltin(kind, 0);
    VarDecl* var = VarDecl.create(context, VarDeclKind.GlobalVar, name2, 0, true, &ref, a.getIdx(), 0, ie);
    Decl* d = cast<Decl*>(var);
    qt.setConst();
    d.setType(qt);
    d.setChecked();
    a.addVarDecl(d);
    a.getMod().addSymbol(name2, d);
}

func void create_unsigned(ast_context.Context* context,
                          AST* a,
                          string_pool.Pool* pool,
                          const char* name,
                          u64 value,
                          QualType qt,
                          BuiltinKind kind)
{
    Expr* ie = cast<Expr*>(IntegerLiteral.createUnsignedConstant(context, 0, value, qt));
    u32 name2 = pool.addStr(name, true);
    TypeRefHolder ref;
    ref.init();
    ref.setBuiltin(kind, 0);
    VarDecl* var = VarDecl.create(context, VarDeclKind.GlobalVar, name2, 0, true, &ref, a.getIdx(), 0, ie);
    Decl* d = cast<Decl*>(var);
    qt.setConst();
    d.setType(qt);
    d.setChecked();
    a.addVarDecl(d);
    a.getMod().addSymbol(name2, d);
}

func void add_ctype(ast_context.Context* context, string_pool.Pool* pool,
                    Module* m, AST* a,
                    const char* name, BuiltinKind kind, QualType qt)
{
    u32 type_name = pool.addStr(name, true);
    TypeRefHolder ref;
    ref.init();
    ref.setBuiltin(kind, 0);
    AliasTypeDecl* t = AliasTypeDecl.create(context, type_name, 0, true, a.getIdx(), &ref);
    Decl* d = t.asDecl();
    d.setType(qt);
    QualType qt2 = d.getType();
    qt2.setCanonicalType(qt);
    d.setChecked();
    a.addTypeDecl(d);
    m.addSymbol(type_name, d);
}

public func Module* load(ast_context.Context* context, string_pool.Pool* pool, string_pool.Pool* auxPool) {
    u32 name = pool.add("c2", 2, true);
    Module* m = Module.create(context, name, true, true); // not really external, but cannot export
    m.setUsed();

    AST* a = m.add(auxPool, auxPool.addStr("<generated>", false));

    for (u32 i=0; i<elemsof(CTypes); i++) {
        add_ctype(context, pool, m, a, CTypes[i].name, CTypes[i].kind, *CTypes[i].qt);
    }
    // set architecture dependent c types
    if (ast.getWordSize() == 4) {
        add_ctype(context, pool, m, a, "c_long",  BuiltinKind.Int32,  g_i32);
        add_ctype(context, pool, m, a, "c_ulong", BuiltinKind.UInt32, g_u32);
        add_ctype(context, pool, m, a, "c_size",  BuiltinKind.UInt32, g_u32);
        add_ctype(context, pool, m, a, "c_ssize", BuiltinKind.Int32,  g_i32);
    } else {
        add_ctype(context, pool, m, a, "c_long",  BuiltinKind.Int64,  g_i64);
        add_ctype(context, pool, m, a, "c_ulong", BuiltinKind.UInt64, g_u64);
        add_ctype(context, pool, m, a, "c_size",  BuiltinKind.UInt64, g_u64);
        add_ctype(context, pool, m, a, "c_ssize", BuiltinKind.Int64,  g_i64);
    }

    create_signed(context, a, pool, "min_i8", -128, g_i8, BuiltinKind.Int8);
    create_signed(context, a, pool, "max_i8", 127, g_i8, BuiltinKind.Int8);

    create_unsigned(context, a, pool, "min_u8", 0, g_u8, BuiltinKind.UInt8);
    create_unsigned(context, a, pool, "max_u8", 255, g_u8, BuiltinKind.UInt8);

    create_signed(context, a, pool, "min_i16", -32768, g_i16, BuiltinKind.Int16);
    create_signed(context, a, pool, "max_i16", 32767, g_i16, BuiltinKind.Int16);

    create_unsigned(context, a, pool, "min_u16", 0, g_u16, BuiltinKind.UInt16);
    create_unsigned(context, a, pool, "max_u16", 65535, g_u16, BuiltinKind.UInt16);

    create_signed(context, a, pool, "min_i32", -2147483648, g_i32, BuiltinKind.Int32);
    create_signed(context, a, pool, "max_i32", 2147483647, g_i32, BuiltinKind.Int32);

    create_unsigned(context, a, pool, "min_u32", 0, g_u32, BuiltinKind.UInt32);
    create_unsigned(context, a, pool, "max_u32", 4294967295, g_u32, BuiltinKind.UInt32);

    // NOTE: minimum should be -..808, but clang complains about it..
    create_signed(context, a, pool, "min_i64", -9223372036854775807, g_i64, BuiltinKind.Int64);
    create_signed(context, a, pool, "max_i64", 9223372036854775807, g_i64, BuiltinKind.Int64);

    create_unsigned(context, a, pool, "min_u64", 0, g_u64, BuiltinKind.UInt64);
    create_unsigned(context, a, pool, "max_u64", 18446744073709551615, g_u64, BuiltinKind.UInt64);

    if (ast.getWordSize() == 4) {
        create_signed(context, a, pool, "min_isize", -2147483648, g_i32, BuiltinKind.Int32);
        create_signed(context, a, pool, "max_isize", 2147483647, g_i32, BuiltinKind.Int32);

        create_unsigned(context, a, pool, "min_usize", 0, g_u32, BuiltinKind.UInt32);
        create_unsigned(context, a, pool, "max_usize", 4294967295, g_u32, BuiltinKind.UInt32);
    } else {
        create_signed(context, a, pool, "min_isize", -9223372036854775807, g_i64, BuiltinKind.Int64);
        create_signed(context, a, pool, "max_isize", 9223372036854775807, g_i64, BuiltinKind.Int64);

        create_unsigned(context, a, pool, "min_usize", 0, g_u64, BuiltinKind.UInt64);
        create_unsigned(context, a, pool, "max_usize", 18446744073709551615, g_u64, BuiltinKind.UInt64);
    }

    return m;
}


module c2module_loader;

import ast local;
import ast_context;
import string_pool;

import string;

type CType struct {
    const char* name;
    BuiltinTypeKind kind;
    //QualType qt;
}

CType[] ctypes = {
    { "c_char",      BuiltinTypeKind.Int8 },
    { "c_uchar",     BuiltinTypeKind.UInt8 },
    { "c_short",     BuiltinTypeKind.Int16 },
    { "c_ushort",    BuiltinTypeKind.UInt16 },
    { "c_int",       BuiltinTypeKind.Int32 },
    { "c_uint",      BuiltinTypeKind.UInt32 },
    // TODO dynamic 32-bit target types
    { "c_long",      BuiltinTypeKind.Int64 },
    { "c_ulong",     BuiltinTypeKind.UInt64 },
    { "c_size",      BuiltinTypeKind.UInt64 },
    { "c_ssize",     BuiltinTypeKind.Int64 },
    { "c_longlong",  BuiltinTypeKind.Int64 },
    { "c_ulonglong", BuiltinTypeKind.UInt64 },
    { "c_float",     BuiltinTypeKind.Float32 },
    { "c_double",    BuiltinTypeKind.Float64 },
}

func void create_signed(ast_context.Context* context,
                        AST* a,
                        string_pool.Pool* pool,
                        const char* name,
                        i64 value,
                        QualType qt,
                        BuiltinTypeKind kind)
{
    Expr* ie = cast<Expr*>(IntegerLiteral.createSignedConstant(context, 0, value, qt));
    u32 name2 = pool.addStr(name, true);
    TypeRefHolder ref;
    ref.init();
    ref.setBuiltin(kind);
    VarDecl* var = VarDecl.create(context, VarDeclKind.GlobalVar, name2, 0, true, &ref, a.getIdx(), ie);
    Decl* d = cast<Decl*>(var);
    qt.setConst();
    d.setType(qt);
    d.setChecked();
    a.addVarDecl(d);
    a.getMod().addSymbol(name2, d);
}

func void create_unsigned(ast_context.Context* context,
                          AST* a,
                          string_pool.Pool* pool,
                          const char* name,
                          u64 value,
                          QualType qt,
                          BuiltinTypeKind kind)
{
    Expr* ie = cast<Expr*>(IntegerLiteral.createUnsignedConstant(context, 0, value, qt));
    u32 name2 = pool.addStr(name, true);
    TypeRefHolder ref;
    ref.init();
    ref.setBuiltin(kind);
    VarDecl* var = VarDecl.create(context, VarDeclKind.GlobalVar, name2, 0, true, &ref, a.getIdx(), ie);
    Decl* d = cast<Decl*>(var);
    qt.setConst();
    d.setType(qt);
    d.setChecked();
    a.addVarDecl(d);
    a.getMod().addSymbol(name2, d);
}

public func Module* load(ast_context.Context* context, string_pool.Pool* pool) {
    // TODO if 32 bit change some kinds

    u32 name = pool.add("c2", 2, true);
    Module* m = Module.create(context, name);
    m.setUsed();

    // TODO AST name must be in pool?
    // Note: add AST, since Decls have AST*
    AST* a = m.add("<generated>");

    for (u32 i=0; i<elemsof(ctypes); i++) {
        u32 type_name = pool.addStr(ctypes[i].name, true);
        // TODO use table inside ast.utils
        QualType qt = { 0 }
        switch (ctypes[i].kind) {
        case Int8:
            qt = g_i8;
            break;
        case Int16:
            qt = g_i16;
            break;
        case Int32:
            qt = g_i32;
            break;
        case Int64:
            qt = g_i64;
            break;
        case UInt8:
            qt = g_u8;
            break;
        case UInt16:
            qt = g_u16;
            break;
        case UInt32:
            qt = g_u32;
            break;
        case UInt64:
            qt = g_u64;
            break;
        case Float32:
            qt = g_f32;
            break;
        case Float64:
            qt = g_f64;
            break;
        default:
            break;
        }
        TypeRefHolder ref;
        ref.init();
        ref.setBuiltin(ctypes[i].kind);
        AliasTypeDecl* t = AliasTypeDecl.create(context, type_name, 0, true, a.getIdx(), &ref);
        Decl* d = t.asDecl();
        d.setType(qt);
        QualType qt2 = d.getType();
        qt2.setCanonicalType(qt);
        d.setChecked();
        a.addTypeDecl(d);
        m.addSymbol(type_name, d);
    }

    create_signed(context, a, pool, "min_i8", -128, g_i8, BuiltinTypeKind.Int8);
    create_signed(context, a, pool, "max_i8", 127, g_i8, BuiltinTypeKind.Int8);

    create_unsigned(context, a, pool, "min_u8", 0, g_u8, BuiltinTypeKind.UInt8);
    create_unsigned(context, a, pool, "max_u8", 255, g_u8, BuiltinTypeKind.UInt8);

    create_signed(context, a, pool, "min_i16", -32768, g_i16, BuiltinTypeKind.Int16);
    create_signed(context, a, pool, "max_i16", 32767, g_i16, BuiltinTypeKind.Int16);

    create_unsigned(context, a, pool, "min_u16", 0, g_u16, BuiltinTypeKind.UInt16);
    create_unsigned(context, a, pool, "max_u16", 65535, g_u16, BuiltinTypeKind.UInt16);

    create_signed(context, a, pool, "min_i32", -2147483648, g_i32, BuiltinTypeKind.Int32);
    create_signed(context, a, pool, "max_i32", 2147483647, g_i32, BuiltinTypeKind.Int32);

    create_unsigned(context, a, pool, "min_u32", 0, g_u32, BuiltinTypeKind.UInt32);
    create_unsigned(context, a, pool, "max_u32", 4294967295, g_u32, BuiltinTypeKind.UInt32);

    // NOTE: minimum should be -..808, but clang complains about it..
    create_signed(context, a, pool, "min_i64", -9223372036854775807, g_i64, BuiltinTypeKind.Int64);
    create_signed(context, a, pool, "max_i64", 9223372036854775807, g_i64, BuiltinTypeKind.Int64);

    create_unsigned(context, a, pool, "min_u64", 0, g_u64, BuiltinTypeKind.UInt64);
    create_unsigned(context, a, pool, "max_u64", 9223372036854775807, g_u64, BuiltinTypeKind.UInt64);

    // TODO currently only 64-bit version!
    create_signed(context, a, pool, "min_isize", -9223372036854775807, g_i64, BuiltinTypeKind.Int64);
    create_signed(context, a, pool, "max_isize", 9223372036854775807, g_i64, BuiltinTypeKind.Int64);

    create_unsigned(context, a, pool, "min_usize", 0, g_u64, BuiltinTypeKind.UInt64);
    create_unsigned(context, a, pool, "max_usize", 9223372036854775807, g_u64, BuiltinTypeKind.UInt64);

    return m;
}


/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module compiler;

import ast;
import ast_builder;
import ast_context;
import attr;
import build_file;
import build_target;
import c2module_loader;
import c2_parser;
import c_generator;
import color;
import component;
import console;
import constants;
import deps_generator;
import diagnostics;
import file_utils;
import library_loader;
import manifest;
import module_analyser;
import module_list;
import module_sorter;
import qbe_generator;
import refs_generator;
import source_mgr;
import string_list;
import string_pool;
import unused_checker;
import utils;
import warning_flags;

import string;
import stdlib;
import stdio;

public type Options struct {
    bool check_only;
    bool print_ast;
    bool generate_c;
    bool generate_qbe;
    bool test_mode;
    bool print_c;
    bool print_qbe;
    bool print_lib_ast;
    bool print_modules;
    bool print_symbols;
    bool print_ast_stats;
    bool print_reports;
    bool show_libs;
    u32 libdir; // from environment varible C2_LIBDIR, into auxPool
}

public func void build(string_pool.Pool* auxPool,
                       source_mgr.SourceMgr* sm,
                       diagnostics.Diags* diags,
                       build_file.Info* build_info, // can be nil
                       build_target.Target* target,
                       const Options* opts)
{
    Compiler c = {}
    c.build(auxPool, sm, diags, build_info, target, opts);
    c.free();
}

// TODO or return/add Component?
func void openLib(source_mgr.SourceMgr* sm,
                  string_pool.Pool* auxPool,
                  string_pool.Pool* astPool,
                  component.Component* comp,
                  u32 libdir)
{
    const char* libdirstr = auxPool.idx2str(libdir);
    char[512] manifestFilename;
    i32 len = stdio.sprintf(manifestFilename, "%s/%s/%s", libdirstr, comp.getName(), constants.manifest_name);
    u32 name_idx = auxPool.add(manifestFilename, cast<usize>(len), false);

    i32 file_id = sm.open(name_idx, 0, false);
    if (file_id == -1) return;
    // TODO fill component with stuff from manifest
    //if (!recipe.parseYaml(file_id)) return;
    // NOTE: dont parse modules (interface files) yet, only if needed
    // TODO erro handling
    manifest.parse(sm, file_id, astPool, comp);
    sm.close(file_id);
}

type LibLoader struct {
    const char* libdir;
    source_mgr.SourceMgr* sm;
    c2_parser.Parser* parser;
    string_pool.Pool* auxPool;
    string_pool.Pool* astPool;
    component.Component* c;
}

func void LibLoader.init(LibLoader* l,
                         const char* libdir,
                         source_mgr.SourceMgr* sm,
                         c2_parser.Parser* parser,
                         string_pool.Pool* auxPool,
                         string_pool.Pool* astPool,
                         component.Component* comp)
{
    l.libdir = libdir;
    l.sm = sm;
    l.parser = parser;
    l.auxPool = auxPool;
    l.astPool = astPool;
    l.c = comp;
}

func void LibLoader.handleModule(void* arg, ast.Module* m) {
    LibLoader* l = arg;
    if (!m.isUsed()) return;

    // TODO also use LibLoader for openLib
    const char* libdir = stdlib.getenv("C2_LIBDIR");
    if (!libdir) console.warn("environment variable C2_LIBDIR not set!");

    char[512] filename;
    i32 len = stdio.sprintf(filename, "%s/%s/%s.c2i", l.libdir, l.c.getName(), m.getName());
    u32 name = l.auxPool.add(filename, cast<usize>(len), false);

    // TODO get location  from manifest?
    i32 file_id = l.sm.open(name, 0, false);
    if (file_id == -1) return;   // note: error already printed

    l.parser.parse(file_id, true);

    l.sm.close(file_id);
}

func void loadLib(source_mgr.SourceMgr* sm,
                  c2_parser.Parser* parser,
                  ast_builder.Builder* builder,
                  string_pool.Pool* auxPool,
                  string_pool.Pool* astPool,
                  component.Component* comp)
{
    const char* libdir = stdlib.getenv("C2_LIBDIR");
    if (!libdir) console.warn("environment variable C2_LIBDIR not set!");

    builder.setComponent(comp);

    LibLoader loader;
    loader.init(libdir, sm, parser, auxPool, astPool, comp);
    comp.visitModules(LibLoader.handleModule, &loader);
}

func void Compiler.handleModuleImports(void* arg, ast.Module* m) {
    Compiler* c = arg;
    m.visitImports(Compiler.handleImport, c);
}

func void Compiler.handleImport(void* arg, ast.ImportDecl* id) {
    Compiler* c = arg;

    if (id.getDest()) return;

    ast.Decl* d = cast<ast.Decl*>(id);
    u32 name_idx = d.getNameIdx();
    ast.Module* m = c.allmodules.find(name_idx);
    if (m) {
        id.setDest(m);
        m.setUsed();
        d.setChecked();
        d.setType(ast.QualType.init(cast<ast.Type*>(m.getType())));
    } else {
        c.diags.error(d.getLoc(), "unknown module '%s'", ast.idx2name(name_idx));
        // TODO longjmp?
        stdlib.exit(-1);
    }
}

type Compiler struct {
    string_pool.Pool* auxPool;   // no ownership
    source_mgr.SourceMgr* sm;    // no ownership
    diagnostics.Diags* diags;    // no ownership
    build_file.Info* build_info;    // no ownership, can be nil
    const build_target.Target* target;     // no ownership
    const Options* opts;        // no ownership

    // TODO: extract this to a Context? and pass that around? (container only)
    library_loader.Loader* libloader;
    module_analyser.Analyser* analyser;
    ast_context.Context* context;
    string_pool.Pool* astPool;
    ast_builder.Builder* builder;
    module_list.List* allmodules;
    ast.Module* c2mod;  // since not in component
    c2_parser.Parser* parser;
    component.Component* mainComp;  // no ownership
    u32 main_idx;
    ast.Decl* mainFunc;

    // vector<Component*>
    component.List components;
}

func u32 Compiler.convert_attr(void* arg, const char* attr_name) {
    Compiler* c = arg;
    return c.astPool.addStr(attr_name, true);
}

func void Compiler.build(Compiler* c,
                         string_pool.Pool* auxPool,
                         source_mgr.SourceMgr* sm,
                         diagnostics.Diags* diags,
                         build_file.Info* build_info, // can be nil
                         build_target.Target* target,
                         const Options* opts)
{
    string.memset(c, 0, sizeof(Compiler));
    c.auxPool = auxPool;
    c.sm = sm;
    c.diags = diags;
    c.build_info = build_info;
    c.target = target;
    c.opts = opts;

    diags.setWarningAsError(target.getWarnings().are_errors);
    c.context = ast_context.create(16*1024);
    c.astPool = string_pool.create(128*1024, 2048);
    c.builder = ast_builder.create(c.context, diags);
    c.allmodules = module_list.create(false);
    c.components.init();
    c.diags.clear();

    c.libloader = library_loader.create(c.sm, c.context, &c.components, c.allmodules, c.auxPool, c.astPool);
    if (c.build_info) {
        const string_list.List* dirs = c.build_info.getLibDirs();
        for (u32 i=0; i<dirs.length(); i++) {
            c.libloader.addDir(dirs.get_idx(i));
        }
    } else {
        if (c.opts.libdir) c.libloader.addDir(c.opts.libdir);
    }

    if (opts.show_libs) {
        c.libloader.showAll();
        // since not all members have been initialized, just exit here, to avoid free() not working
        stdlib.exit(0);
    }

    c.analyser = module_analyser.create(c.diags, c.context, c.astPool, c.builder, c.allmodules, c.target.getWarnings());

    u32 wordsize = 8;   // TODO get from somewhere
    ast.init(c.context, c.astPool.getStart(), wordsize, color.useColor());
    attr.init(Compiler.convert_attr, c);
    // TODO memleak on ast.deinit() on early returns

    // create c2 module - special that it has no Component.
    c.c2mod = c2module_loader.load(c.context, c.astPool);
    c.allmodules.add(c.c2mod);

    // TODO only if no nolibc (do in recipe)
    u32 libc_idx = c.auxPool.addStr("libc", true);
    component.Component* libcComponent = component.create(c.context, c.auxPool, c.allmodules, libc_idx, true);
    c.components.add(libcComponent);
    c.builder.setComponent(libcComponent);  // TODO is this needed?
    // NOTE: HMM manifest filename should go into auxPool, module-names into normal astPool
    openLib(sm, auxPool, c.astPool, libcComponent, c.opts.libdir);

    // TODO open other libs, TODO libc should be here as well
    const string_list.List* libs = target.getLibs();
    for (u32 i=0; i<libs.length(); i++) {
        const char* libname = libs.get(i);
        // TODO order libs by dependency, load recursive deps
        u32 libname_idx = c.auxPool.addStr(libname, true);
        component.Component* lib = component.create(c.context, c.auxPool, c.allmodules, libname_idx, true);
        c.components.add(lib);
        c.builder.setComponent(lib);    // TODO is this needed?
        // NOTE: HMM manifest filename should go into auxPool, module-names into normal astPool
        openLib(sm, auxPool, c.astPool, lib, c.opts.libdir);
    }

    u32 main_idx = c.auxPool.addStr("main", true);
    c.mainComp = component.create(c.context, c.auxPool, c.allmodules, main_idx, false);
    c.components.add(c.mainComp);
    c.builder.setComponent(c.mainComp);

    c2_parser.Info info;
    info.init(sm, diags, c.astPool, target.getFeatures());
    c.parser = c2_parser.create(&info, c.builder);

    console.debug("parsing %s", c.auxPool.idx2str(target.getNameIdx()));
    u64 t1_start = utils.now();
    for (u32 j=0; j<target.numFiles(); j++) {
        const build_target.File* f = target.getFile(j);
        i32 file_id = sm.open(f.name, f.loc, true);

        //i32 file_id = target.openFile2(j);
        if (file_id == -1) return;   // note: error already printed

        console.debug("parsing file %u", file_id);

        c.parser.parse(file_id, false);

        sm.close(file_id);
    }
    u64 t1_end = utils.now();
    console.log_time("parsing", t1_end - t1_start);
#if 0
    for (u32 i=0; i<c.num_components; i++) {
        c.components[i].info();
    }
#endif
    if (!c.diags.isOk()) {
        if (c.opts.print_ast) c.mainComp.print(true);
        return;
    }

    u64 t2_start = utils.now();
    // step 1: resolve imports
    console.debug("analysing imports");
    c.mainComp.visitModules(Compiler.handleModuleImports, c);

    // step 2: sort modules inside main component
    console.debug("sorting modules");
    module_sorter.sort(c.mainComp, c.diags);

    const warning_flags.Flags* warnings = c.target.getWarnings();

    // Mark exported modules (cannot be external/C2-module)
    const string_list.List* exports = target.getExports();
    for (u32 i = 0; i< exports.length(); i++) {
        const char* name = exports.get(i);  // NOTE: from auxPool!
        u32 name_idx = c.astPool.addStr(name, true);  // put in astPool so we can compare indexes
        ast.Module* m = c.allmodules.find(name_idx);
        if (m) {
            if (m.isExternal()) {
                console.error("cannot export external module %s", name);
                return;
            }
            m.setExported();
        } else {
            console.error("cannot export %s, no such module", name);
            return;
        }
    }

    // analyse each module, all files in it step by step
    for (u32 i=0; i<c.components.size()-1; i++) {  // only external components
        component.Component* comp = c.components.get(i);

        loadLib(c.sm, c.parser, c.builder, c.auxPool, c.astPool, comp);
        comp.visitModules(Compiler.handleModuleImports, c);
        module_sorter.sort(comp, c.diags);
        comp.visitModules(Compiler.analyseUsedModule, c);
        if (c.opts.print_lib_ast) comp.print(true);

    }

    c.mainComp.visitModules(Compiler.analyseModule, c);

    // mark main module as used (for libs top level module (at least) should be exported)
    c.main_idx = c.astPool.addStr("main", true);
    c.mainComp.visitModules(Compiler.findTopModule, c);
    if (target.getKind() == build_target.Kind.Executable) {
        if (!c.mainFunc) {
            if (!c.opts.test_mode) c.diags.error(0, "no main function found");
        }
    } else {
        if (c.mainFunc) {
            c.diags.error(0, "libraries cannot have a main function");
        }
    }

    // check unused
    if (!warnings.no_unused) {
        c.mainComp.visitModules(Compiler.checkUnused, c);
    }

    u64 t2_end = utils.now();
    console.log_time("analysis", t2_end - t2_start);

    if (c.diags.isOk() && !c.opts.check_only) {

        // create output directory
        char[256] output_dir;
        stdio.sprintf(output_dir, "%s/%s", constants.output_dir, c.auxPool.idx2str(target.getNameIdx()));
        if (c.build_info) {
            const char* output_dir2 = c.build_info.getOutputDir();
            console.debug("using output dir: %s", output_dir2);
            if (output_dir2) stdio.sprintf(output_dir, "%s/%s", output_dir2, c.auxPool.idx2str(target.getNameIdx()));
        }
        i32 err = file_utils.create_directory(output_dir);
        if (err) {
            console.error("cannot create directory %s", output_dir);
            stdlib.exit(-1);
        }

        const char* target_name = c.auxPool.idx2str(target.getNameIdx());

        // Temp here (TODO move to plugin)
        console.debug("generating deps");
        u64 deps1 = utils.now();
        deps_generator.generate(target_name, output_dir, c.c2mod, &c.components);
        u64 deps2 = utils.now();
        console.log_time("deps generation", deps2 - deps1);

        // Temp here (TODO move to plugin)
        console.debug("generating refs");
        u64 gen1 = utils.now();
        refs_generator.generate(c.sm, output_dir, &c.components);
        u64 gen2 = utils.now();
        console.log_time("refs generation", gen2 - gen1);

        if (opts.generate_c || target.getCGenGenerate()) {
            console.debug("generating C");
            u64 gen3 = utils.now();
            c_generator.generate(target_name,
                                 target.getKind(),
                                 output_dir,
                                 c.build_info,
                                 c.c2mod,
                                 &c.components,
                                 c.mainFunc,
                                 c.astPool.addStr("stdarg", true),
                                 c.opts.print_c);
            u64 gen4 = utils.now();
            console.log_time("C generation", gen4 - gen3);

            if (!target.getCGenNoBuild()) {
                gen3 = utils.now();
                c_generator.build(output_dir);
                gen4 = utils.now();
                console.log_time("C compilation", gen4 - gen3);
            }
        }

        if (opts.generate_qbe) {
            console.debug("generating QBE");
            u64 gen3 = utils.now();
            qbe_generator.generate(target_name, output_dir, &c.components, opts.print_qbe);
            u64 gen4 = utils.now();
            console.log_time("QBE generation", gen4 - gen3);

            gen3 = utils.now();
            qbe_generator.build(output_dir);
            gen4 = utils.now();
            console.log_time("QBE compilation", gen4 - gen3);
        }
    }

    if (opts.print_reports) {
        c.sm.report();
        c.context.report();
        c.astPool.report();
    }
    c.diags.printStatus();

    bool show_functions = true;
    if (c.opts.print_ast) c.mainComp.print(show_functions);
    if (c.opts.print_modules) {
        for (u32 i=0; i<c.components.size(); i++) {
            c.components.get(i).printModules();
        }
    }
    if (c.opts.print_symbols) {
        for (u32 i=0; i<c.components.size(); i++) {
            c.components.get(i).printSymbols();
        }
    }

    ast.deinit(c.opts.print_ast_stats);
}

func void Compiler.free(Compiler* c) {
    c.components.free();
    c.libloader.free();
    c.analyser.free();
    c.parser.free();
    c.allmodules.free();
    c.c2mod.free();
    c.builder.free();
    c.astPool.free();
    c.context.free();
}

func void Compiler.analyseModule(void* arg, ast.Module* m) {
    Compiler* c = arg;
    console.debug("analysing module %s", m.getName());
    c.analyser.check(m);
}

func void Compiler.analyseUsedModule(void* arg, ast.Module* m) {
    Compiler* c = arg;
    if (m.isUsed()) {
        c.analyser.check(m);
    }
}

func void Compiler.findTopModule(void* arg, ast.Module* m) {
    Compiler* c = arg;
    // Note: for now all unused modules are top-levels
    if (m.isUsed()) return;
    if (c.mainFunc) return;

    c.mainFunc = c.analyser.findMain(m, c.main_idx);
}

func void Compiler.checkUnused(void* arg, ast.Module* m) {
    Compiler* c = arg;
    unused_checker.check(c.diags, c.target.getWarnings(), m);
}


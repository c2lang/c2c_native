/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module compiler;

import ast;
import ast_builder;
import ast_context;
import attr;
import build_file;
import build_target;
import c2module_loader;
import c2_parser;
import c_generator;
import color;
import component;
import console;
import constants;
import deps_generator;
import diagnostics;
import file_utils;
import module_analyser;
import module_list;
import module_sorter;
import qbe_generator;
import refs_generator;
import source_mgr;
import string_list;
import string_pool;
import unused_checker;
import utils;
import warning_flags;

import string;
import stdlib;
import stdio;

public type Options struct {
    bool check_only;
    bool print_ast;
    bool generate_c;
    bool fast_build;
    bool generate_qbe;
    bool test_mode;
    bool print_c;
    bool print_qbe;
    bool print_lib_ast;
    bool print_modules;
    bool print_symbols;
    bool print_external_symbols;
    bool print_ast_stats;
    bool print_reports;
    bool show_libs;
    u32 libdir; // from environment varible C2_LIBDIR, into auxPool
}

public func void build(string_pool.Pool* auxPool,
                       source_mgr.SourceMgr* sm,
                       diagnostics.Diags* diags,
                       build_file.Info* build_info, // can be nil
                       build_target.Target* target,
                       const Options* opts)
{
    Compiler c = {}
    c.build(auxPool, sm, diags, build_info, target, opts);
    if (opts.print_ast) c.mainComp.print(true);

    if (opts.print_reports) {
        c.sm.report();
        c.context.report();
        c.astPool.report();
    }

    diags.printStatus();

    ast.deinit(c.opts.print_ast_stats);
    c.free();
}

func void Compiler.handleModuleImports(void* arg, ast.Module* m) {
    Compiler* c = arg;
    m.visitImports(Compiler.handleImport, c);
}

func void Compiler.handleImport(void* arg, ast.ImportDecl* id) {
    Compiler* c = arg;

    if (id.getDest()) return;

    ast.Decl* d = cast<ast.Decl*>(id);
    u32 name_idx = d.getNameIdx();
    ast.Module* m = c.allmodules.find(name_idx);
    if (!m) {
        c.diags.error(d.getLoc(), "unknown module: '%s'", ast.idx2name(name_idx));
        return;
    }

    if (!m.isDirect()) {
        component.Component* co = c.find_component(m);
        c.diags.error(d.getLoc(), "module '%s' is in component '%s' that is not used directly", ast.idx2name(name_idx), co.getName());
        // TODO longjmp?
        stdlib.exit(-1);
    }

    id.setDest(m);
    m.setUsed();
    d.setChecked();
    d.setType(ast.QualType.init(cast<ast.Type*>(m.getType())));
}

type Compiler struct {
    string_pool.Pool* auxPool;   // no ownership
    source_mgr.SourceMgr* sm;    // no ownership
    diagnostics.Diags* diags;    // no ownership
    build_file.Info* build_info;    // no ownership, can be nil
    const build_target.Target* target;     // no ownership
    const Options* opts;        // no ownership

    ast_context.Context* context;
    string_pool.Pool* astPool;
    ast_builder.Builder* builder;
    module_list.List allmodules;
    component.List components;
    c2_parser.Parser* parser;
    module_analyser.Analyser* analyser;

    ast.Module* c2mod;  // since not in component
    component.Component* mainComp;  // no ownership
    u32 main_idx;
    ast.Decl* mainFunc;

    string_list.List libdirs;
    component.Component* current; // only set during load() TODO
}

func u32 Compiler.convert_attr(void* arg, const char* attr_name) {
    Compiler* c = arg;
    return c.astPool.addStr(attr_name, true);
}

func void Compiler.build(Compiler* c,
                         string_pool.Pool* auxPool,
                         source_mgr.SourceMgr* sm,
                         diagnostics.Diags* diags,
                         build_file.Info* build_info, // can be nil
                         build_target.Target* target,
                         const Options* opts)
{
    string.memset(c, 0, sizeof(Compiler));
    c.auxPool = auxPool;
    c.sm = sm;
    c.diags = diags;
    c.build_info = build_info;
    c.target = target;
    c.opts = opts;

    u32 wordsize = 8;   // TODO get from somewhere

    diags.setWarningAsError(target.getWarnings().are_errors);
    c.diags.clear();

    c.context = ast_context.create(16*1024);
    c.astPool = string_pool.create(128*1024, 2048);

    c.main_idx = c.astPool.addStr("main", true);
    u32 c2_idx = c.astPool.addStr("c2", true);

    c.builder = ast_builder.create(c.context, diags, c2_idx, c.main_idx);
    c.parser = c2_parser.create(sm, diags, c.astPool, c.builder, target.getFeatures());
    c.allmodules.init(false);
    c.components.init();

    ast.init(c.context, c.astPool.getStart(), wordsize, color.useColor());
    attr.init(Compiler.convert_attr, c);

    c.analyser = module_analyser.create(c.diags, c.context, c.astPool, c.builder, &c.allmodules, c.target.getWarnings());
    c.libdirs.init(c.auxPool);

    if (c.build_info) {
        const string_list.List* dirs = c.build_info.getLibDirs();
        for (u32 i=0; i<dirs.length(); i++) {
            c.libdirs.add(dirs.get_idx(i));
        }
    } else {
        if (c.opts.libdir) c.libdirs.add(c.opts.libdir);
    }

    if (opts.show_libs) {
        c.showAllLibs();
        // since not all members have been initialized, just exit here, to avoid free() not working
        stdlib.exit(0);
    }

    // create c2 module - special that it has no Component.
    c.c2mod = c2module_loader.load(c.context, c.astPool);
    c.allmodules.add(c.c2mod);

    c.load_libs();

    c.mainComp = component.create(c.context, c.auxPool, &c.allmodules, c.main_idx, false, true);
    c.components.add(c.mainComp);
    c.builder.setComponent(c.mainComp);

    console.debug("parsing %s", c.auxPool.idx2str(target.getNameIdx()));
    u64 t1_start = utils.now();
    for (u32 j=0; j<target.numFiles(); j++) {
        const build_target.File* f = target.getFile(j);
        i32 file_id = sm.open(f.name, f.loc, true);

        //i32 file_id = target.openFile2(j);
        if (file_id == -1) return;   // note: error already printed

        console.debug("parsing file %s", sm.getFileName(file_id));

        c.parser.parse(file_id, false);

        sm.close(file_id);
    }
    u64 t1_end = utils.now();
    console.log_time("parsing", t1_end - t1_start);
#if 0
    for (u32 i=0; i<c.num_components; i++) {
        c.components[i].info();
    }
#endif
    if (!c.diags.isOk()) return;

    u64 t2_start = utils.now();
    // step 1: resolve imports
    console.debug("analysing imports");
    c.mainComp.visitModules(Compiler.handleModuleImports, c);
    if (!c.diags.isOk()) return;

    // step 2: sort modules inside main component
    console.debug("sorting modules");
    module_sorter.sort(c.mainComp, c.diags);

    // Mark exported modules (cannot be external/C2-module)
    const string_list.List* exports = target.getExports();
    for (u32 i = 0; i< exports.length(); i++) {
        const char* name = exports.get(i);  // NOTE: from auxPool!
        u32 name_idx = c.astPool.addStr(name, true);  // put in astPool so we can compare indexes
        ast.Module* m = c.allmodules.find(name_idx);
        if (m) {
            if (m.isExternal()) {
                console.error("cannot export external module %s", name);
                return;
            }
            m.setExported();
        } else {
            console.error("cannot export %s, no such module", name);
            return;
        }
    }

    // analyse each module, all files in it step by step
    for (u32 i=0; i<c.components.size(); i++) {
        component.Component* comp = c.components.get(i);
        if (!comp.isExternal()) continue;   // only external components

        c.load_lib(comp);
    }

    c.mainComp.visitModules(Compiler.analyseModule, c);

    if (c.diags.hasErrors()) return;

    // mark main module as used (for libs top level module (at least) should be exported)
    c.checkMain();

    // check unused
    const warning_flags.Flags* warnings = c.target.getWarnings();
    if (!warnings.no_unused) {
        c.mainComp.visitModules(Compiler.checkUnused, c);
    }

    u64 t2_end = utils.now();
    console.log_time("analysis", t2_end - t2_start);

    if (c.opts.print_modules) {
        for (u32 i=0; i<c.components.size(); i++) {
            c.components.get(i).printModules();
        }
        return;
    }

    if (c.opts.print_symbols | c.opts.print_external_symbols) {
        for (u32 i=0; i<c.components.size(); i++) {
            c.components.get(i).printSymbols(c.opts.print_external_symbols);
        }
        return;
    }

    if (!c.diags.isOk()) return;

    // create output directory
    char[256] output_dir;
    stdio.sprintf(output_dir, "%s/%s", constants.output_dir, c.auxPool.idx2str(target.getNameIdx()));
    if (c.build_info) {
        const char* output_dir2 = c.build_info.getOutputDir();
        console.debug("using output dir: %s", output_dir2);
        if (output_dir2) stdio.sprintf(output_dir, "%s/%s", output_dir2, c.auxPool.idx2str(target.getNameIdx()));
    }
    i32 err = file_utils.create_directory(output_dir);
    if (err) {
        console.error("cannot create directory %s", output_dir);
        stdlib.exit(-1);
    }

    const char* target_name = c.auxPool.idx2str(target.getNameIdx());

    if (!c.opts.test_mode) {
        // Temp here (TODO move to plugin)
        console.debug("generating deps");
        u64 deps1 = utils.now();
        deps_generator.generate(target_name, output_dir, c.c2mod, &c.components);
        u64 deps2 = utils.now();
        console.log_time("deps generation", deps2 - deps1);

        // Temp here (TODO move to plugin)
        console.debug("generating refs");
        u64 gen1 = utils.now();
        refs_generator.generate(c.sm, output_dir, &c.components);
        u64 gen2 = utils.now();
        console.log_time("refs generation", gen2 - gen1);
    }

    if (c.opts.check_only) return;

    if (opts.generate_c || target.getCGenGenerate()) {
        console.debug("generating C");
        u64 gen3 = utils.now();
        c_generator.generate(target_name,
                             target.getKind(),
                             output_dir,
                             c.sm,
                             c.build_info,
                             c.c2mod,
                             &c.components,
                             c.mainFunc,
                             c.astPool.addStr("stdarg", true),
                             c.target.hasAsserts(),
                             c.target.getCGenFastBuild() | c.opts.fast_build,
                             c.opts.print_c);
        u64 gen4 = utils.now();
        console.log_time("C generation", gen4 - gen3);

        if (!target.getCGenNoBuild() && !opts.test_mode) {
            console.debug("building C");
            gen3 = utils.now();
            c_generator.build(output_dir);
            gen4 = utils.now();
            console.log_time("C compilation", gen4 - gen3);
        }
    }

    if (opts.generate_qbe) {
        console.debug("generating QBE");
        u64 gen3 = utils.now();
        qbe_generator.generate(target_name, output_dir, &c.components, opts.print_qbe);
        u64 gen4 = utils.now();
        console.log_time("QBE generation", gen4 - gen3);

        gen3 = utils.now();
        qbe_generator.build(output_dir);
        gen4 = utils.now();
        console.log_time("QBE compilation", gen4 - gen3);
    }
}

func void Compiler.free(Compiler* c) {
    c.components.free();
    c.analyser.free();
    c.parser.free();
    c.allmodules.free();
    c.c2mod.free();
    c.builder.free();
    c.astPool.free();
    c.context.free();
    c.libdirs.free();
}

func void Compiler.analyseModule(void* arg, ast.Module* m) {
    Compiler* c = arg;
    console.debug("analysing module %s", m.getName());
    c.analyser.check(m);
}

func void Compiler.analyseUsedModule(void* arg, ast.Module* m) {
    Compiler* c = arg;
    if (m.isUsed()) {
        c.analyser.check(m);
    }
}

func void Compiler.findTopModule(void* arg, ast.Module* m) {
    Compiler* c = arg;
    // Note: for now all unused modules are top-levels
    if (m.isUsed()) return;
    if (c.mainFunc) return;

    c.mainFunc = c.analyser.findMain(m, c.main_idx);
}

func void Compiler.checkUnused(void* arg, ast.Module* m) {
    Compiler* c = arg;
    unused_checker.check(c.diags, c.target.getWarnings(), m);
}

func void Compiler.checkMain(Compiler* c) {
    c.mainComp.visitModules(Compiler.findTopModule, c);
    if (c.target.getKind() == build_target.Kind.Executable) {
        if (!c.mainFunc) {
            if (!c.opts.test_mode) c.diags.error(0, "no 'main' function found");

            return;
        }

        if (!c.mainFunc.isPublic()) {
            c.diags.error(c.mainFunc.getLoc(), "function 'main' should be declared public");
            return;
        }

        ast.FunctionDecl* main = cast<ast.FunctionDecl*>(c.mainFunc);

        if (!main.hasReturn()) {
            c.diags.error(c.mainFunc.getLoc(), "function 'main' should return 'i32'");
            return;
        }

        ast.QualType rtype = main.getRType();
        ast.BuiltinType* bi = rtype.getBuiltin();
        if (!rtype.isBuiltin() || !bi.isInt32()) {
            c.diags.error(c.mainFunc.getLoc(), "function 'main' should return 'i32'");
            return;
        }

    } else {
        if (c.mainFunc) {
            c.diags.error(c.mainFunc.getLoc(), "libraries cannot have a 'main' function");
        }
    }
}

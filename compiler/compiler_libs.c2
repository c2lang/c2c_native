/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module compiler;

import ast;
import color;
import component;
import console;
import constants;
import manifest;
import module_sorter;
//import source_mgr;
import string_buffer;
import string_list;
//import string_pool;

import c_errno local;
import libc_dirent local;
import stdio;
import stdlib;
import string;
import sys_stat local;

// reads the manifest, creates the Component and (empty) Modules
func void Compiler.open_lib(Compiler* c, u32 libname) {
    const char* libstr = c.auxPool.idx2str(libname);
    char[512] libdir;
    if (!c.find_lib(libstr, libdir)) {
        console.error("cannot find library '%s'", libstr);
        stdlib.exit(-1);
    }

    char[512] fullname;
    stdio.sprintf(fullname, "%s/%s", libdir, constants.manifest_name);
    u32 filename_idx = c.auxPool.addStr(fullname, false);
    i32 file_id = c.sm.open(filename_idx, 0, false);
    if (file_id == -1) return;

    u32 dirname_idx = c.auxPool.addStr(libdir, false);

    component.Component* comp = component.create(c.context, c.auxPool, &c.allmodules, libname, dirname_idx, true);
    manifest.parse(c.sm, file_id, c.astPool, comp);
    c.components.add(comp);

    c.sm.close(file_id);
}

func bool Compiler.find_lib(const Compiler* c, const char* libname, char* fullpath) {
    for (u32 i=0; i<c.libdirs.length(); i++) {
        const char* dirname = c.libdirs.get(i);
        stdio.sprintf(fullpath, "%s/%s/%s", dirname, libname, constants.manifest_name);

        Stat statbuf;
        i32 err = stat(fullpath, &statbuf);
        if (!err) {
            stdio.sprintf(fullpath, "%s/%s", dirname, libname);
            return true;
        }
    }
    return false;
}

func void Compiler.parseExternalModule(void* arg, ast.Module* m) {
    Compiler* c = arg;
    if (!m.isUsed()) return;

    char[512] filename;
    i32 len = stdio.sprintf(filename, "%s/%s.c2i", c.current.getPath(), m.getName());
    u32 name = c.auxPool.add(filename, cast<usize>(len), false);

    i32 file_id = c.sm.open(name, 0, false);
    if (file_id == -1) return;   // note: error already printed

    c.parser.parse(file_id, true);

    c.sm.close(file_id);
}

func void Compiler.load_lib(Compiler* c, component.Component* comp) {
    c.current = comp;
    c.builder.setComponent(comp);

    // parse modules
    comp.visitModules(Compiler.parseExternalModule, c);

    // check imports
    comp.visitModules(Compiler.handleModuleImports, c);

    // sort modules
    module_sorter.sort(comp, c.diags);

    // analyse modules
    comp.visitModules(Compiler.analyseUsedModule, c);

    if (c.opts.print_lib_ast) comp.print(true);
}

func void Compiler.showAllLibs(Compiler* c) {
    string_buffer.Buf* out = string_buffer.create(1024, color.useColor(), 2);
    out.add("libraries:\n");

    bool show_modules = false;
    for (u32 i=0; i<c.libdirs.length(); i++) {
        c.showLibs(out, c.libdirs.get(i), show_modules);
    }

    stdio.puts(out.data());
    out.free();
}

func void Compiler.showLibs(Compiler* c, string_buffer.Buf* out, const char* dirname, bool show_modules) {
    out.indent(1);
    out.color(color.Blue);
    out.add(dirname);
    out.color(color.Normal);
    out.newline();

    DIR* dir = opendir(dirname);
    if (dir == nil) {
        console.error("cannot open library dir '%s': %s", dirname, string.strerror(*errno2()));
        return;
    }

    char[512] fullname;
    Dirent* entry = readdir(dir);
    while (entry != nil) {
        const char* name = entry.d_name;
        if (name[0] != '.' && entry.d_type == DT_DIR) {
            i32 len = stdio.sprintf(fullname, "%s/%s/%s", dirname, name, constants.manifest_name);

            Stat statbuf;
            i32 err = stat(fullname, &statbuf);
            if (err) goto next;

            u32 filename_idx = c.auxPool.add(fullname, cast<usize>(len), false);

            out.indent(2);
            out.add(name);
            {
                i32 file_id = c.sm.open(filename_idx, 0, false);
                if (file_id == -1) return;

                u32 name_idx = c.auxPool.addStr(name, true);
                component.Component* comp = component.create(c.context, c.auxPool, &c.allmodules, name_idx, 0, true);
                manifest.parse(c.sm, file_id, c.astPool, comp);
                c.components.add(comp);

                out.add("  ");
                out.color(color.Yellow);
                bool first = true;
                if (comp.isStaticLib()) {
                    out.add("static");
                    first = false;
                }
                if (comp.isDynamicLib()) {
                    if (!first) out.add1('|');
                    out.add("dynamic");
                    first = false;
                }

                const string_list.List* deps = comp.getDeps();
                u32 num_deps = deps.length();
                if (num_deps) {
                    out.add("  ");
                    out.color(color.Magenta);
                    out.add("requires: ");
                    for (u32 i=0; i<num_deps; i++) {
                        if (i != 0) out.add(", ");
                        out.add(deps.get(i));
                    }
                }

                c.sm.close(file_id);
                out.color(color.Normal);
                out.newline();

                if (show_modules) {
                    // TODO store in manifest or component?
                }
            }
        }
next:
        entry = readdir(dir);
    }
    closedir(dir);
}


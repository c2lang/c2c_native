module diagnostics;

import color;
import source_mgr;
import string_buffer;
import src_loc local;
import c2_tokenizer; // to find end of token

import stdarg local;
import stdio local;
import stdlib;

public type Diags struct {
    source_mgr.SourceMgr* sm;
    bool use_color;
    u32 num_errors;
    u32 num_warnings;
} @(opaque)

public func Diags* create(source_mgr.SourceMgr* sm, bool use_color) {
    Diags* diags = stdlib.calloc(1, sizeof(Diags));
    diags.sm = sm;
    diags.use_color = use_color;
    return diags;
}

public func void Diags.free(Diags* diags) {
    stdlib.free(diags);
}

type Category enum u8 {
    Info,
    Warning,
    Error,
}

const char*[] category_names = {
    "info",
    "warning",
    "error",
}

const char*[] category_colors = {
    color.Grey,
    color.Yellow,
    color.Bred,
}

// return true if error, false if warning
public func bool Diags.reportRange(Diags* diags, SrcLoc loc, SrcRange range, const char* format, ...) {
    Category category = Category.Error; // TODO determine

    Va_list args;
    va_start(args, format);
    diags.internal(category, loc, range, format, args);
    va_end(args);
    return category == Category.Error;
}

// return true if error, false if warning
public func bool Diags.report(Diags* diags, SrcLoc loc, const char* format, ...) {
    Category category = Category.Error; // TODO determine

    Va_list args;
    va_start(args, format);
    SrcRange range = { 0, 0 }
    diags.internal(category, loc, range, format, args);
    va_end(args);
    return category == Category.Error;
}

public func void Diags.note(Diags* diags, SrcLoc loc, const char* format, ...) {
    Va_list args;
    va_start(args, format);
    SrcRange range = { 0, 0 }
    diags.internal(Category.Info, loc, range, format, args);
    va_end(args);
}

func void Diags.internal(Diags* diags, Category category, SrcLoc sloc, SrcRange range, const char* format, Va_list args) {
    if (category == Category.Error) {
        diags.num_errors++;
    } else {
        diags.num_warnings++;
    }

    string_buffer.Buf* out = string_buffer.create(512, diags.use_color);

    source_mgr.Location startLoc = diags.sm.getLocation(range.start);
    source_mgr.Location loc = diags.sm.getLocation(sloc);
    // get end of last token
    if (range.end) {
        const char* src = diags.sm.get_token_source(range.end);
        range.end = c2_tokenizer.getTokenEnd(src, range.end);
    }
    source_mgr.Location endLoc = diags.sm.getLocation(range.end);

    if (sloc) {
        out.print("%s:%u:%u: ", loc.filename, loc.line, loc.column);
    }

    out.color(category_colors[category]);
    out.add(category_names[category]);
    out.add(": ");
    out.color(color.Normal);

    char[256] tmp;
    vsprintf(tmp, format, args);
    out.add(tmp);
    out.add("\n");

    if (sloc) {
        // TODO if it's too long, just show relevant part
        out.add_line(loc.line_start);
        out.add("\n");

        if (range.start && range.end) {
            // TODO handle case where a Range is spread over multiple lines
            assert(endLoc.column >= startLoc.column);
            out.indent(startLoc.column - 1);
            out.color(color.Bgreen);
            for (u32 i=startLoc.column; i<=endLoc.column; i++) {
                if (i == loc.column) out.add("^");
                else out.add("~");
            }
            out.color(color.Normal);
        } else {
            out.indent(loc.column - 1);
            out.color(color.Bgreen);
            out.add("^");
            out.color(color.Normal);
        }
    }

    stdio.FILE* stream = (category == Category.Info) ? stdout : stderr;
    fprintf(stream, "%s\n", out.data());
}

public func bool Diags.isOk(const Diags* diags) { return diags.num_errors == 0; }

public func u32 Diags.getNumErrors(const Diags* diags) { return diags.num_errors; }

public func u32 Diags.getNumWarnings(const Diags* diags) { return diags.num_warnings; }


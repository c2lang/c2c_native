/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c2c_main;

import color;
import c2recipe;
import compiler;
import constants;
import diagnostics;
import source_mgr;
import string_pool;
import utils;

import stdlib;
import unistd;
import string local;
import c_errno local;
import stdio local;

type Options struct {
    bool print_ast;
    bool check_only;    // not used right now (on --check)
    bool generate_c;
    bool generate_qbe;
    bool test_mode;
    bool print_c;
    bool print_qbe;
    bool print_lib_ast;
    bool print_modules;
    bool print_symbols;
    bool print_ast_stats;
    bool print_reports;
    bool log_verbose;
    const char* target;
    const char* single_file;
    const char* other_dir;
}

func void usage(const char* me) {
    printf("Usage: %s <options> <filename>\n", me);
    printf("Options\n");
    printf("\t-a        print ASTs\n");
    printf("\t-A        print Library ASTs\n");
    printf("\t-c        generate C-code\n");
    printf("\t-C        generate + print C-code\n");
    printf("\t-d [dir]  change to [dir] first\n");
    printf("\t-f        only parse single file\n");
    printf("\t-m        print modules\n");
    printf("\t-q        generate QBE\n");
    printf("\t-Q        generate + print QBE\n");
    printf("\t-r        print reports\n");
    printf("\t-s        print symbols\n");
    printf("\t-t        print AST statistics\n");
    printf("\t-v        verbose logging\n");
    printf("\t--test    test mode (dont check for main() function)\n");
    //printf("\t--check   check only (dont generate)\n");
    stdlib.exit(-1);
}

func void parse_long_opt(i32 i, i32 argc, char** argv, Options* opts) {
    const char* arg = argv[i];
    sswitch (arg+2) {
    case "test":
        opts.test_mode = true;
    default:
        usage(argv[0]);
    }
}

func void parse_opts(i32 argc, char** argv, Options* opts) {
    for (i32 i=1; i<argc; i++) {
        const char* arg = argv[i];
        if (arg[0] == '-') {
            switch (arg[1]) {
            case '-':
                parse_long_opt(i, argc, argv, opts);
                break;
            case 'A':
                opts.print_lib_ast = true;
                break;
            case 'C':
                opts.generate_c = true;
                opts.print_c = true;
                break;
            case 'Q':
                opts.generate_qbe = true;
                opts.print_qbe = true;
                break;
            case 'a':
                opts.print_ast = true;
                break;
            case 'c':
                opts.generate_c = true;
                break;
            case 'd':
                if (i==argc-1) usage(argv[0]);
                i++;
                opts.other_dir = argv[i];
                break;
            case 'f':
                if (i==argc-1) usage(argv[0]);
                i++;
                opts.single_file = argv[i];
                break;
            case 'm':
                opts.print_modules = true;
                break;
            case 'q':
                opts.generate_qbe = true;
                break;
            case 'r':
                opts.print_reports = true;
                break;
            case 's':
                opts.print_symbols = true;
                break;
            case 't':
                opts. print_ast_stats = true;
                break;
            case 'v':
                opts. log_verbose = true;
                break;
            default:
                printf("unknown option\n");
                usage(argv[0]);
                break;
            }
        } else {
            if (opts.target) usage(argv[0]);
            opts.target = arg;
        }
    }
    if (opts.target && opts.single_file) usage(argv[0]);
}

public func i32 main(i32 argc, char** argv) {
    Options opts = { }

    parse_opts(argc, argv, &opts);

    if (opts.other_dir) {
        if (unistd.chdir(opts.other_dir)) {
            fprintf(stderr, "cannot chdir to %s: %s\n", opts.other_dir, strerror(*errno2()));
            stdlib.exit(-1);
        }
    }

    // note: auxPool is used by recipe, build-file and manifests
    string_pool.Pool* auxPool = string_pool.create(32*1024, 0);

    source_mgr.SourceMgr* sm = source_mgr.create(auxPool, constants.Max_open_files);
    diagnostics.Diags* diags = diagnostics.create(sm, color.useColor());

    c2recipe.Recipe* recipe = c2recipe.create(sm, auxPool);

    i32 recipe_id = -1;

    bool hasError = false;

    if (opts.single_file) {
        recipe.addDummyTarget(opts.single_file);
    } else {
        if (!utils.findProjectDir()) {
            fprintf(stderr, "c2c: error: cannot find C2 root dir\n");
            fprintf(stderr, "c2c requires a %s file in the project root\n", constants.recipe_name);
            fprintf(stderr, "Use argument -h for a list of available opts and usage of c2c\n");
            return -1;
        }
        u32 recipe_idx = auxPool.addStr(constants.recipe_name, false);

        i32 yaml_id = sm.open(recipe_idx, 0, false);
        if (yaml_id == -1) return -1;
        if (!recipe.parse(yaml_id)) return -1;

        // TEMP also parse yaml version
        recipe_id = yaml_id;
        //u32 recipe2_idx = auxPool.addStr("c2recipe.yaml", false);
        //recipe_id = sm.open(recipe2_idx, 0, false);
        //if (recipe_id == -1) return -1;
        //if (!recipe.parseYaml(recipe_id)) return -1;
    }

    //recipe.dump();

    compiler.Options options = { }
    options.check_only = opts.check_only;
    options.print_ast = opts.print_ast;
    options.generate_c = opts.generate_c;
    options.generate_qbe = opts.generate_qbe;
    options.test_mode = opts.test_mode;
    options.print_c = opts.print_c;
    options.print_lib_ast = opts.print_lib_ast;
    options.print_modules = opts.print_modules;
    options.print_symbols = opts.print_symbols;
    options.print_ast_stats = opts.print_ast_stats;
    options.print_qbe = opts.print_qbe;
    options.print_reports = opts.print_reports;
    options.log_verbose = opts.log_verbose;

    u32 num_build = 0;
    for (u32 i=0; i<recipe.numTargets(); i++) {
        c2recipe.Target* target = recipe.getTarget(i);
        const char* target_name = auxPool.idx2str(target.getNameIdx());
        if (opts.target && strcmp(opts.target, target_name) != 0) continue;
        printf("building %s\n", target_name);
        num_build++;

        compiler.build(auxPool, sm, diags, target, &options);
        hasError |= (diags.getNumErrors() != 0);

        if (recipe_id != -1) sm.clear(cast<u32>(recipe_id));
    }

    if (opts.target && num_build == 0)  {
        fprintf(stderr, "No such target in %s\n", constants.recipe_name);
    }

    recipe.free();
    auxPool.free();
    diags.free();
    sm.free();

	return hasError ? -1 : 0;
}


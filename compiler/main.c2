/* Copyright 2022 Bas van den Berg
*/

module c2c_main;

import c2recipe;
import compiler;
import constants;
import diagnostics;
import source_mgr;
import string_pool;
import utils;

import stdlib;
import unistd;
import string local;
import c_errno local;
import stdio local;

type Options struct {
    bool print_ast;
    bool print_lib_ast;
    bool print_modules;
    bool print_symbols;
    const char* target;
    const char* single_file;
    const char* other_dir;
}

func void usage(const char* me) {
    printf("Usage: %s <options> <filename>\n", me);
    printf("Options\n");
    printf("\t-a        print ASTs\n");
    printf("\t-A        print Library ASTs\n");
    printf("\t-d [dir]  go to dir first\n");
    printf("\t-f        only parse single file\n");
    printf("\t-m        print modules\n");
    printf("\t-s        print symbols\n");
    stdlib.exit(-1);
}

func void parse_opts(i32 argc, char** argv, Options* opts) {
    for (i32 i=1; i<argc; i++) {
        const char* arg = argv[i];
        if (arg[0] == '-') {
            switch (arg[1]) {
            case '-':
                // for now ignore all '--' options
                break;
            case 'a':
                opts.print_ast = true;
                break;
            case 'A':
                opts.print_lib_ast = true;
                break;
            case 'd':
                if (i==argc-1) usage(argv[0]);
                i++;
                opts.other_dir = argv[i];
                break;
            case 'f':
                if (i==argc-1) usage(argv[0]);
                i++;
                opts.single_file = argv[i];
                break;
            case 'm':
                opts.print_modules = true;
                break;
            case 's':
                opts.print_symbols = true;
                break;
            default:
                printf("unknown option\n");
                usage(argv[0]);
                break;
            }
        } else {
            if (opts.target) usage(argv[0]);
            opts.target = arg;
        }
    }
}

public func i32 main(i32 argc, char** argv) {
    Options opts = { 0 }

    parse_opts(argc, argv, &opts);

    if (opts.other_dir) {
        if (unistd.chdir(opts.other_dir)) {
            fprintf(stderr, "cannot chdir to %s: %s\n", opts.other_dir, strerror(*errno2()));
            stdlib.exit(-1);
        }
    }

    // note: auxPool is used by recipe, build-file and manifests
    string_pool.Pool* auxPool = string_pool.create(64*1024, 0);

    source_mgr.SourceMgr* sm = source_mgr.create(constants.Max_open_files);
    diagnostics.Diags* diags = diagnostics.create(sm, utils.useColor());

    c2recipe.Recipe* recipe = c2recipe.create(sm, auxPool);

    i32 recipe_id = -1;

    bool hasError = false;

    if (opts.single_file) {
        recipe.addDummyTarget(opts.single_file);
    } else {
        if (!utils.findProjectDir()) {
            fprintf(stderr, "c2c: error: cannot find C2 root dir\n");
            fprintf(stderr, "c2c requires a %s file in the project root\n", constants.recipe_name);
            fprintf(stderr, "Use argument -h for a list of available opts and usage of c2c\n");
            return -1;
        }

        i32 yaml_id = sm.open(constants.recipe_name, 0, false);
        if (yaml_id == -1) return -1;
        if (!recipe.parse(yaml_id)) return -1;

        // TEMP also parse yaml version
        recipe_id = yaml_id;
        //recipe_id = sm.open("c2recipe.yml", 0, false);
        //if (recipe_id == -1) return -1;
        //if (!recipe.parseYaml(recipe_id)) return -1;
    }

    //recipe.dump();

    compiler.Options options = { 0 }
    options.print_ast = opts.print_ast;
    options.print_lib_ast = opts.print_lib_ast;
    options.print_modules = opts.print_modules;
    options.print_symbols = opts.print_symbols;

    u32 num_build = 0;
    for (u32 i=0; i<recipe.numTargets(); i++) {
        c2recipe.Target* target = recipe.getTarget(i);
        if (opts.target && strcmp(opts.target, target.getName()) != 0) continue;
        printf("building %s\n", target.getName());
        num_build++;

        compiler.build(auxPool, sm, diags, target, &options);
        hasError |= (diags.getNumErrors() != 0);

        if (recipe_id != -1) sm.clear(cast<u32>(recipe_id));
    }

    if (opts.target && num_build == 0)  {
        fprintf(stderr, "No such target\n");
    }

    recipe.free();
    auxPool.free();
    diags.free();
    sm.free();

	return hasError ? -1 : 0;
}


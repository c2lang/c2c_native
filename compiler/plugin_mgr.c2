/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module plugin_mgr;

import console;
import file_utils;
import plugin_info;
import string_list;
import string_pool;

import c_errno local;
import constants;
import dlfcn local;
import libc_dirent local;
import stdio;
import stdlib;
import string local;

type Plugin struct {
    u32 name; // in auxPool
    bool is_global;
    bool is_active; // only for non-global plugins
    void* arg; // from load
    void* handle; // from dlopen
    plugin_info.Plugin* functions;
}

public type Mgr struct {
    string_pool.Pool* auxPool;
    bool console_timing;
    bool console_debug;
    bool no_plugins;

    Plugin* plugins;
    u32 plugin_count;
    u32 plugin_max;

    string_list.List paths;
} @(opaque)

public func Mgr* create(string_pool.Pool* auxPool, bool console_timing, bool console_debug, bool no_plugins) {
    Mgr* m = stdlib.calloc(1, sizeof(Mgr));
    m.auxPool = auxPool;
    m.console_timing = console_timing;
    m.console_debug = console_debug;
    m.no_plugins = no_plugins;
    m.paths.init(auxPool);
    return m;
}

public func void Mgr.free(Mgr* m) {
    for (u32 i=m.plugin_count; i!=0; i--) {
        Plugin* p = &m.plugins[i-1];
        console.debug("plugins: unload %s", m.auxPool.idx2str(p.name));
        p.functions.unload(p.arg);
        dlclose(p.handle);
    }

    stdlib.free(m.plugins);
    m.paths.free();
    stdlib.free(m);
}

public func void Mgr.addPath(Mgr* m, u32 path) {
    if (!m.paths.contains_idx(path)) m.paths.add(path);
}

func void Mgr.addPlugin(Mgr* m, Plugin* p) {
    if (m.plugin_count == m.plugin_max) {
        m.plugin_max = m.plugin_max ? m.plugin_max * 2 : 4;
        Plugin* plugins2 = stdlib.malloc(m.plugin_max * sizeof(Plugin));
        if (m.plugin_count) {
            memcpy(plugins2, m.plugins, m.plugin_count * sizeof(Plugin));
            stdlib.free(m.plugins);
        }
        m.plugins = plugins2;
    }

    m.plugins[m.plugin_count] = *p;
    m.plugin_count++;
}

func bool is_plugin(const Dirent* entry) {
    const char* filename = entry.d_name;
    if (entry.d_type != DT_REG) return false;
    if (filename[0] == '.') return false;
    usize len = strlen(filename);
    if (len < 5) return false;
    if (strcmp(&filename[len-3], ".so") != 0) return false;

    return true;
}

public func void Mgr.show(const Mgr* m) {
    console.log("Plugins:");
    for (u32 i=0; i<m.paths.length(); i++) {
        const char* path = m.paths.get(i);
        DIR* dir = opendir(path);
        if (dir == nil) {
            console.warn("cannot read '%s': %s", path, strerror(*errno2()));
            continue;
        }
        Dirent* entry = readdir(dir);
        while (entry != nil) {
            if (is_plugin(entry)) {
                console.log("  %s/%s", path, entry.d_name);
            }
            entry = readdir(dir);
        }

        closedir(dir);
    }
}

func bool Mgr.loadPlugin(Mgr* m, u32 name, u32 options, bool is_global) {
    if (m.no_plugins) return true;

    for (u32 i=0; i<m.plugin_count; i++) {
        Plugin* p = &m.plugins[i];
        if (p.name == name) {
            if (!is_global) p.is_active = true;
            // ignore duplicates between build/recipe file. Keep options from build-file
            return true;
        }
    }

    const char* name_str = m.auxPool.idx2str(name);

    char[128] filename;
    stdio.sprintf(filename, "lib%s.so", name_str);

    char[constants.Max_path] fullname; // TODO use string_buffer?

    if (!m.find_file(fullname, filename)) {
        // TODO pass SrcLoc? (also need SM then)
        console.error("cannot find plugin %s", name_str);
        return false;
    }

    Plugin p = {}
    p.name = name;
    p.is_global = is_global;
    p.is_active = true;
    p.handle = dlopen(fullname, RTLD_NOW | RTLD_LOCAL);
    if (p.handle == nil) {
        console.error("cannot load plugin: %s", dlerror());
        return false;
    }

    void* handle_symbol = dlsym(p.handle, "plugin_main_handle");
    if (!handle_symbol) {
        console.error("invalid plugin %s: %s", fullname, dlerror());
        dlclose(p.handle);
        return false;
    }
    p.functions = handle_symbol;
    console.debug("plugins: loading %s", fullname);
    p.arg = p.functions.load(m.auxPool.idx2str(options), m.console_timing, m.console_debug);
    if (!p.arg) {
        dlclose(p.handle);
        return false;
    }

    m.addPlugin(&p);

    return true;
}

public func bool Mgr.loadGlobal(Mgr* m, u32 name, u32 options) {
    return m.loadPlugin(name, options, true);
}

public func bool Mgr.loadLocal(Mgr* m, u32 name, u32 options) {
    return m.loadPlugin(name, options, false);
}


func bool Mgr.find_file(Mgr* m, char* fullname, const char* filename) {
    for (u32 i=0; i<m.paths.length(); i++) {
        const char* path = m.paths.get(i);
        stdio.sprintf(fullname, "%s/%s", path, filename);
        if (file_utils.exists(fullname)) return true;
    }
    return false;
}

public func void Mgr.beginTarget(Mgr* m, plugin_info.Info* info) {
    for (u32 i=0; i<m.plugin_count; i++) {
        Plugin* p = &m.plugins[i];
        if (p.is_active) p.functions.init(p.arg, info);
    }
}

public func void Mgr.endTarget(Mgr* m) {
    for (u32 i=0; i<m.plugin_count; i++) {
        Plugin* p = &m.plugins[i];
        p.is_active = p.is_global;
    }
}

public func void Mgr.postParse(Mgr* m) {
    for (u32 i=0; i<m.plugin_count; i++) {
        Plugin* p = &m.plugins[i];
        if (p.is_active && p.functions.post) p.functions.post(p.arg);
    }
}


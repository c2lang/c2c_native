module component;

import ast;
import string_buffer;
import stdlib local;
import string;

import stdio local; // TEMP
/*
    Represents a library or the main-component

    Used to:
    - create + store Modules
*/
public type Component struct {
    ast.Module** mods;
    u32 num_mods;
    u32 max_mods;
} @(opaque)

public func Component* create() {
    Component* m = calloc(1, sizeof(Component));
    m.resize(4);
    return m;
}

public func void Component.free(Component* m) {
    for (u32 i=0; i<m.num_mods; i++) {
        m.mods[i].free();
    }
    free(cast<void*>(m.mods));
    free(m);
}

public type ModuleVisitor func void (void* arg, ast.Module* m);

public func void Component.visitModules(const Component* c, ModuleVisitor visitor, void* arg) {
    for (u32 i=0; i<c.num_mods; i++) {
        visitor(arg, c.mods[i]);
    }
}

public func void Component.visitImports(const Component* c, ast.ImportVisitor visitor, void* arg) {
    for (u32 i=0; i<c.num_mods; i++) {
        c.mods[i].visitImports(visitor, arg);
    }
}

public func ast.Module* Component.getModule(const Component* c, u32 idx) {
    return c.mods[idx];
}

public func ast.Module** Component.getModules(Component* c) {
    return c.mods;
}

public func u32 Component.getNumModules(const Component* c) {
    return c.num_mods;
}

func void Component.resize(Component* m, u32 cap) {
    m.max_mods = cap;
    void* buf = malloc(m.max_mods * sizeof(ast.Module*));
    if (m.mods) {
        void* old = cast<void*>(m.mods);
        string.memcpy(buf, old, m.num_mods * sizeof(ast.Module*));
        free(old);
    }
    m.mods = buf;
}

public func ast.Module* Component.getOrAddModule(Component* c, const char* modname) {
    for (u32 i=0; i<c.num_mods; i++) {
        ast.Module* m = c.mods[i];
        // Note: can do a pointer compare
        if (m.getName() == modname) return m;
    }

    ast.Module* m = ast.Module.create(modname);

    if (c.num_mods == c.max_mods) c.resize(c.max_mods * 2);

    c.mods[c.num_mods] = m;
    c.num_mods++;
    return m;
}

// TEMP, this should be in a big list
public func ast.Module* Component.findModule(const Component* c, const char* name) {
    for (u32 i=0; i<c.num_mods; i++) {
        // Note: we can search by pointer compares
        if (c.mods[i].getName() == name) return c.mods[i];
    }
    return nil;
}


public func void Component.info(const Component* c) {
    string_buffer.Buf* out = string_buffer.create(64*1024);
    out.print("Component\n");
    for (u32 i=0; i<c.num_mods; i++) {
        c.mods[i].info(out);
    }
    stdio.printf("%s\n", out.data());
    out.free();
}

public func void Component.print(const Component* c) {
    string_buffer.Buf* out = string_buffer.create(128*1024);
    out.print("Component\n");
    for (u32 i=0; i<c.num_mods; i++) {
        c.mods[i].print(out);
    }
    stdio.puts(out.data());
    out.free();
}


/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast_visitor;

import ast local;

import stdlib;

public type OnRef func void (void* arg, const Ref* ref);

public type Visitor struct {
    void* arg;
    OnRef on_ref;
} @(opaque)

public func Visitor* create(void* arg, OnRef on_ref) {
    Visitor* v = stdlib.calloc(1, sizeof(Visitor));
    v.arg = arg;
    v.on_ref = on_ref;
    return v;
}

public func void Visitor.free(Visitor* v) {
    stdlib.free(v);
}

public func void Visitor.handle(Visitor* v, const Decl* d) {
    switch (d.getKind()) {
    case Function:
        v.handleFunction(cast<FunctionDecl*>(d));
        break;
    case Import:
        // TODO
        break;
    case StructType:
        // TODO
        break;
    case EnumType:
        // TODO
        break;
    case EnumConstant:
        // TODO
        break;
    case FunctionType:
        // TODO
        break;
    case AliasType:
        // TODO
        break;
    case Var:
        v.handleVarDecl(cast<VarDecl*>(d));
        break;
    case StaticAssert:
        // TODO
        break;
    case ArrayValue:
        // TODO
        break;
    }
}

func void Visitor.handleFunction(Visitor* v, const FunctionDecl* d) {
    if (d.isTemplate()) return; // TODO skip template functions for now

    // return type
    v.handleType(d.getRType());

    // struct prefix
    if (d.hasPrefix()) {
        // TODO Structname for StructFunction
    }

    // args
    u32 num_params = d.getNumParams();
    VarDecl** args = d.getParams();
    for (u32 i=0; i<num_params; i++) v.handleVarDecl(args[i]);

    // body
    const CompoundStmt* body = d.getBody();
    if (body) {
        v.handleCompoundStmt(body);
    }
}

func void Visitor.handleVarDecl(Visitor* v, const VarDecl* d) {
    const TypeRef* r = d.getTypeRef();
    if (r.isUser()) {
        const Ref* prefix = r.getPrefix();
        if (prefix) v.on_ref(v.arg, prefix);

        const Ref* user = r.getUser();
        v.on_ref(v.arg, user);
    }

    u32 num_arrays = r.getNumArrays();
    for (u32 i=0; i<num_arrays; i++) {
        Expr* e = r.getArray(i);
        if (e) v.handleExpr(e); // could be foo[]
    }

    Expr* init_expr = d.getInit();
    if (init_expr) v.handleExpr(init_expr);
}

func void Visitor.handleType(Visitor* v, QualType qt) {
    // TODO use TypeRef or QualType?
}

func void Visitor.handleStmt(Visitor* v, const Stmt* s) {
    switch (s.getKind()) {
    case Return:
        const ReturnStmt* r = cast<ReturnStmt*>(s);
        const Expr* e = r.getValue();
        if (e) v.handleExpr(e);
        break;
    case Expr:
        v.handleExpr(cast<Expr*>(s));
        break;
    case If:
        const IfStmt* i = cast<IfStmt*>(s);
        v.handleStmt(i.getCond());
        v.handleStmt(i.getThen());
        const Stmt* e = i.getElse();
        if (e) v.handleStmt(e);
        break;
    case While:
        const WhileStmt* w = cast<WhileStmt*>(s);
        v.handleStmt(w.getCond());
        v.handleStmt(w.getBody());
        break;
    case Do:
        const DoStmt* d = cast<DoStmt*>(s);
        v.handleStmt(d.getCond());
        v.handleStmt(d.getBody());
        break;
    case For:
        const ForStmt* f = cast<ForStmt*>(s);
        Stmt* in = f.getInit();
        if (in) v.handleStmt(in);
        Expr* cond = f.getCond();
        if (cond) v.handleExpr(cond);
        Expr* incr = f.getIncr();
        if (incr) v.handleExpr(incr);
        Stmt* body = f.getBody();
        if (body) v.handleStmt(body);
        break;
    case Switch:
        const SwitchStmt* sw = cast<SwitchStmt*>(s);
        v.handleStmt(sw.getCond());
        u32 numcases = sw.getNumCases();
        Stmt** cases = sw.getCases();
        for (u32 i=0; i<numcases; i++) v.handleStmt(cases[i]);
        break;
    case Case:
        const CaseStmt* c = cast<CaseStmt*>(s);
        v.handleExpr(c.getCond());
        u32 numstmts = c.getNumStmts();
        Stmt** stmts = c.getStmts();
        for (u32 i=0; i<numstmts; i++) v.handleStmt(stmts[i]);
        break;
    case Default:
        const DefaultStmt* d = cast<DefaultStmt*>(s);
        u32 numstmts = d.getNumStmts();
        Stmt** stmts = d.getStmts();
        for (u32 i=0; i<numstmts; i++) v.handleStmt(stmts[i]);
        break;
    case Break:
        break;
    case Continue:
        break;
    case Fallthrough:
        break;
    case Label:
        break;
    case Goto:
        // TODO need dest in GotoStmt
        break;
    case Compound:
        v.handleCompoundStmt(cast<CompoundStmt*>(s));
        break;
    case Decl:
        DeclStmt* d = cast<DeclStmt*>(s);
        v.handleVarDecl(d.getDecl());
        break;
    case Assert:
        AssertStmt* a = cast<AssertStmt*>(s);
        v.handleExpr(a.getInner());
        break;
    }
}

func void Visitor.handleCompoundStmt(Visitor* v, const CompoundStmt* s) {
    u32 count = s.getCount();
    Stmt** stmts = s.getStmts();
    for (u32 i=0; i<count; i++) v.handleStmt(stmts[i]);
}


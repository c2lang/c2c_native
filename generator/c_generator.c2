module c_generator;

import ast local;
import component;
import string_buffer;
import ctv_analyser;
import file_utils;
import linked_list;

import string;
import stdlib;
import stdio local;

type Fragment struct {
    string_buffer.Buf* buf;
    linked_list.Element list;
}

func Fragment* Fragment.create() {
    Fragment* f = stdlib.malloc(sizeof(Fragment));
    f.buf = string_buffer.create(128, false, 3);
    return f;
}

func void Fragment.clear(Fragment* f) {
    f.buf.clear();
}

func void Fragment.free(Fragment* f) {
    f.buf.free();
    stdlib.free(f);
}


type Generator struct {
    string_buffer.Buf* out;
    const char* target;
    const char* output_dir;
    bool cur_external;  // whether current component is external

    Decl* mainFunc;
    u32 stdargName;

    const char* mod_name; // set per module
    Module* mod;

    // list of fragments
    linked_list.Element free_list;
    linked_list.Element used_list;
}


const char[] Dir = "cgen";
const char[] Filename = "main.c";

func Fragment* Generator.getFragment(Generator* gen) {
    if (gen.free_list.isEmpty()) {
        return Fragment.create();
    }

    linked_list.Element* e = gen.free_list.popFront();
    Fragment* f = to_container(Fragment, list, e);
    f.clear();
    return f;
}

func void Generator.addFragment(Generator* gen, Fragment* f) {
    gen.used_list.addTail(&f.list);
}

func void Generator.freeFragment(Generator* gen, Fragment* f) {
    gen.free_list.addTail(&f.list);
}


func void Generator.emitCtv(Generator* gen, string_buffer.Buf* out, const Expr* e) {
    ctv_analyser.Value val = ctv_analyser.get_value(e);
    if (val.is_signed) out.print("%ld", val.svalue);
    else out.print("%lu", val.uvalue);
}

func void Generator.emitCName(Generator* gen, string_buffer.Buf* out, const Decl* d) {
    gen.emitCNameMod(out, d, gen.mod);
}

func void Generator.emitCNameMod(Generator* gen, string_buffer.Buf* out, const Decl* d, Module* mod) {
    if (d.isExternal()) {
        const char* cname = d.getCName();
        if (cname) {
            out.add(cname);
        } else {
            out.add(d.getName());
        }
        return;
    }
    out.add(mod.getName());
    out.add1('_');
    if (d.getKind() == DeclKind.Function) {
        FunctionDecl* fd = cast<FunctionDecl*>(d);
        Ref* prefix = fd.getPrefix();
        if (prefix) {
            out.add(ast.idx2name(prefix.name_idx));
            out.add1('_');
        }
    }
    if (d.getKind() == DeclKind.EnumConstant) {
        QualType qt = d.getType();
        EnumType* et = cast<EnumType*>(qt.getType());
        out.add(et.getName());
        out.add1('_');
    }
    out.add(d.getName());
}

func void Generator.emitDeclName(Generator* gen, string_buffer.Buf* out, const Decl* d) {
    if (d.getKind() == DeclKind.Var) {
        VarDecl* vd = cast<VarDecl*>(d);
        if (!vd.isGlobal()) {
            out.add(d.getName());
            return;
        }
    }
    gen.emitCNameMod(out, d, d.getModule());
}

/*
func void Generator.emitCtv(Generator* gen, string_buffer.Buf* out, const Expr* e) {
    ctv_analyser.Value val = ctv_analyser.get_value(e);
    if (val.is_signed) out.print("%ld", val.svalue);
    else out.print("%lu", val.uvalue);
}
*/

func void Generator.emitEnum(Generator* gen, string_buffer.Buf* out, Decl* d) {
    EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);
    out.add("typedef enum {\n");
    u32 num_constants = etd.getNumConstants();
    EnumConstantDecl** constants = etd.getConstants();
    for (u32 i=0; i<num_constants; i++) {
        EnumConstantDecl* ecd = constants[i];
        out.indent(1);
        out.add(gen.mod_name);
        out.add1('_');
        out.add(d.getName());
        out.add1('_');
        out.add(ecd.asDecl().getName());
        Expr* ie = ecd.getInit();
        ecd.asDecl().setGenerated();
        if (ie) {
            out.add(" = ");
            gen.emitExpr(out, ie);
        }
        out.add(",\n");
    }
    // TODO add max to ensure size is ok

    out.add("} __attribute__((packed)) ");
    gen.emitCName(out, d);
    out.add(";\n\n");
}

const char*[] builtinType_cnames = {
    "char",
    "int8_t",
    "int16_t",
    "int32_t",
    "int64_t",
    "uint8_t",
    "uint16_t",
    "uint32_t",
    "uint64_t",
    "float",
    "double",
    "ssize_t",
    "size_t",
    "bool",
    "void",
}

static_assert(elemsof(BuiltinKind), elemsof(builtinType_cnames));
func void Generator.emitTypePre(Generator* gen, string_buffer.Buf* out, QualType qt) {
    Decl* decl = nil;

    if (qt.isConst()) out.add("const ");

    switch (qt.getKind()) {
    case Builtin:
        BuiltinType* bt = cast<BuiltinType*>(qt.getType());
        out.add(builtinType_cnames[bt.getKind()]);
        return;
    case Pointer:
        PointerType* pt = cast<PointerType*>(qt.getType());
        gen.emitTypePre(out, pt.getInner());
        out.add1('*');
        return;
    case Array:
        ArrayType* at = cast<ArrayType*>(qt.getType());
        gen.emitTypePre(out, at.getElemType());
        // rest is done in emitTypePost
        return;
    case Struct:
        StructType* st = cast<StructType*>(qt.getType());
        StructTypeDecl* std = st.getDecl();
        if (std.hasAttrNoTypeDef()) {
            out.add(std.isStruct() ? "struct " : "union ");
        }

        decl = cast<Decl*>(st.getDecl());
        break;
    case Enum:
        EnumType* et = cast<EnumType*>(qt.getType());
        decl = cast<Decl*>(et.getDecl());
        break;
    case Function:
        FunctionType* et = cast<FunctionType*>(qt.getType());
        decl = cast<Decl*>(et.getDecl());
        break;
    case Alias:
        AliasType* at = cast<AliasType*>(qt.getType());
        decl = cast<Decl*>(at.getDecl());
        break;
    case Module:
        assert(0);
        return;
    }

    gen.emitCNameMod(out, decl, decl.getModule());
}

func void Generator.emitTypePost(Generator* gen, string_buffer.Buf* out, QualType qt) {
    if (qt.getKind() != TypeKind.Array) return;
    ArrayType* at = cast<ArrayType*>(qt.getType());

    out.add1('[');
    if (at.hasSize()) out.print("%u", at.getSize());
    out.add1(']');
    gen.emitTypePost(out, at.getElemType());
}

func void Generator.genDeclIfNeeded(Generator* gen, Decl* d) {
    if (d.isGenerated()) return;

    if (d.getKind() == DeclKind.Var) {
        VarDecl* vd = cast<VarDecl*>(d);
        if (!vd.isGlobal()) return;
    }

    gen.emitGlobalDecl(d);
}

func void Generator.genTypeIfNeeded(Generator* gen, QualType qt, bool full) {
    Decl* d = nil;

    switch (qt.getKind()) {
    case Builtin:
        return;
    case Pointer:
        PointerType* pt = cast<PointerType*>(qt.getType());
        gen.genTypeIfNeeded(pt.getInner(), false);
        return;
    case Array:
        ArrayType* at = cast<ArrayType*>(qt.getType());
        gen.genTypeIfNeeded(at.getElemType(), true);
        return;
    case Struct:
        StructType* st = cast<StructType*>(qt.getType());
        if (!full) return;
        d = cast<Decl*>(st.getDecl());
        break;
    case Enum:
        EnumType* et = cast<EnumType*>(qt.getType());
        d = cast<Decl*>(et.getDecl());
        break;
    case Function:
        FunctionType* et = cast<FunctionType*>(qt.getType());
        d = cast<Decl*>(et.getDecl());
        break;
    case Alias:
        AliasType* at = cast<AliasType*>(qt.getType());
        d = cast<Decl*>(at.getDecl());
        break;
    case Module:
        assert(0);
        return;
    }

    if (!d.isGenerated()) gen.emitGlobalDecl(d);
}

func void Generator.emitStructMember(Generator* gen, string_buffer.Buf* out, Decl* d, u32 indent) {
    if (d.getKind() == DeclKind.Var) {
        // check if full/pointer dep
        QualType qt = d.getType();
        // TODO canon for AliasType
        gen.genTypeIfNeeded(d.getType(), true);

        out.indent(indent);
        gen.emitTypePre(out, d.getType());
        out.add1(' ');
        if (d.getNameIdx()) out.add(d.getName());
        gen.emitTypePost(out, d.getType());

        VarDecl* vd = cast<VarDecl*>(d);
        Expr* bitfield = vd.getBitfield();
        if (bitfield) {
            out.add(" : ");
            // C does not allow using constants here, so generate CTV Value
            gen.emitCtv(out, bitfield);
        }
        out.add(";\n");
    } else {
        assert(d.getKind() == DeclKind.StructType);
        gen.emitStruct(out, d, indent);
    }
}

func void Generator.emitStruct(Generator* gen, string_buffer.Buf* out, Decl* d, u32 indent) {
    StructTypeDecl* std = cast<StructTypeDecl*>(d);
    if (std.isGlobal()) {
        if (std.isStruct()) out.add("struct ");
        else out.add("union ");
        gen.emitCName(out, d);
        if (!std.hasAttrNoTypeDef()) out.add1('_'); // either generate 'struct stat_' or 'struct stat'
        out.add(" {\n");
    } else {
        out.indent(indent);
        if (std.isStruct()) out.add("struct");
        else out.add("union");
        out.add(" {\n");
    }

    u32 num_members = std.getNumMembers();
    Decl** members = std.getMembers();
    for (u32 i=0; i<num_members; i++) {
        gen.emitStructMember(out, members[i], indent+1);
    }

    if (std.isGlobal()) {
        out.add("};\n\n");
    } else {
        out.indent(indent);
        out.add1('}');
        if (d.getNameIdx()) {
            out.add1(' ');
            out.add(d.getName());
        }
        out.add(";\n");
    }
}

func void Generator.emitFunctionType(Generator* gen, string_buffer.Buf* out, Decl* d) {
    FunctionTypeDecl* ftd = cast<FunctionTypeDecl*>(d);
    FunctionDecl* fd = ftd.getDecl();
    fd.asDecl().setGenerated();

    out.add("typedef ");
    gen.emitTypePre(out, fd.getRType());
    out.add(" (*");
    gen.emitCName(out, d);
    out.add(")(");
    u32 num_params = fd.getNumParams();
    VarDecl** params = fd.getParams();
    for (u32 i=0; i<num_params; i++) {
        Decl* arg = cast<Decl*>(params[i]);
        if (i != 0) out.add(", ");
        gen.emitTypePre(out, arg.getType());
        // dont emit names (not needed)
    }
    if (fd.isVariadic()) {
        if (num_params) out.add(", ");
        out.add("...");
    }
    out.add(");\n\n");
}

func void Generator.emitAliasType(Generator* gen, string_buffer.Buf* out, Decl* d) {
    AliasTypeDecl* atd = cast<AliasTypeDecl*>(d);
    // For now, just generate canonicalType as RHS
    QualType qt = d.getType();
    qt = qt.getCanonicalType();
    out.add("typedef ");
    gen.emitTypePre(out, qt);
    gen.emitTypePost(out, qt);
    out.add1(' ');
    gen.emitCName(out, d);
    out.add(";\n\n");
}

func void Generator.emitGlobalVarDecl(Generator* gen, string_buffer.Buf* out, Decl* d) {
    VarDecl* vd = cast<VarDecl*>(d);

    out.add("static ");

    gen.emitTypePre(out, d.getType());
    out.add1(' ');
    gen.emitCName(out, d);
    gen.emitTypePost(out, d.getType());
    Expr* ie = vd.getInit();
    if (ie) {
        out.add(" = ");
        gen.emitExpr(out, ie);
    }
    out.add(";\n\n");
}

func void Generator.on_forward_structs(void* arg, Decl* d) {
    Generator* gen = arg;
    string_buffer.Buf* out = gen.out;

    if (d.getKind() != DeclKind.StructType) return;
    if (gen.cur_external && !d.isUsed()) return;

    StructTypeDecl* std = cast<StructTypeDecl*>(d);
    if (std.hasAttrNoTypeDef()) return;

    out.add("typedef ");
    if (std.isStruct()) out.add("struct");
    else out.add("union");
    out.add1(' ');
    gen.emitCName(out, d);
    out.add("_ ");
    gen.emitCName(out, d);
    out.add(";\n");
}

func void Generator.emitGlobalDecl(Generator* gen, Decl* d) {
    if (d.isGenerated()) return;

    // dont generate unused external decls
    if (gen.cur_external && !d.isUsed()) return;

    // TODO refactor getFragment to here, need EnumConstant case done

    switch (d.getKind()) {
    case Function:
        gen.gen_func_proto(cast<FunctionDecl*>(d));
        gen.out.add(";\n");
        break;
    case Import:
        assert(0); // cannot happen
        return;
    case StructType:
        Fragment* f = gen.getFragment();
        gen.emitStruct(f.buf, d, 0);
        gen.addFragment(f);
        break;
    case EnumType:
        Fragment* f = gen.getFragment();
        gen.emitEnum(f.buf, d);
        gen.addFragment(f);
        break;
    case EnumConstant:
        // Can happen, we need to generate the containing enum then
        // TODO
        printf("TODO gen enum %d\n", d.isGenerated());
/*
        // Q: move this part to enum_constant_decl.c2? or ast_utils?
        QualType qt = d.getType();
        EnumType* et = qt.getEnumTypeOrNil();
        EnumTypeDecl* etd = et.getDecl();
*/
        break;
    case FunctionType:
        Fragment* f = gen.getFragment();
        gen.emitFunctionType(f.buf, d);
        gen.addFragment(f);
        break;
    case AliasType:
        Fragment* f = gen.getFragment();
        gen.emitAliasType(f.buf, d);
        gen.addFragment(f);
        break;
    case Var:
        Fragment* f = gen.getFragment();
        gen.emitGlobalVarDecl(f.buf, d);
        gen.addFragment(f);
        break;
    case StaticAssert:
        assert(0); // cannot happen
        break;
    }

    d.setGenerated();

    while (!gen.used_list.isEmpty()) {
        linked_list.Element* e = gen.used_list.popFront();
        Fragment* f = to_container(Fragment, list, e);
        gen.out.add2(f.buf.data(), f.buf.size());
        gen.freeFragment(f);
    }
}

func void Generator.on_decl(void* arg, Decl* d) {
    Generator* gen = arg;
    gen.emitGlobalDecl(d);
}

func void Generator.on_vardecl(void* arg, VarDecl* vd) {
    Generator* gen = arg;
    gen.emitGlobalDecl(cast<Decl*>(vd));
}

func void Generator.on_ast_types(void* arg, AST* a) {
    Generator* gen = arg;
    a.visitTypeDecls(Generator.on_decl, arg);
}

func void Generator.gen_func_proto(Generator* gen, FunctionDecl* fd) {
    string_buffer.Buf* out = gen.out;
    Decl* d = cast<Decl*>(fd);

    if (d == gen.mainFunc) {
        out.add("int32_t main");
    } else {
        if (!gen.cur_external && !d.isExported()) out.add("static ");
        gen.emitTypePre(out, fd.getRType());
        out.add1(' ');
        gen.emitCName(out, d);
    }
    out.add1('(');
    u32 num_params = fd.getNumParams();
    VarDecl** params = fd.getParams();
    for (u32 i=0; i<num_params; i++) {
        Decl* argx = cast<Decl*>(params[i]);
        if (i != 0) out.add(", ");
        gen.emitTypePre(out, argx.getType());
        out.add1(' ');
        const char* name = argx.getName();
        if (name) out.add(name);
        else out.print("_arg%u", i);
    }
    if (fd.isVariadic()) {
        if (num_params) out.add(", ");
        out.add("...");
    } else {
        if (num_params == 0) out.add("void");
    }
    out.add1(')');
}


func void Generator.gen_func_forward_decl(void* arg, FunctionDecl* fd) {
    Generator* gen = arg;
    gen.emitGlobalDecl(cast<Decl*>(fd));
}

func void Generator.gen_func_protos(void* arg, AST* a) {
    Generator* gen = arg;
    a.visitFunctions(Generator.gen_func_forward_decl, arg);
}

func void Generator.gen_full_func(void* arg, FunctionDecl* fd) {
    Generator* gen = arg;
    string_buffer.Buf* out = gen.out;

    gen.gen_func_proto(fd);
    out.add1('\n');
    // TODO always emit indent/newline before Compound? (can have 'if (x) {' on single line)
    gen.emitStmt(cast<ast.Stmt*>(fd.getBody()), 0, true);
    out.add1('\n');
}

func void Generator.gen_full_funcs(void* arg, AST* a) {
    Generator* gen = arg;
    a.visitFunctions(Generator.gen_full_func, arg);
}

func void Generator.on_ast_vars(void* arg, AST* a) {
    Generator* gen = arg;
    a.visitVarDecls(Generator.on_vardecl, arg);
}

func void Generator.on_ast_structs(void* arg, AST* a) {
    Generator* gen = arg;
    a.visitTypeDecls(Generator.on_forward_structs, arg);
    gen.out.add1('\n');
}

func void Generator.decl_mark_generated(void* /*arg*/, Decl* d) {
    d.setGenerated();
}

func void Generator.ast_mark_generated(void* arg, AST* a) {
    a.visitDecls(Generator.decl_mark_generated, arg);
}

func void Generator.on_module(void* arg, Module* m) {
    if (m.isUsed()) {
        Generator* gen = arg;
        string_buffer.Buf* out = gen.out;
        out.print("\n// --- module %s ---\n\n", m.getName());
        gen.mod_name = m.getName();
        gen.mod = m;

        // Note: special case for stdarg.h va_list
        if (m.getNameIdx() == gen.stdargName) {
            out.add("// Note: this module is a special case and is custom generated\n\n");
            out.add("#define va_list __builtin_va_list\n");
            out.add("#define va_start __builtin_va_start\n");
            out.add("#define va_end __builtin_va_end\n");
            out.add1('\n');
            out.add("int32_t vdprintf(int32_t __fd, const char* __fmt, va_list __arg);\n");
            out.add("int32_t vsprintf(char* str, const char* format, va_list __ap);\n");
            out.add("int32_t vsnprintf(char* str, uint64_t size, const char* format, va_list __ap);\n");
            out.add1('\n');

            // TODO set all decls to generated
            m.visitASTs(Generator.ast_mark_generated, arg);
            return;
        }

        // generate forward decls of structs
        m.visitASTs(Generator.on_ast_structs, arg);

        m.visitASTs(Generator.on_ast_types, arg);
        m.visitASTs(Generator.gen_func_protos, arg);
        out.add1('\n');
        m.visitASTs(Generator.on_ast_vars, arg);
        if (!gen.cur_external) {
            m.visitASTs(Generator.gen_full_funcs, arg);
        }
    }
}

func void Generator.init(Generator* gen, const char* target, const char* output_dir, Decl* mainFunc, u32 stdargName) {
    string.memset(gen, 0, sizeof(Generator));
    gen.out = string_buffer.create(256*1024, false, 3);
    gen.target = target;
    gen.output_dir = output_dir;
    gen.mainFunc = mainFunc;
    gen.stdargName = stdargName;
    gen.free_list.init();
    gen.used_list.init();
}

func void Generator.free(Generator* gen) {
    while (!gen.free_list.isEmpty()) {
        linked_list.Element* e = gen.free_list.popFront();
        Fragment* f = to_container(Fragment, list, e);
        f.free();
    }
    gen.out.free();
}

func void Generator.write(Generator* gen, const char* output_dir, const char* filename) {
    //printf("%s\n", gen.out.data());

    char[256] fullname;
    sprintf(fullname, "%s/%s", output_dir, filename);

    file_utils.Writer writer;
    bool ok = writer.write(fullname, cast<u8*>(gen.out.data()), gen.out.size());
    // TODO check ok
}

func void Generator.createMakefile(Generator* gen, const char* output_dir) {
    string_buffer.Buf* out = gen.out;
    out.clear();
    out.add("# This makefile is auto-generated, any modifications will be lost\n\n");
    out.add("CC=gcc\n");
    out.add("CFLAGS=-Wall -Wextra -Wno-unused -Wno-switch -Wno-char-subscripts -Wno-zero-length-bounds -Wno-format-overflow -Wno-stringop-overflow\n");
    out.add("CFLAGS+=-pipe -O2 -std=c99 -g -Wno-missing-field-initializers\n");
    out.add1('\n');
    out.print("../%s: main.c\n", gen.target);
    out.print("\t\t$(CC) $(CFLAGS) main.c -o ../%s\n\n", gen.target);

    out.add("symbols:\n");
    out.print("\t\tnm -g -D -C --defined-only ../%s\n\n", gen.target);

    out.add("clean:\n");
    out.print("\t\trm -f ../%s\n\n", gen.target);

    gen.write(output_dir, "Makefile");
}

public func void generate(const char* target,
                          const char* output_dir,
                          Module* c2mod,
                          component.Component** comps,
                          u32 count,
                          Decl* mainFunc,
                          u32 stdargName,
                          bool print)
{
    // TODO put in aux-pool? (lowers stack-size)
    char[256] dir;
    sprintf(dir, "%s/%s", output_dir, Dir);
    i32 err = file_utils.create_directory(dir);
    if (err) {
        fprintf(stderr, "Error creating directory %s: %s\n", dir, string.strerror(err));
        return;
    }

    Generator gen;
    gen.init(target, dir, mainFunc, stdargName);
    string_buffer.Buf* out = gen.out;

    out.add("// --- internally added ---\n");
    out.add("#include <assert.h>\n\n"); // TEMP until we generate own assert (correct line/file)
    out.add("typedef char bool;\n");
    out.add("typedef signed char int8_t;\n");
    out.add("typedef unsigned char uint8_t;\n");
    out.add("typedef signed short int16_t;\n");
    out.add("typedef unsigned short uint16_t;\n");
    out.add("typedef signed int int32_t;\n");
    out.add("typedef unsigned int uint32_t;\n");
    out.add("typedef signed long int64_t;\n");
    out.add("typedef unsigned long uint64_t;\n");
    out.add("typedef long ssize_t;\n");
    out.add("typedef unsigned long size_t;\n");
    out.add("#define true 1\n");
    out.add("#define false 0\n");

    out.add("#define NULL ((void*)0)\n");
    out.add("#define ARRAY_SIZE(x) (sizeof(x)/sizeof(x[0]))\n");
    out.add("#define offsetof(TYPE, MEMBER) ((unsigned long) &((TYPE *)0)->MEMBER)\n");
    out.add("#define to_container(type, member, ptr) ((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))\n");

    gen.cur_external = false;
    Generator.on_module(&gen, c2mod);

    for (u32 i=0; i<count; i++) {
        component.Component* c = comps[i];
        gen.cur_external = c.isExternal();
        c.visitModules(Generator.on_module, &gen);
    }

    if (print) puts(gen.out.data());
    gen.write(dir, Filename);

    gen.createMakefile(dir);

    gen.free();
}


/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c_generator;

import ast local;
import string_buffer;

func void Generator.emitC2Decl(Generator* gen, Decl* d) {
    string_buffer.Buf* out = gen.c2i_file;

    switch (d.getKind()) {
    case Function:
        const FunctionDecl* fd = cast<FunctionDecl*>(d);
        fd.printLiteral(out, false);
        break;
    case Import:
        const ImportDecl* id = cast<ImportDecl*>(d);
        if (id.getDest() == gen.mod) return;
        id.printLiteral(out);
        break;
    case StructType:
        const StructTypeDecl* std = cast<StructTypeDecl*>(d);
        std.printLiteral(out, 0);
        break;
    case EnumType:
        const EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);
        etd.printLiteral(out);
        break;
    case EnumConstant:
        assert(0);
        // TODO
        break;
    case FunctionType:
        const FunctionTypeDecl* ftd = cast<FunctionTypeDecl*>(d);
        ftd.printLiteral(out);
        break;
    case AliasType:
        const AliasTypeDecl* a = cast<AliasTypeDecl*>(d);
        a.printLiteral(out);
        break;
    case Var:
        const VarDecl* v = cast<VarDecl*>(d);
        v.printLiteral(out, 0);
        out.add(";\n\n");
        break;
    }
    out.newline();
}


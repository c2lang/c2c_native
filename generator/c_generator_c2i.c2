/* Copyright 2022-2024 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c_generator;

import ast local;
import string_buffer;

fn void Generator.emitC2Decl(Generator* gen, Decl* d) {
    string_buffer.Buf* out = gen.c2i_file;

    switch (d.getKind()) {
    case Function:
        gen.emitC2FunctionDecl(d, out, false);
        break;
    case Import:
        const ImportDecl* id = cast<ImportDecl*>(d);
        // note: dont use printliteral, since we dont need 'import as'
        out.print("import %s;", d.getName());
        break;
    case StructType:
        gen.emitC2StructTypeDecl(d, out, 0);
        break;
    case EnumType:
        gen.emitC2EnumType(d, out);
        break;
    case EnumConstant:
        assert(0);
        // TODO
        break;
    case FunctionType:
        gen.emitC2FunctionTypeDecl(d, out);
        break;
    case AliasType:
        gen.emitC2AliasTypeDecl(d, out);
        break;
    case Variable:
        gen.emitC2VarDecl(d, out, 0);
        out.add(";\n");
        break;
    }
    out.newline();
}

fn void Generator.emitC2VarDecl(Generator* gen, const Decl* d, string_buffer.Buf* out, u32 indent) {
    VarDecl* v = cast<VarDecl*>(d);

    out.indent(indent);
    gen.emitC2TypeRef(v.getTypeRef(), out);
    out.space();
    if (d.getName()) out.add(d.getName());

    QualType qt = d.getType();
    if (qt.isConst() && v.getInit()) {
        Expr* initExpr = v.getInit();
        out.add(" = ");
        gen.emitC2Expr(initExpr, out);
    }

    if (v.hasAutoAttr()) {
        if (v.hasAttrAutoFile()) out.add(" @(auto_file)");
        if (v.hasAttrAutoLine()) out.add(" @(auto_line)");
    }
    // Note: dont add ';' because it could also be a function argument
}

fn void Generator.emitC2TypeRef(Generator* gen, const TypeRef* ref, string_buffer.Buf* out) {
    // Note: arrays are converted to pointers
    const Decl* d = ref.getUserDecl();
    bool is_external = false;
    if (d) is_external = (d.getModule() != gen.mod);

    ref.printLiteral(out, is_external);
}

fn void Generator.emitC2EnumType(Generator* gen, const Decl* d, string_buffer.Buf* out) {
    EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);

    out.print("type %s enum ", d.getName());
    QualType implType = etd.getImplType();
    implType.print(out);
    out.add(" {\n");

    EnumConstantDecl** constants = etd.getConstants();
    for (u32 i=0; i<etd.getNumConstants(); i++) {
        EnumConstantDecl* ecd = constants[i];
        out.indent(1);
        out.add(ecd.asDecl().getName());
        Expr* initExpr = ecd.getInit();
        if (initExpr) {
            out.add (" = ");
            gen.emitC2Expr(initExpr, out);
        }
        out.add(",\n");
    }
    out.add("}\n");
}

fn void Generator.emitC2FunctionDecl(Generator* gen, const Decl* d, string_buffer.Buf* out, bool as_type) {
    FunctionDecl* fd = cast<FunctionDecl*>(d);

    if (!as_type) out.add("fn ");
    gen.emitC2TypeRef(fd.getReturnTypeRef(), out);
    if (!as_type) {
        out.space();
        const char* prefix = fd.getPrefixName();
        if (prefix) {
            out.add(prefix);
            out.add1('.');
        }
        out.add(d.getName());
    }
    out.lparen();

    VarDecl** params = fd.getParams();
    u32 num_params = fd.getNumParams();
    for (u32 i=0; i<num_params; i++) {
        if (i != 0) out.add(", ");
        gen.emitC2VarDecl(cast<Decl*>(params[i]), out, 0);
    }
    if (fd.isVariadic()) {
        if (num_params) out.add(", ");
        out.add("...");
    }

    out.add(");\n");
}

fn void Generator.emitC2FunctionTypeDecl(Generator* gen, const Decl* d, string_buffer.Buf* out) {
    const FunctionTypeDecl* ftd = cast<FunctionTypeDecl*>(d);
    out.print("type %s fn ", d.getName());
    gen.emitC2FunctionDecl(cast<Decl*>(ftd.getDecl()), out, true);
}

fn void Generator.emitC2AliasTypeDecl(Generator* gen, const Decl* d, string_buffer.Buf* out) {
    AliasTypeDecl* a = cast<AliasTypeDecl*>(d);
    out.print("type %s ", d.getName());
    gen.emitC2TypeRef(a.getTypeRef(), out);
    out.add(";\n");
}

fn void Generator.emitC2StructTypeDecl(Generator* gen, const Decl* d, string_buffer.Buf* out, u32 indent) {
    StructTypeDecl* std = cast<StructTypeDecl*>(d);
    out.indent(indent);
    if (indent == 0) {
        out.add("type ");
        out.add(d.getName());
        if (std.isStruct()) out.add(" struct");
        else out.add(" union");
    } else {
        if (std.isStruct()) out.add("struct");
        else out.add("union");
        if (d.getNameIdx()) out.print(" %s", d.getName());
    }
    if (std.isOpaque()) {
        out.add(" @(opaque) {}\n");
    } else {
        out.add(" {\n");

        Decl** members = std.getMembers();
        for (u32 i=0; i<std.getNumMembers(); i++) {
            const Decl* m = members[i];
            if (m.isStructType()) {
                gen.emitC2StructTypeDecl(m, out, indent+1);
            } else {
                assert(m.isVariable());
                gen.emitC2VarDecl(m, out, indent+1);
                out.add(";\n");
            }
        }

        out.indent(indent);
        out.add("}\n");
    }
}

fn void Generator.emitC2Expr(Generator* gen, const Expr* e, string_buffer.Buf* out) {
    switch (e.getKind()) {
    case IntegerLiteral:
        IntegerLiteral.printLiteral(cast<IntegerLiteral*>(e), out);
        return;
    case FloatLiteral:
        FloatLiteral.printLiteral(cast<FloatLiteral*>(e), out);
        return;
    case BooleanLiteral:
        BooleanLiteral.printLiteral(cast<BooleanLiteral*>(e), out);
        return;
    case CharLiteral:
        CharLiteral.printLiteral(cast<CharLiteral*>(e), out);
        return;
    case StringLiteral:
        StringLiteral.printLiteral(cast<StringLiteral*>(e), out);
        return;
    case Nil:
        out.add("nil");
        return;
    case Identifier:
        // add prefix if external
        const IdentifierExpr* i = cast<IdentifierExpr*>(e);
        Decl* d = i.getDecl();
        if (d.getModule() != gen.mod) {
            out.add(d.getFullName());
        } else {
            out.add(d.getName());
        }
        return;
    case Type:
        break;
    case Call:
        break;
    case InitList:
        break;
    case FieldDesignatedInit:
        break;
    case ArrayDesignatedInit:
        break;
    case BinaryOperator:
        const BinaryOperator* b = cast<BinaryOperator*>(e);
        gen.emitC2Expr(b.getLHS(), out);
        out.print(" %s ", b.getOpcodeStr());
        gen.emitC2Expr(b.getRHS(), out);
        return;
    case UnaryOperator:
        const UnaryOperator* u = cast<UnaryOperator*>(e);
        if (u.isBefore()) {
            out.add(u.getOpcodeStr());
            gen.emitC2Expr(u.getInner(), out);
        } else {
            gen.emitC2Expr(u.getInner(), out);
            out.add(u.getOpcodeStr());
        }
        return;
    case ConditionalOperator:
        break;
    case Builtin:
        gen.emitC2Builtin(e, out);
        return;
    case ArraySubscript:
        break;
    case Member:
        gen.emitC2Member(e, out);
        return;
    case Paren:
        const ParenExpr * p = cast<ParenExpr*>(e);
        out.lparen();
        gen.emitC2Expr(p.getInner(), out);
        out.rparen();
        return;
    case BitOffset:
        break;
    case ExplicitCast:
        break;
    case ImplicitCast:
        const ImplicitCastExpr* c = cast<ImplicitCastExpr*>(e);
        gen.emitC2Expr(c.getInner(), out);
        return;
    }
    e.dump();
    assert(0);
}

fn void Generator.emitC2Member(Generator* gen, const Expr* e, string_buffer.Buf* out) {
    const MemberExpr* m = cast<MemberExpr*>(e);
    const Expr* base = m.getExprBase();
    if (base) {
        gen.emitC2Expr(base, out);
    }
    for (u32 i=0; i<m.getNumRefs(); i++) {
        if (i != 0 || base) out.add1('.');
        Ref r = m.getRef(i);
        if (i == 0 && r.decl.getModule() != gen.mod) {
            out.add(r.decl.getFullName());
        } else {
            out.add(r.decl.getName());
        }
    }
}

fn void Generator.emitC2Builtin(Generator* gen, const Expr* e, string_buffer.Buf* out) {
    const BuiltinExpr* b = cast<BuiltinExpr*>(e);
    Value v = b.getValue();

    switch (b.getKind()) {
    case Sizeof:
        out.add("sizeof(");
        gen.emitC2Expr(b.getInner(), out);
        out.rparen();
        break;
    case Elemsof:
        out.print("%d", v.uvalue);
        return;
    case EnumMin:
        // TODO generate constant?
        break;
    case EnumMax:
        // TODO generate constant?
        break;
    case OffsetOf:
        // TODO
        break;
    case ToContainer:
        // TODO
        break;
    }
    e.dump();
    assert(0);
}


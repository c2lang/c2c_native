/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c_generator;

import ast local;
import c2;
import printf_utils;
import src_loc local;
import string_buffer;

import stdio;
func void Generator.emitExpr(Generator* gen, string_buffer.Buf* out, Expr* e) {
    switch (e.getKind()) {
    case IntegerLiteral:
        IntegerLiteral* i = cast<IntegerLiteral*>(e);
        i.printLiteral(out);
        if (i.isDecimal() && i.getValue() > c2.max_u32) {
            if (i.isSigned()) out.add("l");
            else out.add("lu");
        }
        break;
    case FloatLiteral:
        FloatLiteral* f = cast<FloatLiteral*>(e);
        f.printLiteral(out);
        break;
    case BooleanLiteral:
        BooleanLiteral* b = cast<BooleanLiteral*>(e);
        if (b.getValue()) out.add("true");
        else out.add("false");
        break;
    case CharLiteral:
        CharLiteral* c = cast<CharLiteral*>(e);
        c.printLiteral(out);
        break;
    case StringLiteral:
        StringLiteral* s = cast<StringLiteral*>(e);
        s.printLiteral(out);
        break;
    case Nil:
        out.add("NULL");
        break;
    case Identifier:
        IdentifierExpr* i = cast<IdentifierExpr*>(e);
        Decl* d = i.getDecl();
        gen.genDeclIfNeeded(d);
        gen.emitDeclName(out, d);
        break;
    case Type:
        gen.emitTypePre(out, e.getType());
        gen.emitTypePost(out, e.getType());
        break;
    case Call:
        gen.emitCall(out, e);
        break;
    case InitList:
        InitListExpr* ile = cast<InitListExpr*>(e);
        out.add1('{');
        u32 num_values = ile.getNumValues();
        Expr** values = ile.getValues();
        bool newlines = false;
        if (num_values > 6) newlines = true;
        if (num_values && values[0].isInitList()) {
            newlines = true;
        }
        if (newlines) out.newline();
        else out.space();
        for (u32 i=0; i<num_values; i++) {
            if (newlines) out.indent(1);
            gen.emitExpr(out, values[i]);
            if (i+1 != num_values) out.add1(',');
            if (newlines) out.newline();
            else out.space();
        }
        out.add1('}');
        break;
    case FieldDesignatedInit:
        gen.emitFieldDesigExpr(out, e);
        break;
    case ArrayDesignatedInit:
        gen.emitArrayDesigExpr(out, e);
        break;
    case BinaryOperator:
        gen.emitBinaryOperator(out, e);
        break;
    case UnaryOperator:
        gen.emitUnaryOperator(out, e);
        break;
    case ConditionalOperator:
        ConditionalOperator* c = cast<ConditionalOperator*>(e);
        gen.emitExpr(out, c.getCond());
        out.add(" ? ");
        gen.emitExpr(out, c.getLHS());
        out.add(" : ");
        gen.emitExpr(out, c.getRHS());
        break;
    case Builtin:
        gen.emitBuiltinExpr(out, e);
        break;
    case ArraySubscript:
        ArraySubscriptExpr* a = cast<ArraySubscriptExpr*>(e);
        Expr* index = a.getIndex();
        if (index.isBitOffset()) {
            gen.emitBitOffset(out, a.getBase(), index);
        } else {
            gen.emitExpr(out, a.getBase());
            out.add1('[');
            gen.emitExpr(out, index);
            out.add1(']');
        }
        break;
    case Member:
        gen.emitMemberExpr(out, e);
        break;
    case Paren:
        ParenExpr* p = cast<ParenExpr*>(e);
        out.lparen();
        gen.emitExpr(out, p.getInner());
        out.rparen();
        break;
    case BitOffset:
        // TODO
        break;
    case ExplicitCast:
        ExplicitCastExpr* c = cast<ExplicitCastExpr*>(e);
        out.add("((");
        gen.emitTypePre(out, e.getType());
        out.add(")(");
        gen.emitExpr(out, c.getInner());
        out.add("))");
        break;
    case ImplicitCast:
        ImplicitCastExpr* i = cast<ImplicitCastExpr*>(e);
        gen.emitExpr(out, i.getInner());
        break;
    }
}

func void Generator.emitBitOffset(Generator* gen, string_buffer.Buf* out, Expr* base, Expr* index) {
    // example: a[15:8] -> ((a>>8) & 0xFF)
    BitOffsetExpr* bo = cast<BitOffsetExpr*>(index);
    out.add("((");
    gen.emitExpr(out, base);
    out.add(">>");
    gen.emitExpr(out, bo.getRHS());
    out.add(") & ");
    u64 mask = 1;
    mask <<= bo.getWidth();
    mask--;
    out.print("0x%x", mask);
    out.rparen();
}

func void Generator.emitBinaryOperator(Generator* gen, string_buffer.Buf* out, Expr* e) {
    BinaryOperator* b = cast<BinaryOperator*>(e);
    BinaryOpcode opcode = b.getOpcode();
    bool need_paren = opcode <= BinaryOpcode.LOr;
    if (need_paren) out.lparen();
    gen.emitExpr(out, b.getLHS());
    out.space();
    out.add(b.getOpcodeStr());
    out.space();
    gen.emitExpr(out, b.getRHS());
    if (need_paren) out.rparen();
}

func void Generator.emitUnaryOperator(Generator* gen, string_buffer.Buf* out, Expr* e) {
    UnaryOperator* u = cast<UnaryOperator*>(e);
    if (u.isBefore()) {
        out.add(u.getOpcodeStr());
        gen.emitExpr(out, u.getInner());
    } else {
        gen.emitExpr(out, u.getInner());
        out.add(u.getOpcodeStr());
    }
}

func void emitDotOrArrow(string_buffer.Buf* out, QualType qt) {
    if (qt.isPointer()) out.add("->");
    else out.add1('.');
}

func void Generator.emitMemberExpr(Generator* gen, string_buffer.Buf* out, Expr* e) {
    MemberExpr* m = cast<MemberExpr*>(e);
    bool need_dot = false;
    QualType baseType = { }
    if (m.hasExpr()) {
        Expr* base = m.getExprBase();
        gen.emitExpr(out, base);
        baseType = base.getType();
        need_dot = true;
    }

    // dont switch on final, just generate
    u32 numrefs = m.getNumRefs();
    bool is_local = false;
    for (u32 i=0; i<numrefs; i++) {
        Decl* d = m.getDecl(i);
        switch (d.getKind()) {
        case Function:
            if (need_dot) emitDotOrArrow(out, baseType);
            baseType = d.getType();
            gen.emitCNameMod(out, d, d.getModule());
            break;
        case Import:
            // ignore
            break;
        case StructType:
            // Note: can be substruct here or Type
            if (need_dot) emitDotOrArrow(out, baseType);
            StructTypeDecl* std = cast<StructTypeDecl*>(d);
            // Dont generate anything for Type, will be in prefix
            if (!std.isGlobal()) {
                baseType = d.getType();
                out.add(d.getName());
                need_dot = true;
            }
            break;
        case EnumType:
            // ignore
            gen.genDeclIfNeeded(d);
            break;
        case EnumConstant:
            gen.emitCNameMod(out, d, d.getModule());
            break;
        case FunctionType:
            assert(0);
            break;
        case AliasType:
            gen.emitCNameMod(out, d, d.getModule());
            break;
        case Var:
            if (need_dot) emitDotOrArrow(out, baseType);
            baseType = d.getType();
            if (is_local) {
                out.add(d.getName());
            } else {
                gen.emitDeclName(out, d);
            }
            need_dot = true;
            is_local = true;
            break;
        }
    }
}

func void Generator.emitMemberExprBase (Generator* gen, string_buffer.Buf* out, Expr* e) {
    // Note: used by SF/SSF calls
    MemberExpr* m = cast<MemberExpr*>(e);

    bool need_dot = false;
    QualType baseType = { }
    if (m.hasExpr()) {
        Expr* base = m.getExprBase();
        gen.emitExpr(out, base);
        baseType = base.getType();
        need_dot = true;
    }

    // dont switch on final, just generate
    u32 numrefs = m.getNumRefs();
    numrefs -= 1;   // Skip final arg
    bool is_local = false;
    for (u32 i=0; i<numrefs; i++) {
        Decl* d = m.getDecl(i);
        switch (d.getKind()) {
        case Function:
            if (need_dot) emitDotOrArrow(out, baseType);
            baseType = d.getType();
            gen.emitCNameMod(out, d, d.getModule());
            break;
        case Import:
            // ignore
            break;
        case StructType:
            // Note: always substruct here
            if (need_dot) emitDotOrArrow(out, baseType);
            baseType = d.getType();
            out.add(d.getName());
            need_dot = true;
            break;
        case EnumType:
            // ignore
            gen.genDeclIfNeeded(d);
            break;
        case EnumConstant:
            gen.emitCNameMod(out, d, d.getModule());
            break;
        case FunctionType:
            assert(0);
            break;
        case AliasType:
            gen.emitCNameMod(out, d, d.getModule());
            break;
        case Var:
            if (need_dot) emitDotOrArrow(out, baseType);
            baseType = d.getType();
            if (is_local) {
                out.add(d.getName());
            } else {
                gen.emitDeclName(out, d);
            }
            need_dot = true;
            is_local = true;
            break;
        }
    }
}

func void Generator.emitFieldDesigExpr(Generator* gen, string_buffer.Buf* out, Expr* e) {
    FieldDesignatedInitExpr* fdi = cast<FieldDesignatedInitExpr*>(e);
    out.add1('.');
    out.add(fdi.getFieldName());
    out.add(" = ");
    gen.emitExpr(out, fdi.getInit());
}

func void Generator.emitArrayDesigExpr(Generator* gen, string_buffer.Buf* out, Expr* e) {
    ArrayDesignatedInitExpr* ad = cast<ArrayDesignatedInitExpr*>(e);
    out.add1('[');
    gen.emitExpr(out, ad.getDesignator());
    out.add("] = ");
    gen.emitExpr(out, ad.getInit());
}

type FormatChanger struct {
    const char* format;
    Expr** args;
    u32 idx;
    u32 last_offset;
    string_buffer.Buf* out;
}

const bool[] Size_prefix = {
    false,  //Char
    false,  //Int8
    false,  //Int16
    false,  //Int32
    true,   //Int64
    false,  //UInt8
    false,  //UInt16
    false,  //UInt32
    true,   //UInt64
    false,  //Float32
    true,   //Float64
    true,   //ISize
    true,   //USize
    false,  //Bool
    false,  //Void
}

func void emitNumberFormat(BuiltinKind kind, char letter, string_buffer.Buf* out) {
// TODO depends on arch
#if 0
    if (kind == BuiltinKind.ISize) {
        return;
    }
    if (kind == BuiltinKind.USize) {
        return;
    }
#endif
    if (Size_prefix[kind]) out.add1('l');
    switch (letter) {
    case 'd':
        if (builtinKind2Signed(kind)) out.add1('d');
        else out.add1('u');
        break;
    case 'f':
        out.add1('f');
        break;
    case 'o':
        out.add1('o');
        break;
    case 'x':
        out.add1('x');
        break;
    case 'X':
        out.add1('X');
        break;
    }
}

func bool on_format_specifier(void* context, printf_utils.Specifier specifier, u32 offset, char letter) {
    FormatChanger* fc = context;

    fc.out.add2(fc.format + fc.last_offset, offset - fc.last_offset);

    QualType qt = fc.args[fc.idx].getType();
    qt = qt.getCanonicalType();
    switch (specifier) {
    case Integer:
        if (qt.isEnum()) {
            EnumType* et = qt.getEnumType();
            qt = et.getImplType();
        }
        fallthrough;
    case FloatingPoint:
        BuiltinType* bt = qt.getBuiltinTypeOrNil();
        if (!bt) {
            stdio.printf("FORMAT [%s]\n", fc.format);
            fc.args[fc.idx].dump();
        }
        assert(bt);
        emitNumberFormat(bt.getKind(), letter, fc.out);
        break;
    default:
        fc.out.add1(letter);
        // no need to change
        break;
    }

    fc.last_offset = offset + 1;
    fc.idx++;
    return true;
}

func void Generator.emitCall(Generator* gen, string_buffer.Buf* out, Expr* e) {
    CallExpr* call = cast<CallExpr*>(e);
    bool is_sf = call.isStructFunc();

    if (call.isTemplateCall()) {
        Expr* fn = call.getFunc();
        QualType qt = fn.getType();
        FunctionType* ft = qt.getFunctionTypeOrNil();
        FunctionDecl* template_fd = ft.getDecl();
        u32 idx = call.getTemplateIdx();
        FunctionDecl* instance = gen.mod.getInstance(template_fd, idx);
        assert(instance);

        Decl* d = instance.asDecl();
        if (!d.isGenerated()) {
            gen.emitFunction(instance);
            instance.asDecl().setGenerated();
        }
        gen.emitDeclName(out, d);
        out.lparen();
    } else {
        Expr* fn = call.getFunc();
        if (is_sf || call.isStaticStructFunc()) {
            // Note: fn will be ImplicitCast FunctionToPointerDecay with inner MemberExpr
            assert(fn.getKind() == ExprKind.ImplicitCast);
            ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(fn);
            fn = ic.getInner();
            assert(fn.getKind() == ExprKind.Member);
            MemberExpr* m = cast<MemberExpr*>(fn);
            Decl* d = m.getFullDecl();
            gen.emitCNameMod(out, d, d.getModule());
            out.lparen();
            if (is_sf) {
                QualType baseType = m.getBaseType();
                if (!baseType.isPointer()) out.add1('&');
                gen.emitMemberExprBase(out, fn);
            }
        } else {
            gen.emitExpr(out, fn);
            out.lparen();
        }
    }

    u32 num_args = call.getNumArgs();
    Expr** args = call.getArgs();
    if (call.needFormatChange()) {  // is only set for printf_format functions
        u32 format_idx = call.getPrintfFormat();
        for (u32 i=0; i<num_args; i++) {
            if (i != 0 || is_sf) out.add(", ");
            if (i == format_idx) {
                SrcLoc format_loc;
                Expr* format = args[i];
                assert(format.isImplicitCast());
                ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(format);
                if (!ic.isArrayToPointerDecay()) return;
                format = ic.getInner();
                const char* format_text = printf_utils.get_format(format, &format_loc);
                assert(format_text);

                FormatChanger fc = { format_text, &args[i+1], 0, 0, out }
                out.add1('"');
                printf_utils.parseFormat(format_text, on_format_specifier, &fc);
                out.add(format_text + fc.last_offset);
                out.add1('"');
            } else {
                gen.emitExpr(out, args[i]);
            }
        }
    } else {
        for (u32 i=0; i<num_args; i++) {
            if (i != 0 || is_sf) out.add(", ");
            gen.emitExpr(out, args[i]);
        }
    }
    out.rparen();
}

func void Generator.emitBuiltinExpr(Generator* gen, string_buffer.Buf* out, Expr* e) {
    BuiltinExpr* b = cast<BuiltinExpr*>(e);
    switch (b.getKind()) {
    case Sizeof:
        Value v = b.getValue();
        out.print("%s", v.str());
/*
        out.add("sizeof(");
        gen.emitExpr(out, b.getInner());
        out.rparen();
*/
        break;
    case Elemsof:
        Value v = b.getValue();
        out.print("%s", v.str());
/*
        // Note: ARRAY_SIZE looks nicer, but doesn't work for elemsof(Enum)
        out.add("ARRAY_SIZE(");
        gen.emitExpr(out, b.getInner());
        out.rparen();
*/
        break;
    case EnumMin:
        Value v = b.getValue();
        out.print("%s", v.str());
        break;
    case EnumMax:
        Value v = b.getValue();
        out.print("%s", v.str());
        break;
    case OffsetOf:
        Value v = b.getValue();
        out.print("%s", v.str());
/*
        out.add("offsetof("); // type, member
        gen.emitExpr(out, b.getInner());
        out.add(", ");
        gen.emitExpr(out, b.getOffsetOfMember());
        out.rparen();
*/
        break;
    case ToContainer:
        out.add("to_container("); // type, member, ptr
        gen.emitExpr(out, b.getInner());
        out.add(", ");
        gen.emitExpr(out, b.getToContainerMember());
        out.add(", ");
        gen.emitExpr(out, b.getToContainerPointer());
        out.rparen();
        break;
    }
}

module c_generator;

import ast local;
import component;
import string_buffer;
import ctv_analyser;
import file_utils;
import linked_list;

import string;
import stdlib;
import stdio local;

func void Generator.emitStmt(Generator* gen, Stmt* s, u32 indent, bool newline) {
    string_buffer.Buf* out = gen.out;

    if (newline) out.indent(indent);

    switch (s.getKind()) {
    case Return:
        out.add("return");
        ReturnStmt* r = cast<ReturnStmt*>(s);
        ast.Expr* val = r.getValue();
        if (val) {
            out.add1(' ');
            gen.emitExpr(out, val);
        }
        out.add(";\n");
        break;
    case Expr:
        gen.emitExpr(out, cast<Expr*>(s));
        if (newline) out.add(";\n");
        break;
    case If:
        IfStmt* i = cast<IfStmt*>(s);
        out.add("if (");
        gen.emitStmt(i.getCond(), 0, false);
        out.add(") ");
        Stmt* thenStmt = i.getThen();
        gen.emitStmt(thenStmt, indent, false);
        if (thenStmt.getKind() != StmtKind.Compound) {
            out.add1(';');
        }

        Stmt* elseStmt =  i.getElse();
        if (elseStmt) {
            if (thenStmt.getKind() == StmtKind.Compound) {
                out.add1(' ');
            } else {
                out.add(";\n");
                out.indent(indent);
            }
            out.add("else ");
            gen.emitStmt(elseStmt, indent, false);
        }
        out.add1('\n');
        break;
    case While:
        WhileStmt* w = cast<WhileStmt*>(s);
        out.add("while (");
        gen.emitStmt(w.getCond(), 0, false);
        out.add(") ");
        Stmt* body = w.getBody();
        gen.emitStmt(body, indent, false);
        if (body.getKind() != StmtKind.Compound) {
            out.add1(';');
        }
        out.add1('\n');
        break;
    case Do:
        DoStmt* doStmt = cast<DoStmt*>(s);
        out.add("do ");
        Stmt* body = doStmt.getBody();
        gen.emitStmt(body, indent, false);
        if (body.getKind() == StmtKind.Compound) {
            out.add1(' ');
        } else {
            out.add(";\n");
            out.indent(indent);
        }
        out.add("while (");
        gen.emitStmt(doStmt.getCond(), 0, false);
        out.add(");\n");
        break;
    case For:
        ForStmt* f = cast<ForStmt*>(s);
        out.add("for (");
        Stmt* initStmt = f.getInit();
        if (initStmt) {
            gen.emitStmt(initStmt, 0, false);
        }
        out.add("; ");
        gen.emitExpr(out, f.getCond());
        out.add("; ");
        Expr* incr = f.getIncr();
        if (incr) {
            gen.emitExpr(out, incr);
        }
        out.add(") ");
        Stmt* body = f.getBody();
        gen.emitStmt(body, indent, false);
        if (body.getKind() == StmtKind.Compound) {
        } else {
            out.add1(';');
        }
        out.add1('\n');
        break;
    case Switch:
        SwitchStmt* sw = cast<SwitchStmt*>(s);
        out.add("switch (");
        gen.emitStmt(sw.getCond(), 0, false);
        out.add(") {\n");

        u32 num_cases = sw.getNumCases();
        Stmt** cases = sw.getCases();
        for (u32 i=0; i<num_cases; i++) {
            gen.emitStmt(cases[i], indent, true);
        }

        out.indent(indent);
        out.add("}\n");
        break;
    case Case:
        CaseStmt* c = cast<CaseStmt*>(s);
        out.add("case ");
        gen.emitExpr(out, c.getCond());
        out.add(":\n");
        u32 num_stmts = c.getNumStmts();
        Stmt** stmts = c.getStmts();
        // TODO: if has-decls, emit Compount statement around
        for (u32 i=0; i<num_stmts; i++) {
            gen.emitStmt(stmts[i], indent+1, true);
        }
        break;
    case Default:
        DefaultStmt* d = cast<DefaultStmt*>(s);
        out.add("default:\n");
        u32 num_stmts = d.getNumStmts();
        Stmt** stmts = d.getStmts();
        // TODO: if has-decls, emit Compount statement around
        for (u32 i=0; i<num_stmts; i++) {
            gen.emitStmt(stmts[i], indent+1, true);
        }
        break;
    case Break:
        out.add("break;\n");
        break;
    case Continue:
        out.add("continue;\n");
        break;
    case Fallthrough:
        out.add("// fallthrough\n");
        break;
    case Label:
        LabelStmt* l = cast<LabelStmt*>(s);
        out.add(l.getName());
        out.add(":\n");
        break;
    case Goto:
        GotoStmt* g = cast<GotoStmt*>(s);
        out.add("goto ");
        out.add(g.getName());
        out.add(";\n");
        break;
    case Compound:
        CompoundStmt* c = cast<CompoundStmt*>(s);

        out.add("{\n");

        u32 count = c.getCount();
        Stmt** stmts = c.getStmts();
        for (u32 i=0; i<count; i++) {
            gen.emitStmt(stmts[i], indent+1, true);
        }

        out.indent(indent);
        out.add1('}');
        if (newline) out.add1('\n');
        break;
    case Decl:
        DeclStmt* ds = cast<DeclStmt*>(s);
        VarDecl* vd = ds.getDecl();
        Decl* d = cast<Decl*>(vd);
        gen.emitTypePre(out, d.getType());
        out.add1(' ');
        out.add(d.getName());
        gen.emitTypePost(out, d.getType());
        Expr* ie = vd.getInit();
        if (ie) {
            out.add(" = ");
            gen.emitExpr(out, ie);
        }
        if (newline) out.add(";\n");
        break;
    case Assert:
        AssertStmt* a = cast<AssertStmt*>(s);
        out.add("assert(");
        gen.emitExpr(out, a.getInner());
        out.add(");\n");
        break;
    }
}

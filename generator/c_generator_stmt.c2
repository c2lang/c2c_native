module c_generator;

import ast local;
import component;
import string_buffer;
import ctv_analyser;
import file_utils;
import linked_list;

import string;
import stdlib;
import stdio local;

func void Generator.emitStmt(Generator* gen, Stmt* s, u32 indent) {
    string_buffer.Buf* out = gen.out;

    out.indent(indent);

    switch (s.getKind()) {
    case Return:
        out.add("return");
        ReturnStmt* r = cast<ReturnStmt*>(s);
        ast.Expr* val = r.getValue();
        if (val) {
            out.add1(' ');
            gen.emitExpr(out, val);
        }
        out.add(";\n");
        break;
    case Expr:
        gen.emitExpr(out, cast<Expr*>(s));
        break;
    case If:
        IfStmt* i = cast<IfStmt*>(s);
        out.add("if (");
        // TODO no newline (if indent == 0?)
        gen.emitStmt(i.getCond(), 0);
        out.add(") ");
        gen.emitStmt(i.getThen(), indent+1);
        Stmt* elseStmt =  i.getElse();
        if (elseStmt) {
            out.indent(indent);
            out.add("else ");
            // TODO check if compound stmt
            gen.emitStmt(elseStmt, indent+1);
        }
        break;
    case While:
        break;
    case Do:
        break;
    case For:
        break;
    case Switch:
        break;
    case Case:
        CaseStmt* c = cast<CaseStmt*>(s);
        out.add("case ");
        gen.emitExpr(out, c.getCond());
        out.add(":\n");
        // TODO rest
        break;
    case Default:
        out.add("default;\n");
        break;
    case Break:
        out.add("break;\n");
        break;
    case Continue:
        out.add("continue;\n");
        break;
    case Fallthrough:
        out.add("// fallthrough\n");
        break;
    case Label:
        break;
    case Goto:
        break;
    case Compound:
        CompoundStmt* c = cast<CompoundStmt*>(s);

        out.add("{\n");

        u32 count = c.getCount();
        Stmt** stmts = c.getStmts();
        for (u32 i=0; i<count; i++) {
            gen.emitStmt(stmts[i], indent+1);
        }

        out.indent(indent);
        out.add("}\n");
        break;
    case Decl:
        break;
    case Assert:
        break;
    }
}

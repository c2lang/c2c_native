/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module deps_generator;

import ast local;
import component;
import string_buffer;
import file_utils;
import ast_visitor;

import string;
import stdlib;
import stdio;

type Generator struct {
    const char* curfile;
    bool is_external;  // current component is external

    ast_visitor.Visitor* visitor;

    // TODO use vector
    Decl** deps;
    u32 deps_count;
    u32 deps_capacity;

    string_buffer.Buf* out;
    u32 indent;
}

func void Generator.on_decl(void* arg, const Decl* d, bool global) {
    Generator* gen = arg;

    switch (d.getKind()) {
    case Function:
        FunctionDecl* fd = cast<FunctionDecl*>(d);
        gen.handleTypeRef(fd.getTypeRef());
        break;
    case Import:
        return;
    case StructType:
        StructTypeDecl* s = cast<StructTypeDecl*>(d);
        u32 num_members = s.getNumMembers();
        Decl** members = s.getMembers();
        for (u32 i=0; i<num_members; i++) {
            Generator.on_decl(arg, members[i], false);
        }
        break;
    case EnumType:
        EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);
        EnumConstantDecl** constants = etd.getConstants();
        for (u32 i=0; i<etd.getNumConstants(); i++) {
            Decl* ecd = cast<Decl*>(constants[i]);
            // NOTE: we add the symbol here, since we have the EnumDecl here
            char[64] fullname;
            stdio.sprintf(fullname, "%s.%s", d.getName(), ecd.getName());
            //gen.refs.add_symbol(fullname, &dest);

            Generator.on_decl(arg, ecd, false);
        }
        break;
    case EnumConstant:
        break;
    case FunctionType:
        break;
    case AliasType:
        break;
    case Var:
        const VarDecl* v = cast<VarDecl*>(d);
        gen.handleTypeRef(v.getTypeRef());
        break;
    case StaticAssert:
        return;
    case ArrayValue:
        return;
    }

    gen.visitor.handle(d);
}

func void Generator.handleTypeRef(Generator* gen, const TypeRef* ref) {
    const Ref* prefix = ref.getPrefix();
    if (prefix) gen.handleRef(prefix);

    const Ref* user = ref.getUser();
    if (user) gen.handleRef(user);
}

func void Generator.handleRef(Generator* gen, const Ref* ref) {
    if (!ref.decl) {
        stdio.printf("refs: Decl not set!\n");
        return;
    }

    if (!ast.isGlobal(ref.decl)) return;
    if (ref.decl.getKind() == DeclKind.EnumConstant) return;

    gen.deps_add(ref.decl);
}

func void Generator.on_global_decl(void* arg, Decl* d) {
    Generator* gen = arg;

    if (!d.isUsed() && gen.is_external) return;
    if (d.getKind() == DeclKind.Import) return;

    //stdio.printf("GLOBAL %s\n", d.getFullName());
    gen.out.indent(gen.indent);
    gen.out.print("<atom name='%s' full='%s'>\n", ast.getPrefixedName(d), d.getFullName());

    gen.indent++;
    gen.deps_count = 0;
    Generator.on_decl(arg, d, true);

    for (u32 i=0; i<gen.deps_count; i++) {
        Decl* dep = gen.deps[i];
        // TODO check options (show-private, show-external, etc)
        gen.out.indent(gen.indent);
        gen.out.print("<dep dest='%s' str='1'/>\n", dep.getFullName());
    }

    gen.indent--;

    gen.out.indent(gen.indent);
    gen.out.add("</atom>\n");
}

func void Generator.on_ast(void* arg, AST* a) {
    Generator* gen = arg;
    gen.curfile = a.getFilename();

    gen.out.indent(gen.indent);
    gen.out.print("<group name='%s' full='file:%s' collapsed='1'>\n", gen.curfile, gen.curfile);

    gen.indent++;
    a.visitDecls(Generator.on_global_decl, arg);
    gen.indent--;

    gen.out.indent(gen.indent);
    gen.out.add("</group>\n");
}

func void Generator.on_module(void* arg, Module* m) {
    Generator* gen = arg;

    if (gen.is_external && !m.isUsed()) return;

    gen.out.indent(gen.indent);
    gen.out.print("<group name='%s' full='module:%s' collapsed='1'>\n", m.getName(), m.getName());

    gen.indent++;
    m.visitASTs(Generator.on_ast, arg);
    gen.indent--;

    gen.out.indent(gen.indent);
    gen.out.add("</group>\n");
}

func void Generator.on_ref(void* arg, const Ref* ref) {
    Generator* gen = arg;
    gen.handleRef(ref);
}

func void Generator.deps_resize(Generator* gen, u32 capacity) {
    gen.deps_capacity = capacity;

    Decl** deps = stdlib.malloc(capacity * sizeof(Decl*));
    if (gen.deps_count) {
        string.memcpy(cast<void*>(deps), cast<void*>(gen.deps), gen.deps_count * sizeof(Decl*));
        stdlib.free(cast<void*>(gen.deps));
    }

    gen.deps = deps;
}

func void Generator.deps_add(Generator* gen, Decl* d) {
    // check if already in list
    for (u32 i=0; i<gen.deps_count; i++) {
        if (gen.deps[i] == d) {
            //stdio.printf("   DUP %p %s\n", d, d.getFullName());
            return;
        }
    }

    if (gen.deps_count == gen.deps_capacity) gen.deps_resize(gen.deps_capacity * 2);

    //stdio.printf("  %p %s\n", d, d.getFullName());
    // add
    gen.deps[gen.deps_count] = d;
    gen.deps_count++;
}

public func void generate(const char* title, const char* output_dir, component.Component** c, u32 count) {
    Generator gen = { nil }
    gen.visitor = ast_visitor.create(&gen, Generator.on_ref);
    gen.out = string_buffer.create(1024*1024, false, 2);
    gen.indent = 0;
    gen.deps_resize(64);

    string_buffer.Buf* out = gen.out;

    out.add("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
    out.print("<dsm name='%s'>\n", title);
    gen.indent++;
    out.indent(gen.indent);
    out.add("<model>\n");

    gen.indent++;

    for (u32 i=0; i<count; i++) {
        const component.Component* comp = c[i];
        gen.is_external = comp.isExternal();
        out.indent(gen.indent);
        out.print("<group name='%s' full='component:%s' collapsed='0'>\n", comp.getName(), comp.getName());
        gen.indent++;
        comp.visitModules(Generator.on_module, &gen);
        gen.indent--;
        out.indent(gen.indent);
        out.add("</group>\n");
    }

    gen.indent--;

    out.indent(gen.indent);
    out.add("</model>\n");
    gen.indent--;
    out.add("</dsm>\n");

    char[128] outfile;
    stdio.sprintf(outfile, "%s/%s", output_dir, "deps2.xml");
    file_utils.Writer file;
    file.write(outfile, cast<u8*>(out.data()), out.size());

    gen.out.free();

    gen.visitor.free();

    stdlib.free(cast<void*>(gen.deps));
}


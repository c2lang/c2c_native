/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module qbe_generator;

import ast local;
import component;
import console;
import string_buffer;
import ctv_analyser;
import process_utils;
import file_utils;
import linked_list;

import string;
import stdlib;
import stdio;

const char[] QBE_Dir = "qbe";
const char[] QBE_Filename = "main.qbe";
const char[] LogFile = "build.log";

type Fragment struct {
    string_buffer.Buf* buf;
    linked_list.Element list;
}

func Fragment* Fragment.create() {
    Fragment* f = stdlib.malloc(sizeof(Fragment));
    f.buf = string_buffer.create(512, false, 1);
    //f.list.init();  // not needed
    return f;
}

func void Fragment.clear(Fragment* f) {
    f.buf.clear();
}

func void Fragment.free(Fragment* f) {
    f.buf.free();
    stdlib.free(f);
}


type Generator struct {
    string_buffer.Buf* out;
    const char* target;
    const char* output_dir;
    bool cur_external;  // whether current component is external
    u32 func_idx;   // also body idx
    u32 string_idx; // for string literals
    u32 substruct_idx;  // for unnamed substructs/unions
    Locals locals;
    Fragment* start; // for functions
    Fragment* data; // for strings/data

    // list of fragments
    linked_list.Element free_list;
    linked_list.Element used_list;

}

func Fragment* Generator.getFragment(Generator* gen) {
    if (gen.free_list.isEmpty()) {
        return Fragment.create();
    }

    linked_list.Element* e = gen.free_list.popFront();
    Fragment* f = to_container(Fragment, list, e);
    f.clear();
    return f;
}

func void Generator.addFragment(Generator* gen, Fragment* f) {
    gen.used_list.addTail(&f.list);
}

func void Generator.freeFragment(Generator* gen, Fragment* f) {
    gen.free_list.addTail(&f.list);
}

func void addStructName(string_buffer.Buf* out, Decl* d) {
    assert(d.getName());
    out.add1(':');
    out.add(d.getModuleName());
    out.add1('_');
    out.add(d.getName());
}

func void addGlobalName(string_buffer.Buf* out, Decl* d) {
    assert(d.getName());
    out.add1('$');
    out.add(d.getModuleName());
    out.add1('_');
    out.add(d.getName());
}

func void addType(string_buffer.Buf* out, QualType qt) {
    const StructType* s = qt.getStructTypeOrNil();
    if (s) {
        addStructName(out, cast<Decl*>(s.getDecl()));
    } else {
        if (qt.getAlignment() == 8) out.add1('l');
        else out.add1('w');
    }
}

func u32 Generator.addLocal(Generator* gen, VarDecl* vd) {
    QualType qt = vd.asDecl().getType();
    //param.ptr = p;
    string_buffer.Buf* start = gen.start.buf;

    const StructType* s = qt.getStructTypeOrNil();
    u32 idx;
    if (s) {
        const StructTypeDecl* std = s.getDecl();
        idx = gen.locals.add(vd, std.getSize(), std.getAlignment());
        // TODO add to start
    } else {
        u32 w = qt.getAlignment();
        idx = gen.locals.add(vd, w, w);

        //u32 next_idx = gen.locals.next(vd);
        switch (w) {
        case 1:
            start.print("\t%%.%u =l alloc4 1\n", idx);
            break;
        case 2:
            start.print("\t%%.%u =l alloc4 2\n", idx);
            break;
        case 4:
            start.print("\t%%.%u =l alloc4 4\n", idx);
            break;
        case 8:
            start.print("\t%%.%u =l alloc8 8\n", idx);
            break;
        default:
            assert(0);
            break;
        }
    }
    return idx;
}

func void Generator.addParam(Generator* gen, string_buffer.Buf* out, VarDecl* vd) {
    QualType qt = vd.asDecl().getType();
    //param.ptr = p;
    string_buffer.Buf* start = gen.start.buf;

    const StructType* s = qt.getStructTypeOrNil();
    u32 idx;
    if (s) {
        const StructTypeDecl* std = s.getDecl();
        addStructName(out, cast<Decl*>(std));
        idx = gen.locals.add(vd, std.getSize(), std.getAlignment());
        // TODO add to start
    } else {
        u32 w = qt.getAlignment();
        idx = gen.locals.add(vd, w, w);

        u32 next_idx = gen.locals.next(vd);
        switch (w) {
        case 1:
            out.add1('w');
            start.print("\t%%.%u =l alloc4 1\n", next_idx);
            start.print("\tstoreb %%.%u, %%.%u\n", idx, next_idx);
            break;
        case 2:
            out.add1('w');
            start.print("\t%%.%u =l alloc4 2\n", next_idx);
            start.print("\tstoreh %%.%u, %%.%u\n", idx, next_idx);
            break;
        case 4:
            out.add1('w');
            start.print("\t%%.%u =l alloc4 4\n", next_idx);
            start.print("\tstorew %%.%u, %%.%u\n", idx, next_idx);
            break;
        case 8:
            out.add1('l');
            start.print("\t%%.%u =l alloc8 8\n", next_idx);
            start.print("\tstorel %%.%u, %%.%u\n", idx, next_idx);
            break;
        default:
            assert(0);
            break;
        }
    }
    out.print(" %%.%u", idx);
}

func char align2char(u32 align) {
    if (align == 8) return 'l';
    if (align == 4) return 'w';
    if (align == 2) return 's';
    if (align == 1) return 'b';
    assert(0);
    return '?';
}

func char align2store(u32 align) {
    if (align == 4) return 'w';
    if (align == 2) return 'h';
    if (align == 1) return 'b';
    return 'l';
}

func void Generator.doFunctionBody(Generator* gen, const FunctionDecl* fd, string_buffer.Buf* out) {
    u32 var_idx = fd.getNumParams();
    bool have_ret = false;
    CompoundStmt* body = fd.getBody();
    const u32 num_stmts = body.getCount();
    Stmt** stmts = body.getStmts();
    for (u32 i=0; i<num_stmts; i++) {
        const Stmt* s = stmts[i];
        switch (s.getKind()) {
        case Return:
            const ReturnStmt* r = cast<ReturnStmt*>(s);
            out.add("\tret");
            const Expr* retval = r.getValue();
            if (retval) {
                out.add1(' ');
                gen.doExpr(out, retval);
            }
            out.add1('\n');
            have_ret = true;
            i = num_stmts; // break loop
            break;
        case Expr:
            const Expr* e = cast<Expr*>(s);
            if (e.getKind() == ExprKind.Call) {
                CallExpr* ce = cast<CallExpr*>(e);
                // TODO add implicit args etc
                u32 num_args = ce.getNumArgs();
                Expr** args = ce.getArgs();
                // TEMP very dirty
                // for printf("hello") -> %.5 =w call $printf(l $.Lstring.6)
                const char* name = "$printf";
                // TODO need cname (or check external for now)
                out.print("\t%%.%u = w call %s(", var_idx, name);
                var_idx++;
                for (u32 a=0; a<num_args; a++) {
                    const Expr* arg = args[a];
                    if (a != 0) out.add(", ");
                    out.add("l ");    // TEMP, always 'l' TODO use size of function-decl
                    gen.doExpr(out, arg);
                }
                out.add(")\n");
            }
            break;
        case Decl:
            const DeclStmt* ds = cast<DeclStmt*>(s);
            VarDecl* vd = ds.getDecl();
            // TODO also need size (storeb/storew/etc)
            u32 idx = gen.addLocal(vd);
            const Expr* ie = vd.getInit();
            if (ie) {
                // TEMP only simple ones
                if (ie.getKind() == ExprKind.IntegerLiteral) {
                    IntegerLiteral* il = cast<IntegerLiteral*>(ie);
                    QualType qt = vd.asDecl().getType();
                    out.print("\tstore%c ", align2store(qt.getAlignment()));
                    il.printDecimal(out);
                    out.print(", %%.%u\n", idx);
                }
            }
            break;
        default:
            // TODO handle all kinds
            break;
        }
    }

    if (!have_ret) out.add("\tret\n");
}

func void Generator.handleFunction(Generator* gen, Decl* d) {
    gen.locals.clear();
    Fragment* f = gen.getFragment();
    FunctionDecl* fd = cast<FunctionDecl*>(d);
    string_buffer.Buf* out = f.buf;

    if (d.isPublic()) out.add("export "); // TEMP not if  single file, unless main

    out.add("function ");

    if (fd.hasReturn()) {
        addType(out, fd.getRType());
        out.add1(' ');
    }

    out.add1('$');
    // TODO add module name, except for main
    // TEMP do smarter
    bool has_prefix = !d.isPublic() || (string.strcmp(d.getName(), "main") != 0);
    if (has_prefix) {
        out.add(d.getModuleName());
        out.add1('_');
    }
    const Ref* prefix = fd.getPrefix();
    if (prefix) {
        out.add(prefix.getName());
        out.add1('_');
    }
    out.add(d.getName());
    out.add1('(');


    u32 num_params = fd.getNumParams();

    gen.start = gen.getFragment();
    gen.start.buf.print("@start.%u\n", gen.func_idx);

    gen.data = gen.getFragment();
    gen.addFragment(gen.data);  // will be added to later

    gen.addFragment(f);
    gen.addFragment(gen.start); // will be added to later

    VarDecl** fn_params = fd.getParams();
    for (u32 i=0; i<num_params; i++) {
        if (i != 0) out.add(", ");
        gen.addParam(out, fn_params[i]);
    }
    if (fd.isVariadic()) {
        if (num_params) out.add(", ");
        out.add("...");
    }
    out.add(") {\n");

    // TODO dont generate start for unused params
    // for struct by Value, use alloc4 12 (12 = size), alloc4 for alignment
/*
    for (u32 i=1; i<=num_params; i++) {
        const Param* p = &params[i-1];
        out.print("\t%%.%u = l alloc%u %u\n", i, p.align < 8 ? 4 : 8, p.size);
        // NOTE: not correct for StructValues yet!
        out.print("\tstore%c %%a%u, %%.%u\n", align2store(p.align), i, i);
    }
*/
    Fragment* body = gen.getFragment();
    gen.addFragment(body); // TODO change on if stmts?
    out = body.buf;
    out.print("@body.%u\n", gen.func_idx);

    gen.doFunctionBody(fd, out);
    out.add("}\n");
    out.add1('\n');
    gen.func_idx++;
    gen.start = nil;
    if (gen.data.buf.size()) gen.data.buf.add1('\n');
}

func void Generator.doArrayInit(Generator* gen, string_buffer.Buf* out, const ArrayType* at, const Expr* e) {
    u32 num_elems = at.getSize();
    QualType elem = at.getElemType();
    u32 elemSize = elem.getSize();

    u32 len;
    if (e.getKind() == ExprKind.StringLiteral) {
        const StringLiteral* str = cast<StringLiteral*>(e);
        const char* text = str.getText();
        out.print("b \"%s\\000\"", text);
        len = cast<u32>(string.strlen(text)) + 1;
    } else {
        assert(e.getKind() == ExprKind.InitList);
        InitListExpr* ile = cast<InitListExpr*>(e);
        u32 count  = ile.getNumValues();
        Expr** inits = ile.getValues();

        const StructType* st = elem.getStructTypeOrNil();
        if (st) {
            for (u32 i=0; i<count; i++) {
                if (i != 0) out.add(", ");
                gen.doStructInit(out, st, inits[i]);
            }
        } else {
            char name = align2store(elemSize);
            for (u32 i=0; i<count; i++) {
                if (i != 0) out.add(", ");
                out.print("%c ", name);
                gen.doExpr(out, inits[i]);
            }
        }

        len = count * elemSize;
    }

    u32 num_zeroes = (num_elems * elemSize) - len;
    if (num_zeroes) {
        if (len) out.add(", ");
        out.print("z %u", num_zeroes);
    }
}

func void Generator.doStructInit(Generator* gen, string_buffer.Buf* out, const StructType* st, const Expr* e) {
    //StructTypeDecl* std = st.getDecl();
    // TODO also generate padding (eg. z 3)
    // TODO
}

func u32 Generator.createString(Generator* gen, const Expr* e) {
    StringLiteral* s = cast<StringLiteral*>(e);
    u32 idx = gen.string_idx;
    gen.string_idx++;
    gen.data.buf.print("data $string.%u = align 1 { b \"%s\\000\" }\n", idx, s.getText());
    return idx;
}

func void Generator.doExpr(Generator* gen, string_buffer.Buf* out, const Expr* e) {
    // Note: not all expr here are CTV, mainly ArrayToPointerDecay or Arrays
    switch (e.getKind()) {
    case IntegerLiteral:
        const IntegerLiteral* i =  cast<IntegerLiteral*>(e);
        out.print("%lu", i.getValue());
        return;
    case BooleanLiteral:
        const BooleanLiteral* b = cast<BooleanLiteral*>(e);
        out.print("%u", b.getValue());
        return;
    case CharLiteral:
        const CharLiteral* c = cast<CharLiteral*>(e);
        out.print("%u", c.getValue());
        return;
    case StringLiteral:
        // NOTE this is the case for char* a = "text", NOT char[] a = "text"

        out.print("$string.%u", gen.createString(e));
        return;
    case Nil:
        out.add1('0');
        return;
    case Identifier:
        IdentifierExpr* i = cast<IdentifierExpr*>(e);
        addGlobalName(out, i.getDecl());
        return;
    case Type:
        assert(0);
        return;
    case Call:  fallthrough;
    case InitList:  fallthrough;
    case FieldDesignatedInit:   fallthrough;
    case ArrayDesignatedInit:   fallthrough;
    case BinaryOperator:    fallthrough;
    case UnaryOperator: fallthrough;
    case ConditionalOperator:   fallthrough;
    case Builtin:   fallthrough;
    case ArraySubscript:    fallthrough;
    case Member:    fallthrough;
    case Paren: fallthrough;
    case BitOffset: fallthrough;
    case ExplicitCast:
        // TODO
        return;
    case ImplicitCast:
        ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(e);
        gen.doExpr(out, ic.getInner());
        // TODO
        return;
    }

    if (e.isCtv()) {
        Value v = ctv_analyser.get_value(e);
        // TODO negative values (seems as 64-bit unsigned)
        out.print("%lu", v.uvalue);
    } else {
        out.add("TODO");
    }
}

func void Generator.handleVarDecl(Generator* gen, Decl* d) {
    // TODO only for externals
    if (!d.isUsed()) return;

    const VarDecl* vd = cast<VarDecl*>(d);
    Fragment* f = gen.getFragment();
    string_buffer.Buf* out = f.buf;

    QualType qt = d.getType();
    u32 align = qt.getAlignment();  // TODO add convenience function to Decl? (saves copies)
    u32 size = qt.getSize();  // TODO add convenience function to Decl? (saves copies)
    // TODO dont generate CTV variables (add bit in VarDecl? is_constant)

    if (d.isPublic()) out.add("export ");

    out.add("data ");
    addGlobalName(out, d);
    out.print(" = align %u { ", align);

    const Expr* initExpr = vd.getInit();
    if (initExpr) {
        ArrayType* at = qt.getArrayTypeOrNil();
        const StructType* st = qt.getStructTypeOrNil();
        if (at) {
            gen.doArrayInit(out, at, initExpr);
        } else if (st) {
            gen.doStructInit(out, st, initExpr);
        } else {
            out.print("%c ", align2store(size));
            gen.doExpr(out, initExpr);
        }
    } else {
        out.print("z %u", size);
    }

    out.add(" }\n");
    gen.addFragment(f);
}

func void addMember(string_buffer.Buf* out, QualType qt) {
    const StructType* s = qt.getStructTypeOrNil();
    if (s) {
        addStructName(out, cast<Decl*>(s.getDecl()));
        return;
    }
    const ArrayType* a = qt.getArrayTypeOrNil();
    u32 align = qt.getAlignment();
    if (a) {
        // note: for multi-dimensional arrays, multiply all sizes
        u32 size = a.getSize();
        while (1) {
            qt = a.getElemType();
            a = qt.getArrayTypeOrNil();
            if (!a) break;
            size *= a.getSize();
        }
        out.add1(align2char(align));
        out.print(" %u", size);
        return;
    }
    out.add1(align2char(align));
}

func u32 Generator.createStruct(Generator* gen, string_buffer.Buf* out, StructTypeDecl* s, bool is_global) {
    //struct:  type :.2 = { w, w, b, }
    //union:  type :anon0 = { { w } { b } }
    if (s.asDecl().isGenerated()) return 0;
    // Note: dont use gen.out

    const u32 num_members = s.getNumMembers();
    Decl** members = s.getMembers();

    u32 anon_id = 0;
    out.add("type ");
    if (is_global) {
        addStructName(out, cast<Decl*>(s));
    } else {
        anon_id = gen.substruct_idx;
        out.print(":anon%u", anon_id);
        gen.substruct_idx++;
    }
    out.add(" = { ");
    // Union:  type :test = { { w } { b 12 } }
    // Struct: type :test = { w, b 12 }
    bool is_union = s.isUnion();
    const char* inter = is_union ? " " : ", ";
    for (u32 i=0; i<num_members; i++) {
        Decl* member = members[i];
        if (i != 0) out.add(inter);
        if (is_union) out.add1('{');
        if (member.getKind() == DeclKind.StructType) { // substructs
            Fragment* f = gen.getFragment();
            u32 sub_id = gen.createStruct(f.buf, cast<StructTypeDecl*>(member), false);
            out.print(":anon%u", sub_id);
            gen.addFragment(f);
        } else {
            assert(member.getKind() == DeclKind.Var);
            // if VarDecl is StructType, generate that first (not if Struct*)
            QualType qt = member.getType();
            StructType* st = qt.getStructTypeOrNil();
            if (st) {
                StructTypeDecl* s2 = st.getDecl();
                if (!s2.asDecl().isGenerated()) {
                    Fragment* f = gen.getFragment();
                    gen.createStruct(f.buf, s2, true);
                    gen.addFragment(f);
                }
            }
            addMember(out, member.getType());
        }
        if (is_union) out.add1('}');
    }
    out.add(" }\n");
    s.asDecl().setGenerated();
    return anon_id;
}

func void Generator.handleStruct(Generator* gen, Decl* d) {
    // TODO do normal write in normal case, insert optional fragments later

    if (d.isGenerated()) return;
    StructTypeDecl* s = cast<StructTypeDecl*>(d);

    Fragment* f = gen.getFragment();
    gen.createStruct(f.buf, s, true);
    gen.addFragment(f);
}

func void Generator.on_decl(void* arg, Decl* d) {
    Generator* gen = arg;
    switch (d.getKind()) {
    case Function:
        if (!gen.cur_external) gen.handleFunction(d);
        break;
    case Import:
        return;
    case StructType:
        gen.handleStruct(d);
        break;
    case EnumType:
        break;
    case EnumConstant:
        break;
    case FunctionType:
        break;
    case AliasType:
        break;
    case Var:
        gen.handleVarDecl(d);
        break;
    case StaticAssert:
        break;
    case ArrayValue:
        break;
    }

    while (!gen.used_list.isEmpty()) {
        linked_list.Element* e = gen.used_list.popFront();
        Fragment* f = to_container(Fragment, list, e);
        gen.out.add2(f.buf.data(), f.buf.size());
        gen.freeFragment(f);
    }
}

func void Generator.on_ast(void* arg, AST* a) {
    a.visitDecls(Generator.on_decl, arg);
}

func void Generator.on_module(void* arg, Module* m) {
    if (m.isUsed()) {
        Generator* gen = arg;
        gen.out.print("\n# --- module %s ---\n\n", m.getName());
        // TODO first types, then globals, then functions
        // TODO need same thing as C-generator with types
        m.visitASTs(Generator.on_ast, arg);
    }
}

func void Generator.init(Generator* gen, const char* target, const char* output_dir) {
    string.memset(gen, 0, sizeof(Generator));
    gen.out = string_buffer.create(256*1024, false, 1);
    gen.target = target;
    gen.output_dir = output_dir;
    // starting at 1 looks nicer
    gen.func_idx = 1;
    gen.string_idx = 1;
    gen.free_list.init();
    gen.used_list.init();
    gen.locals.init();
}

func void Generator.free(Generator* gen) {
    while (!gen.free_list.isEmpty()) {
        linked_list.Element* e = gen.free_list.popFront();
        Fragment* f = to_container(Fragment, list, e);
        f.free();
    }
    gen.out.free();
}

func void Generator.write(Generator* gen, const char* output_dir, const char* filename) {
    //printf("%s\n", gen.out.data());

    char[256] fullname;
    stdio.sprintf(fullname, "%s/%s", output_dir, filename);

    file_utils.Writer writer;
    bool ok = writer.write(fullname, cast<u8*>(gen.out.data()), gen.out.size());
    if (!ok) {
        console.error(writer.getError());
    }
}

func void Generator.createMakefile(Generator* gen, const char* output_dir) {
    string_buffer.Buf* out = gen.out;
    out.clear();
    out.add("# This makefile is auto-generated, any modifications will be lost\n\n");
    out.print("../%s: main.o\n", gen.target);
    out.print("\t\tgcc main.o -o ../%s\n\n", gen.target);

    out.add("main.o: main.s\n");
    out.add("\t\tas main.s -o main.o\n\n");

    out.add("main.s: main.qbe\n");
    out.add("\t\tqbe -t amd64_sysv main.qbe -o main.s\n\n");

    // alt to avoid GCC: (Linux specific)
    // LIBDIR=/usr/lib/x86_64-linux-gnu
    // LOADER=/lib64/ld-linux-x86-64.so.2
    // ld -dynamic-linker $(LOADER) -o test main.o $(LIBDIR)/Scrt1.o $(LIBDIR)/libc.so $(LIBDIR)/crti.o $(LIBDIR)/crtn.o

    out.add("clean:\n");
    out.add("\t\trm -f main.o main.s test\n\n");

    gen.write(output_dir, "Makefile");
}

public func void generate(const char* target, const char* output_dir, component.Component** comps, u32 count, bool print) {
    // TODO put in aux-pool? (lowers stack-size)
    char[256] qbe_dir;
    stdio.sprintf(qbe_dir, "%s/%s", output_dir, QBE_Dir);
    i32 err = file_utils.create_directory(qbe_dir);
    if (err) {
        console.error("cannot create directory %s: %s", qbe_dir, string.strerror(err));
        return;
    }

    Generator gen;
    gen.init(target, qbe_dir);

    for (u32 i=0; i<count; i++) {
        component.Component* c = comps[i];
        gen.cur_external = c.isExternal();
        c.visitModules(Generator.on_module, &gen);
    }

    if (print) stdio.puts(gen.out.data());
    gen.write(qbe_dir, QBE_Filename);

    gen.createMakefile(qbe_dir);

    gen.free();
}

public func void build(const char* output_dir)
{
    // TODO put in aux-pool? (lowers stack-size)
    char[256] dir;
    stdio.sprintf(dir, "%s/%s/", output_dir, QBE_Dir);

    i32 retval = process_utils.run(dir, "/usr/bin/make", LogFile);
    if (retval != 0) {
        console.error("error during external QBE compilation");
        console.log("see %s%s for defails", dir, LogFile);
    }
}


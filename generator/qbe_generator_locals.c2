/* Copyright 2022-2024 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module qbe_generator;

import ast;

import stdlib;
import string;

type Var struct {
    const ast.VarDecl* vd;
    u32 idx;
    u32 size;
    u32 align;
}

type Locals struct {
    Var* vars;
    u32 count;
    u32 capacity;
    u32 index; // first free
}

fn void Locals.init(Locals* l) {
    l.clear();
    l.resize(32);
}

fn void Locals.free(Locals* l) {
    stdlib.free(l.vars);
}

fn void Locals.clear(Locals* l) {
    l.count = 0;
    l.index = 1;    // start at 1
}

fn void Locals.resize(Locals* l, u32 capacity) {
    l.capacity = capacity;
    Var* vars2 = stdlib.malloc(capacity * sizeof(Var));
    if (l.count) {
        string.memcpy(vars2, l.vars, l.count * sizeof(Var));
        stdlib.free(l.vars);
    }
    l.vars = vars2;
}

fn u32 Locals.add(Locals* l, ast.VarDecl* vd, u32 size, u32 align) {
    if (l.count == l.capacity) l.resize(l.capacity * 2);

    Var* var = &l.vars[l.count];
    l.count++;
    u32 idx = l.index;
    l.index++;
    var.vd = vd;
    var.idx = idx;
    var.size = size;
    var.align = align;
    return idx;
}

fn u32 Locals.next(Locals* l, const ast.VarDecl* vd) {
    u32 idx = l.index;
    l.index++;
    Var* var = l.find(vd);
    assert(var);
    var.idx = idx;
    return idx;
}

fn Var* Locals.find(const Locals* l, const ast.VarDecl* vd) {
    for (u32 i=0; i<l.count; i++) {
        Var* v = &l.vars[i];
        if (v.vd == vd) return v;
    }
    return nil;
}

/*
fn u32 Locals.getIdx(const Locals* l, const ast.VarDecl* vd) {
    Var* var = l.find(vd);
    if (var) return var.idx;
    return 0;
}
*/


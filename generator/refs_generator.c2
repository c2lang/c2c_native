module refs_generator;

import ast local;
import component;
import refs;
import source_mgr;
import utils;

import string;
import stdio;

type Generator struct {
    source_mgr.SourceMgr* sm;
    refs.Refs* refs;
    const char* curfile;
}

func void Generator.handleExpr(Generator*  gen, const Expr* e) {
    switch (e.getKind()) {
    case Identifier:
        const IdentifierExpr* i = cast<IdentifierExpr*>(e);
        Ref ref = i.getRef();
        gen.handleRef(&ref);
        break;
    default:
        // TODO more
        break;
    }
}

func void Generator.on_decl(void* arg, Decl* d) {
    Generator* gen = arg;
    switch (d.getKind()) {
    case Function:
        FunctionDecl* fd = cast<FunctionDecl*>(d);
        // TODO prefix (optional)
        gen.handleTypeRef(fd.getTypeRef());

        u32 num_params = fd.getNumParams();
        for (u32 i=0; i<num_params; i++) {
            VarDecl* param = fd.getParam(i);
            Generator.on_decl(gen, cast<Decl*>(param));
        }
        break;
    case Import:
        return;
    case StructType:
        StructTypeDecl* s = cast<StructTypeDecl*>(d);
        u32 num_members = s.getNumMembers();
        Decl** members = s.getMembers();
        for (u32 i=0; i<num_members; i++) {
            Generator.on_decl(arg, members[i]);
        }
        break;
    case EnumType:
        EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);
        EnumConstantDecl** constants = etd.getConstants();
        for (u32 i=0; i<etd.getNumConstants(); i++) {
            Generator.on_decl(arg, cast<Decl*>(constants[i]));
        }
        break;
    case EnumConstant:
        break;
    case FunctionType:
        break;
    case AliasType:
        break;
    case Var:
        VarDecl* v = cast<VarDecl*>(d);
        gen.handleTypeRef(v.getTypeRef());

        const Expr* i = v.getInit();
        if (i) gen.handleExpr(i);
        break;
    case StaticAssert:
        return;
    }

    const char* name = d.getName();
    if (!name) return;
    source_mgr.Location loc = gen.sm.getLocation(d.getLoc());
    refs.Dest dest = { gen.curfile, loc.line, cast<u16>(loc.column) }
    gen.refs.add_symbol(d.getName(), & dest);
}

func void Generator.handleTypeRef(Generator* gen, const TypeRef* ref) {
    const Ref* prefix = ref.getPrefix();
    if (prefix) gen.handleRef(prefix);

    const Ref* user = ref.getUser();
    if (user) gen.handleRef(user);
}

func void Generator.handleRef(Generator* gen, const Ref* ref) {
    if (!ref.decl) {
        stdio.printf("refs: Decl not set!\n");
        return;
    }
    source_mgr.Location src_loc = gen.sm.getLocation(ref.loc);
    source_mgr.Location dst_loc = gen.sm.getLocation(ref.decl.getLoc());
    u16 len = cast<u16>(string.strlen(idx2name(ref.name_idx)));
    refs.RefSrc src = { src_loc.line, cast<u16>(src_loc.column), len }
    refs.Dest dest = { dst_loc.filename, dst_loc.line, cast<u16>(dst_loc.column) }
    gen.refs.add_tag(&src, &dest);
}

func void Generator.on_ast(void* arg, AST* a) {
    Generator* gen = arg;
    gen.curfile = a.getFilename();
    gen.refs.add_file(a.getFilename());
    a.visitDecls(Generator.on_decl, arg);
}

func void Generator.on_module(void* arg, Module* m) {
    m.visitASTs(Generator.on_ast, arg);
}

public func void generate(source_mgr.SourceMgr* sm, const char* output_dir, component.Component** c, u32 count) {
    Generator gen = { sm, refs.Refs.create(), nil }

    for (u32 i=0; i<count; i++) {
        c[i].visitModules(Generator.on_module, &gen);
    }

    char[128] outfile;
    stdio.sprintf(outfile, "%s/%s", output_dir, "refs");
    gen.refs.write(outfile);
    gen.refs.free();
}


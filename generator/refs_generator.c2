/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module refs_generator;

import ast local;
import component;
import refs;
import source_mgr;
import ast_visitor;

import string;
import stdio;

public func const char* getFullName(const Decl* d) {
    local char[64] fullname;

    switch (d.getKind()) {
    case Function:
        const FunctionDecl* fd = cast<FunctionDecl*>(d);
        if (fd.hasPrefix()) {
            stdio.sprintf(fullname, "%s.%s", fd.getPrefixName(), d.getName());
            return fullname;
        }
        break;
    case Import:
        break;
    case StructType:
        break;
    case EnumType:
        break;
    case EnumConstant:
        // Note: not used, since we do this in Enum Type
        break;
    case FunctionType:
        break;
    case AliasType:
        break;
    case Var:
        break;
    case StaticAssert:
        break;
    case ArrayValue:
        break;
    }
    return d.getName();
}

type Generator struct {
    source_mgr.SourceMgr* sm;
    refs.Refs* refs;
    const char* curfile;
    ast_visitor.Visitor* visitor;
}

func void Generator.on_decl(void* arg, const Decl* d, bool global) {
    Generator* gen = arg;

    const char* name = d.getName();
    if (name && global) {
        source_mgr.Location loc = gen.sm.getLocation(d.getLoc());
        refs.Dest dest = { gen.curfile, loc.line, cast<u16>(loc.column) }
        gen.refs.add_symbol(getFullName(d), &dest);
    }

    switch (d.getKind()) {
    case Function:
        FunctionDecl* fd = cast<FunctionDecl*>(d);
        // TODO prefix (optional)
        // TODO needed? (or already done by visitor?)
        gen.handleTypeRef(fd.getTypeRef());
        break;
    case Import:
        return;
    case StructType:
        StructTypeDecl* s = cast<StructTypeDecl*>(d);
        u32 num_members = s.getNumMembers();
        Decl** members = s.getMembers();
        for (u32 i=0; i<num_members; i++) {
            Generator.on_decl(arg, members[i], false);
        }
        break;
    case EnumType:
        // TODO let visitor do this
        EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);
        EnumConstantDecl** constants = etd.getConstants();
        for (u32 i=0; i<etd.getNumConstants(); i++) {
            Decl* ecd = cast<Decl*>(constants[i]);
            // NOTE: we add the symbol here, since we have the EnumDecl here
            source_mgr.Location loc = gen.sm.getLocation(ecd.getLoc());
            refs.Dest dest = { gen.curfile, loc.line, cast<u16>(loc.column) }
            char[64] fullname;
            stdio.sprintf(fullname, "%s.%s", d.getName(), ecd.getName());
            gen.refs.add_symbol(fullname, &dest);

            Generator.on_decl(arg, ecd, false);
        }
        break;
    case EnumConstant:
        break;
    case FunctionType:
        break;
    case AliasType:
        break;
    case Var:
        gen.on_vardecl(cast<VarDecl*>(d));
        break;
    case StaticAssert:
        return;
    case ArrayValue:
        return;
    }

    gen.visitor.handle(d);
}

func void Generator.on_vardecl(Generator* gen, const VarDecl* v) {
    gen.handleTypeRef(v.getTypeRef());
}

func void Generator.handleTypeRef(Generator* gen, const TypeRef* ref) {
    const Ref* prefix = ref.getPrefix();
    if (prefix) gen.handleRef(prefix);

    const Ref* user = ref.getUser();
    if (user) gen.handleRef(user);
}

func void Generator.handleRef(Generator* gen, const Ref* ref) {
    if (!ref.decl) {
        stdio.printf("refs: Decl not set!\n");
        return;
    }
    source_mgr.Location src_loc = gen.sm.getLocation(ref.loc);
    // TODO decl.getLoc should be added already (?) so lookup cache? SrcLoc -> Location (locals only?)
    source_mgr.Location dst_loc = gen.sm.getLocation(ref.decl.getLoc());
    u16 len = cast<u16>(string.strlen(idx2name(ref.name_idx)));
    refs.RefSrc src = { src_loc.line, cast<u16>(src_loc.column), len }
    refs.Dest dest = { dst_loc.filename, dst_loc.line, cast<u16>(dst_loc.column) }
    gen.refs.add_tag(&src, &dest);
}

func void Generator.on_local(void* arg, const VarDecl* v) {
    Generator* gen = arg;
    gen.on_vardecl(v);
}

func void Generator.on_global_decl(void* arg, Decl* d) {
    // needed because one prototype has const Decl*, the other (non-const) Decl*
    Generator.on_decl(arg, d, true);
}

func void Generator.on_ast(void* arg, AST* a) {
    Generator* gen = arg;
    gen.curfile = a.getFilename();
    gen.refs.add_file(a.getFilename());
    a.visitDecls(Generator.on_global_decl, arg); // globals
}

func void Generator.on_module(void* arg, Module* m) {
    if (!m.isUsed()) return;
    m.visitASTs(Generator.on_ast, arg);
}

func void Generator.on_ref(void* arg, const Ref* ref) {
    Generator* gen = arg;
    gen.handleRef(ref);
}

public func void generate(source_mgr.SourceMgr* sm, const char* output_dir, component.Component** c, u32 count) {
    Generator gen = { sm, refs.Refs.create(), nil }
    gen.visitor = ast_visitor.create(&gen, Generator.on_ref, Generator.on_local);

    for (u32 i=0; i<count; i++) {
        c[i].visitModules(Generator.on_module, &gen);
    }

    char[128] outfile;
    stdio.sprintf(outfile, "%s/%s", output_dir, "refs");
    gen.refs.write(outfile);
    gen.refs.free();

    gen.visitor.free();
}


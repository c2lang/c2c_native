module c2c_main;

import file_utils;
import c2_tokenizer local;

import stdio local;
import string local;
import c_errno local;
import sys_time;

func u64 now() {
    sys_time.Timeval tv;
    sys_time.gettimeofday(&tv, nil);
    u64 now64 = cast<u64>(tv.tv_sec);
    now64 *= 1000000;
    now64 += tv.tv_usec;
    return now64;
}

func void parse_file(const char* data) {
    Tokenizer tokenizer;
    char[256] error_msg;
    error_msg[0] = 0;
    tokenizer.init(data, error_msg);
    Token tok;
    tok.init();

    u32[enum_max(TokenKind)] count = { 0 }

    u64 t1 = now();
    u32 token_count = 0;
    while (tok.more) {
        tokenizer.lex(&tok);
        //tok.dump();
        //count[tok.kind]++;
        //token_count++;
    }
    u64 t2 = now();

    printf("--- %u tokens (%llu usec) ---\n", token_count, t2 - t1);
    for (u8 i=0; i<elemsof(count); i++) {
        if (count[i] == 0) continue;
        printf("%5u  %10s  %4.1f %%\n", count[i], kind2str(i), count[i] * 100.0 / token_count);
    }
}

public func i32 main(i32 argc, char** argv) {
    if (argc < 2) {
        printf("usage: %s [file]\n", argv[0]);
        return -1;
    }

    for (i32 i=1; i<argc; i++) {
        const char* filename = argv[i];
        printf("------ %s ------\n", filename);

        file_utils.Reader file;
        if (!file.open(filename)) {
            fprintf(stderr, "Error opening file: %s\n", strerror(*errno2()));
            return -1;
        }

        for (i32 j=0; j<100; j++) {
            parse_file(file.data());
        }

        file.close();
    }

	return 0;
}

/* Copyright 2022 Bas van den Berg
*/

module module_analyser;

import source_mgr;
import ast local;
import ast_context;

import string;
import stdlib;
import stdio; // TEMP

// TEMP here until we have templates
// TODO also use u32 indexes
type StringVector struct {
    const char** data;
    u32 count;
    u32 capacity;
}

func void StringVector.free(StringVector* v) {
    stdlib.free(cast<void*>(v.data));
    v.count = 0;
    v.capacity = 0;
    v.data = nil;
}

func void StringVector.resize(StringVector* v) {
    v.capacity = v.capacity == 0 ? 4 : v.capacity * 2;
    void* data2 = stdlib.malloc(v.capacity * sizeof(char*));
    if (v.data) {
        string.memcpy(data2, cast<void*>(v.data), v.count * sizeof(char*));
        stdlib.free(cast<void*>(v.data));
    }
    v.data = data2;
}

func u32 StringVector.add(StringVector* v, const char* str) {
    if (v.count == v.capacity) v.resize();

    u32 index = v.count;
    v.data[index] = str;
    v.count++;
    return index;
}

func bool StringVector.find(StringVector* v, const char* str, u32* index) {
    for (u32 i=0; i<v.count; i++) {
        if (v.data[i] == str) {
            *index = i;
            return true;
        }
    }
    return false;
}


type StructDeclInfo struct {
    Decl* decl;
    FunctionDeclList functions;
}


type StructDecls struct {
    StructDeclInfo* data;
    u32 count;
    u32 capacity;
}

func void StructDecls.free(StructDecls* v) {
    for (u32 i=0; i<v.count; i++) {
        v.data[i].functions.free();
    }
    stdlib.free(v.data);
    v.count = 0;
    v.capacity = 0;
    v.data = nil;
}

func void StructDecls.resize(StructDecls* v) {
    v.capacity = v.capacity == 0 ? 4 : v.capacity * 2;
    StructDeclInfo* data2 = stdlib.malloc(v.capacity * sizeof(StructDeclInfo));
    if (v.data) {
        string.memcpy(data2, v.data, v.count * sizeof(StructDeclInfo));
        stdlib.free(v.data);
    }
    v.data = data2;
}

func void StructDecls.addDecl(StructDecls* v, Decl* decl) {
    if (v.count == v.capacity) v.resize();

    StructDeclInfo* info = &v.data[v.count];
    info.decl = decl;
    info.functions.init();
    v.count++;
}

func Decl* StructDecls.getDecl(StructDecls* v, u32 index) {
    return v.data[index].decl;
}

func void StructDecls.addFunc(StructDecls* v, u32 index, FunctionDecl* fn) {
    // assert(index < v.count);
    StructDeclInfo* info = &v.data[index];
    info.functions.add(fn);
}

type ModuleAnalyser struct {
    Module* mod;
    source_mgr.SourceMgr* sm;
    ast_context.Context* context;

    // collect struct-functions
    // TODO use name idx
    const char* prefix_cache;
    u32 prefix_cache_idx;
    // Vector<const char*> prefixes;
    StringVector prefixes;
    StructDecls struct_decls;

    // Type + Vars analysis
    Decl*[8] checkStack;
    u32 checkIndex;
}

public func void check(source_mgr.SourceMgr* sm, ast_context.Context* context, Module* mod) {
    ModuleAnalyser ma;
    string.memset(&ma, 0, sizeof(ma));
    ma.sm = sm;
    ma.context = context;
    ma.mod = mod;

    //printf("analysing module %s\n", ma.mod.getName());
    // NOTE: C2C ModuleAnalyser::step1()
    // step 3a: collect incremental arrays
    // TODO use visitIncrArrays()

    // step 3b: collect struct functions
    mod.visitStructFunctions(ModuleAnalyser.handleStructFunc, &ma);

    for (u32 i=0; i<ma.struct_decls.count; i++) {
        const StructDeclInfo* info = &ma.struct_decls.data[i];
        StructTypeDecl* fd = cast<StructTypeDecl*>(info.decl);
        fd.setStructFunctions(ma.context, info.functions.getDecls(), info.functions.size());
    }

    ma.prefixes.free();  // Note: free here already (safe to be freed twice)
    ma.struct_decls.free();

    // NOTE: C2C ModuleAnalyser::step2()
    // analyse types
    // TODO need stack of Decls, use check_state
    mod.visitTypeDecls(ModuleAnalyser.handleTypeDecl, &ma);


    // analyse vars
    // analyse static asserts
    // analyse function protos

    // NOTE: C2C ModuleAnalyser::step3()
    // analyse functionbodies

    ma.free();
}

func void ModuleAnalyser.free(ModuleAnalyser* ma) {
    ma.prefixes.free();
    ma.struct_decls.free();
}

func void ModuleAnalyser.handleStructFunc(void* arg, FunctionDecl* d) {
    ModuleAnalyser* ma = arg;
    IdentifierExpr* prefix = d.getPrefix();
    const char* prefix_name = prefix.getName();
    // assert(prefix)
    //printf("  %s %s\n", prefix_name, d.asDecl().getName());

    u32 index = 0;
    if (prefix_name == ma.prefix_cache) {
        index = ma.prefix_cache_idx;
    } else {
        // search data structure
        bool found = false;
        found = ma.prefixes.find(prefix_name, &index);

        if (!found) {
            Decl* decl = ma.mod.findType(prefix_name);
            if (!decl) {
                // TODO search for all symbols for nice Diag
                stdio.printf("StructFunction prefix %s not found\n", prefix_name);
                return;
            }
            if (decl.getKind() != DeclKind.StructType) {
                stdio.printf("StructFunction prefix %s is not a struct/union\n", prefix_name);
                return;
            }
            index = ma.prefixes.add(prefix_name);
            ma.struct_decls.addDecl(decl);
        }
        ma.prefix_cache = prefix_name;
        ma.prefix_cache_idx = index;
    }

    // TODO check for duplicate names
    ma.struct_decls.addFunc(index, d);
    prefix.setDecl(ma.struct_decls.getDecl(index));
}


func void ModuleAnalyser.handleTypeDecl(void* arg, Decl* d) {
    ModuleAnalyser* ma = arg;
    //stdio.printf("TYPE %s\n", d.getName());
    if (d.isChecked()) return;
    // TODO make exception for EnumConstants. Can happen if: B = State.A + 1,

    if (!ma.pushCheck(d)) return;

    switch (d.getKind()) {
    case DeclKind.Function:
        //assert(0);
        return;
    case DeclKind.Import:
        //assert(0);
        return;
    case DeclKind.StructType:
        ma.analyseStructType(cast<StructTypeDecl*>(d));
        break;
    case DeclKind.EnumType:
        ma.analyseEnumType(cast<EnumTypeDecl*>(d));
        break;
    case DeclKind.EnumConstant:
        break;
    case DeclKind.FunctionType:
        break;
    case DeclKind.AliasType:
        break;
    case DeclKind.Var:
        break;
    case DeclKind.StaticAssert:
        //assert(0);
        return;
    }
    d.setCheckState(DeclCheckState.Checked);
    ma.popCheck();
}

func bool ModuleAnalyser.pushCheck(ModuleAnalyser* ma, Decl* d) {
    for (u32 i=0; i<ma.checkIndex; i++) {
        if (ma.checkStack[i] == d) {
            for (u32 j=i; j<ma.checkIndex; j++) {
                stdio.fprintf(stdio.stderr, "Error: circular dependency %s\n", d.getName());
            }
            // TODO use longjmp here?
            return false;
        }
    }
    ma.checkStack[ma.checkIndex] = d;
    ma.checkIndex++;
    d.setCheckState(DeclCheckState.InProgress);
    return true;
}

func void ModuleAnalyser.popCheck(ModuleAnalyser* ma) {
    ma.checkIndex--;
}

func void ModuleAnalyser.analyseStructType(ModuleAnalyser* ma, StructTypeDecl* d) {
    // TODO
}

func void ModuleAnalyser.analyseEnumType(ModuleAnalyser* ma, EnumTypeDecl* d) {
    // TODO check for duplicates names
    // TODO check if constants fit in impl type
    // TODO assign values to constants
    // TODO need CTVAnalyser
}


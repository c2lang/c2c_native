/* Copyright 2022 Bas van den Berg
*/

module ast_builder;

import ast local;
import ast_context local;
import tokens local;
import utils local;

import stdlib local;
import stdio local;

public type Builder struct {
    Context* context;
} @(opaque)

public func Builder* Builder.create(Context* c) {
    Builder* b = calloc(1, sizeof(Builder));
    b.context = c;
    return b;
}

public func void Builder.free(Builder* b) {
    free(b);
}

public func void Builder.actOnModule(Builder* b, const char* mod_name, SrcLoc mod_loc) {
    //printf("MODULE %s\n", mod_name);
    // TODO store
}

public func void Builder.actOnImport(Builder* b, const char* mod_name, SrcLoc mod_loc, const char* alias_name, SrcLoc alias_loc, bool islocal) {
    ImportDecl* d = ImportDecl.create(b.context, mod_name, mod_loc, alias_name, alias_loc, islocal);
    //ast.addImport(d);
}

public func void Builder.actOnStructType(Builder* b, const char* name, SrcLoc loc, bool is_struct, bool is_public, bool is_global) {
    //printf("%s %s  %s %s\n", is_struct ? "STRUCT" : "UNION", name, is_public ? "public" : "", is_global ? "global" : "");
    // TODO store
}

public func void Builder.actOnAttr(Builder* b, const char* name, SrcLoc begin_loc, SrcLoc end_loc) {
    //printf("ATTR  %s\n", name);
}

public func QualType Builder.actOnBuiltinType(Builder* b, tokens.Kind kind) {
    Type* t;
    // TODO optimize (table?) -> fill in init with correct width for usize/isize, fill with QualType
    switch (kind) {
    case Kind.KW_u8:
        t = cast<Type*>(g_u8);
        break;
    case Kind.KW_u16:
        t = cast<Type*>(g_u16);
        break;
    case Kind.KW_u32:
        t = cast<Type*>(g_u32);
        break;
    case Kind.KW_u64:
        t = cast<Type*>(g_u64);
        break;
    case Kind.KW_usize:
        // TODO targetInfo.intWidth
        t = cast<Type*>(g_u64);
        break;
    case Kind.KW_i8:
        t = cast<Type*>(g_i8);
        break;
    case Kind.KW_i16:
        t = cast<Type*>(g_i16);
        break;
    case Kind.KW_i32:
        t = cast<Type*>(g_i32);
        break;
    case Kind.KW_i64:
        t = cast<Type*>(g_i64);
        break;
    case Kind.KW_isize:
        // TODO targetInfo.intWidth
        t = cast<Type*>(g_i64);
        break;
/*
    case Kind.KW_f32:
    case Kind.KW_f64:
    case Kind.KW_reg8:
    case Kind.KW_reg16:
    case Kind.KW_reg32:
    case Kind.KW_reg64:
*/
    case Kind.KW_char:
        t = cast<Type*>(g_i8);
        break;
    case Kind.KW_void:
        t = cast<Type*>(g_void);
        break;
    case Kind.KW_bool:
        t = cast<Type*>(g_bool);
        break;
    default:
        // fatal error
        break;
    }

    return QualType.init2(t);
}

public func QualType Builder.actOnPointerType(Builder* b, QualType qt, u32 qualifier) {
    //printf("POINTER\n");
    // TODO
    return qt;

}

public func QualType Builder.actOnTypeQualifier(Builder* b, QualType qt, u32 qualifier) {
    QualType res = { qt.ptr | (qualifier & QualType_Mask) }
    return res;
}

public func void Builder.actOnIdExpression(Builder* b, const char* name, SrcLoc loc) {
    //printf("ID %s\n", name);
}

public func FunctionDecl* Builder.actOnFuncDecl(Builder* b, const char* name, SrcLoc loc, bool is_public, QualType rtype) {
    return FunctionDecl.create(b.context, name, loc, is_public, rtype);
}

public func void Builder.actOnFunctionBody(Builder* b, FunctionDecl* f, CompoundStmt* body) {
    f.setBody(body);
}

// TODO extract Decl, Stmt parts to own file
public func Stmt* Builder.actOnCompoundStmt(Builder* b, Stmt** stmts, u32 count) {
    return cast<Stmt*>(CompoundStmt.create(b.context, stmts, count));
}

public func Stmt* Builder.actOnReturnStmt(Builder* b, SrcLoc loc, Expr* ret) {
    return cast<Stmt*>(ReturnStmt.create(b.context, loc, ret));
}

public func Stmt* Builder.actOnIfStmt(Builder* b, Expr* cond, Stmt* then, Stmt* else_stmt) {
    return cast<Stmt*>(IfStmt.create(b.context, cond, then, else_stmt));
}

public func Stmt* Builder.actOnDoStmt(Builder* b, Expr* cond, Stmt* then) {
    return cast<Stmt*>(DoStmt.create(b.context, cond, then));
}

public func Stmt* Builder.actOnWhileStmt(Builder* b, Expr* cond, Stmt* then) {
    return cast<Stmt*>(WhileStmt.create(b.context, cond, then));
}

public func Stmt* Builder.actOnForStmt(Builder* b, Stmt* init_, Expr* cond, Expr* incr, Stmt* body) {
    return cast<Stmt*>(ForStmt.create(b.context, init_, cond, incr, body));
}

public func Expr* Builder.actOnIdentifier(Builder* b, SrcLoc loc, const char* value) {
    return cast<Expr*>(IdentifierExpr.create(b.context, loc, value));
}

public func Expr* Builder.actOnIntegerLiteral(Builder* b, SrcLoc loc, const char* text) {
    u64 val;
    if (text[1] == 0) { // fast single digit path
        // TEMP
        val = cast<u64>(text[0] - '0');
    } else {
        val = strtoull(text, nil, 10);
    }
    return cast<Expr*>(IntegerLiteral.create(b.context, loc, val));
}

public func Expr* Builder.actOnCharLiteral(Builder* b, SrcLoc loc, u8 value) {
    return cast<Expr*>(CharLiteral.create(b.context, loc, value));
}

public func Expr* Builder.actOnStringLiteral(Builder* b, SrcLoc loc, const char* value) {
    return cast<Expr*>(StringLiteral.create(b.context, loc, value));
}

public func Expr* Builder.actOnNilExpr(Builder* b, SrcLoc loc) {
    return cast<Expr*>(NilExpr.create(b.context, loc));
}


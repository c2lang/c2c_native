/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c2_parser;

import ast_builder local;
import ast local;
import attr;
import c2_tokenizer local;
import color;
import diagnostics;
import source_mgr local;
import string_list;
import string_pool;
import token local;
import src_loc local;
#if DumpTokens
import utils;
#endif

import stdarg local;
import stdlib local;
import csetjmp local;
import ctype local;
import stdio local;

public type Info struct {
    SourceMgr* sm;
    diagnostics.Diags* diags;
    string_pool.Pool* pool;
    const string_list.List* features;
}

public func void Info.init(Info* info,
                           SourceMgr* sm,
                           diagnostics.Diags* diags,
                           string_pool.Pool* pool,
                           const string_list.List* features)
{
    info.sm = sm;
    info.diags = diags;
    info.pool = pool;
    info.features = features;
}

public type Parser struct {
    Tokenizer tokenizer;
    Token tok;
    i32 file_id;
    Builder* builder;
    bool is_interface;

    Info* info;
    JmpBufTag jmpbuf;
} @(opaque)

public func Parser* create(Info* info, ast_builder.Builder* builder)
{
    Parser* p = calloc(1, sizeof(Parser));
    p.info = info;
    p.builder = builder;
    return p;
}

public func void Parser.free(Parser* p) {
    free(p);
}

public func void Parser.parse(Parser* p, i32 file_id, bool is_interface) {
    p.file_id = file_id;
    p.is_interface = is_interface;

#if DumpTokens
    u64 t1 = utils.now();
    p.tokenizer.init(p.info.pool, p.info.sm.get_content(p.file_id), p.info.sm.get_offset(p.file_id), p.info.features);
    p.tok.init();
    u32 token_count = 0;
    while (p.tok.more) {
        p.tokenizer.lex(&p.tok);
        p.dump_token(&p.tok);
        token_count++;
    }
    u64 t2 = utils.now();
    printf("--- %u tokens (%llu usec) ---\n", token_count, t2 - t1);
#else
    i32 res = setjmp(&p.jmpbuf);
    if (res == 0) {

        p.tokenizer.init(p.info.pool, p.info.sm.get_content(p.file_id), p.info.sm.get_offset(p.file_id), p.info.features);
        p.tok.init();

        p.consumeToken();

        p.parseModule();
        p.parseImports();

        while (p.tok.more) {
            p.parseTopLevel();
        }
    }
#endif
}

func void Parser.consumeToken(Parser* p) {
    p.tokenizer.lex(&p.tok);

    //p.dump_token(&p.tok);

    if (p.tok.kind == Kind.Error) p.error(p.tok.error_msg);
}

func void Parser.expectAndConsume(Parser* p, Kind kind) {
    if (p.tok.kind == kind) {
        p.consumeToken();
        return;
    }

    p.error("expected %s got %s", kind2str(kind), kind2str(p.tok.kind));
}

func void Parser.expectIdentifier(Parser* p) {
    if (p.tok.kind == Kind.Identifier) return;

    p.error("expected identifier");
}

func void Parser.error(Parser* p, const char* format, ...) @(noreturn) {
    char[256] msg;

    Va_list args;
    va_start(args, format);
    vsnprintf(msg, sizeof(msg)-1, format, args);
    va_end(args);
    p.info.diags.error(p.tok.loc, msg);

    longjmp(&p.jmpbuf, 1);
}

func void Parser.parseModule(Parser* p) {
    p.expectAndConsume(Kind.KW_module);
    p.expectIdentifier();

    p.builder.actOnModule(p.tok.text_idx, p.tok.loc, p.info.sm.getFileName(p.file_id));
    p.consumeToken();
    p.expectAndConsume(Kind.Semicolon);
}

func void Parser.parseImports(Parser* p) {
    while (p.tok.kind == Kind.KW_import) {
        p.consumeToken();
        p.expectIdentifier();
        u32 mod_name = p.tok.text_idx;
        SrcLoc mod_loc = p.tok.loc;

        u32 alias_name = 0;
        SrcLoc alias_loc = 0;
        p.consumeToken();
        if (p.tok.kind == Kind.KW_as) {
            p.consumeToken();
            p.expectIdentifier();
            alias_name = p.tok.text_idx;
            alias_loc = p.tok.loc;
            p.consumeToken();
        }
        bool islocal = false;
        if (p.tok.kind == Kind.KW_local) {
            p.consumeToken();
            islocal = true;
        }
        p.expectAndConsume(Kind.Semicolon);

        p.builder.actOnImport(mod_name, mod_loc, alias_name, alias_loc, islocal);
    }
}

func void Parser.parseTopLevel(Parser* p) {
    // TODO need next-token for array-entry

    bool is_public = p.parseOptionalAccessSpecifier();
    switch (p.tok.kind) {
        case KW_assert:
            p.error("assert can only be used inside a function");
            break;
        case KW_func:
            p.parseFuncDecl(is_public);
            break;
        case KW_import:
            p.error("import after decls");
            break;
        case KW_static_assert:
            if (is_public) p.error("static_assert cannot be public");
            p.parseStaticAssert();
            break;
        case KW_type:
            p.parseTypeDecl(is_public);
            break;
        case Eof:
            break;
        default:
            p.parseVarDecl(is_public);
            break;
    }
}

/* Syntax:
   Attributes ::= @(AttrList)
   AttrList   ::= AttrList, Attr
                  Attr
   Attr       ::= name
                  name="value"
                  name=<number>
*/
func void Parser.parseOptionalAttributes(Parser* p, Decl* d) {
    if (p.tok.kind != Kind.At) return;
    p.consumeToken();

    p.expectAndConsume(Kind.LParen);

    while (1) {
        p.expectIdentifier();
        u32 attr_id = p.tok.text_idx;
        SrcLoc attr_loc = p.tok.loc;
        p.consumeToken();

        attr.Value value;
        attr.Value* value_ptr = nil;
        if (p.tok.kind == Kind.Equal) {
            p.consumeToken();
            switch (p.tok.kind) {
            case StringLiteral:
                value.is_number = false;
                value.text_idx = p.tok.text_idx;
                value.loc = p.tok.loc;
                p.consumeToken();
                value_ptr = &value;
                break;
            case NumberLiteral:
                value.is_number = true;
                value.number = cast<u32>(p.tok.number_value);
                value.loc = p.tok.loc;
                p.consumeToken();
                value_ptr = &value;
                break;
            default:
                p.error("expected attribute argument");
                return;
            }
        }

        p.builder.actOnAttr(d, attr_id, attr_loc, value_ptr);

        if (p.tok.kind != Kind.Comma) break;
        p.consumeToken();
    }

    p.expectAndConsume(Kind.RParen);
}

func void Parser.parseFuncDecl(Parser* p, bool is_public) {
    p.consumeToken();

    TypeRefHolder rtype;
    rtype.init();
    p.parseSingleTypeSpecifier(&rtype, true);

    p.expectIdentifier();
    u32 func_name = p.tok.text_idx;
    SrcLoc func_loc = p.tok.loc;
    p.consumeToken();

    Ref prefix_ref;
    Ref* prefix = nil;
    if (p.tok.kind == Kind.Dot) {
        p.consumeToken();
        p.expectIdentifier();

        prefix_ref.loc = func_loc;
        prefix_ref.name_idx = func_name;
        prefix_ref.decl = nil;
        prefix = &prefix_ref;
        func_name = p.tok.text_idx;
        func_loc = p.tok.loc;
        p.consumeToken();
    }

    if (!checkName(p.info.pool.idx2str(func_name), p.is_interface)) {
        p.tok.loc = func_loc;   // reset to correct value for error
        p.error("a function name must start with a lower-case letter");
    }

    DeclList params;
    params.init(4);

    bool is_variadic = p.parseFunctionParams(&params, is_public);

    FunctionDecl* f;
    if (p.tok.kind == Kind.KW_template) {
        p.consumeToken();
        p.expectIdentifier();

        u32 name = p.tok.text_idx;
        //SrcLoc loc = p.tok.loc;
        p.consumeToken();
        // TODO parse multiple template args

        f = p.builder.actOnTemplateFunctionDecl(func_name,
                                                func_loc,
                                                is_public,
                                                &rtype,
                                                name,
                                                cast<VarDecl**>(params.getDecls()),
                                                params.size(),
                                                is_variadic);
    } else {
        f = p.builder.actOnFunctionDecl(func_name,
                                        func_loc,
                                        is_public,
                                        &rtype,
                                        prefix,
                                        cast<VarDecl**>(params.getDecls()),
                                        params.size(),
                                        is_variadic);
    }

    params.free();

    p.parseOptionalAttributes(cast<Decl*>(f));

    if (p.is_interface) {
        if (p.tok.kind == Kind.LBrace) {
            p.error("interface functions cannot have a function body");
        }
        p.expectAndConsume(Kind.Semicolon);
        return;
    }

    CompoundStmt* body = p.parseCompoundStmt();
    p.builder.actOnFunctionBody(f, body);
}

func bool Parser.parseFunctionParams(Parser* p, DeclList* params, bool is_public) {
    p.expectAndConsume(Kind.LParen);

    // fast path for ()
    if (p.tok.kind == Kind.RParen) {
        p.consumeToken();
        return false;
    }

    bool is_variadic = false;

    // VarDeclList args
    while (1) {
        VarDecl* decl = p.parseParamDecl(is_public);
        params.add(decl.asDecl());

        if (p.tok.kind != Kind.Comma) break;
        p.consumeToken();

        if (p.tok.kind == Kind.Ellipsis) {
            is_variadic = true;
            p.consumeToken();
            break;
        }
    }

    p.expectAndConsume(Kind.RParen);
    return is_variadic;
}

/*
   Syntax:
    param_declaration ::= type_qualifier type_specifier IDENTIFIER param_default.
    param_default ::= EQUALS constant_expression.
*/
func VarDecl* Parser.parseParamDecl(Parser* p, bool is_public) {
    if (p.tok.kind == Kind.KW_local) p.error("invalid local");

    TypeRefHolder ref;
    ref.init();
    p.parseTypeSpecifier(&ref, true, false);

    u32 name = 0;
    SrcLoc loc = p.tok.loc;
    if (p.tok.kind == Kind.Identifier) {
        name = p.tok.text_idx;
        p.consumeToken();
    }

    if (p.tok.kind == Kind.Equal) {
        p.error("default parameter values are not allowed");
    }

    return p.builder.actOnFunctionParam(name, loc, is_public, &ref);
}

func void Parser.parseTypeSpecifier(Parser* p, TypeRefHolder* ref, bool allow_qualifier, bool allow_array) {
    p.parseSingleTypeSpecifier(ref, allow_qualifier);
    p.parseOptionalArray(ref, QualType_Invalid, allow_array);
}

func void Parser.parseOptionalArray(Parser* p, TypeRefHolder* ref, QualType base, bool allow_array) {
    if (p.tok.kind != Kind.LSquare) return;

    if (!allow_array) p.error("array types are not allowed here");

    if (ref.getNumArrays() == 3) p.error("arrays cannot have more than 3 dimensions");

    p.consumeToken();

    bool is_incremental = false;

    // NOTE: 'inverse' order, so char[2][4] -> 2 x ( 4 x char )

    Expr* size = nil;
    if (p.tok.kind == Kind.RSquare) {
        // "[]"
        ref.addArray(nil);
        p.consumeToken();
    }
    // TODO fastpath for number + ] (need NextToken)
    else if (p.tok.kind == Kind.Plus) {
        p.consumeToken();
        ref.setIncrArray();
        is_incremental = true;
        p.expectAndConsume(Kind.RSquare);
    } else {
        size = p.parseExpr();
        ref.addArray(size);
        p.expectAndConsume(Kind.RSquare);
    }

    p.parseOptionalArray(ref, base, true);
}

func void Parser.parseVarDecl(Parser* p, bool is_public) {
    if (p.tok.kind == Kind.KW_local) p.error("local cannot be used at file scope");

    TypeRefHolder ref;
    ref.init();
    p.parseTypeSpecifier(&ref, true, true);
    p.expectIdentifier();

    u32 name = p.tok.text_idx;
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    bool need_semi = true;
    Expr* initValue = nil;

    p.parseOptionalAttributes(nil); // will be stored in Builder

    if (p.tok.kind == Kind.Equal) {
        p.consumeToken();
        initValue = p.parseInitValue(&need_semi, false);
    }

    if (need_semi) p.expectAndConsume(Kind.Semicolon);

    p.builder.actOnGlobalVarDecl(name, loc, is_public, &ref, initValue);
}

func void Parser.parseStaticAssert(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    p.expectAndConsume(Kind.LParen);
    Expr* lhs = p.parseExpr();
    p.expectAndConsume(Kind.Comma);
    Expr* rhs = p.parseExpr();
    p.expectAndConsume(Kind.RParen);
    p.expectAndConsume(Kind.Semicolon);
    p.builder.actOnStaticAssert(loc, lhs, rhs);
}

func bool Parser.parseOptionalAccessSpecifier(Parser* p) {
    if (p.tok.kind == Kind.KW_public) {
        p.consumeToken();
        return true;
    }
    return false;
}

func u32 Parser.parseOptionalTypeQualifier(Parser* p) {
    u32 qualifiers = 0;
    if (p.tok.kind == Kind.KW_const) {
        p.consumeToken();
        qualifiers |= QualType_Const;
    }
    if (p.tok.kind == Kind.KW_volatile) {
        p.consumeToken();
        qualifiers |= QualType_Volatile;
    }
    return qualifiers;
}

// Note: first index is KW_bool, last KW_void
const BuiltinKind[] Tok2builtin = {
    BuiltinKind.Bool,
    BuiltinKind.Char,
    BuiltinKind.Int8,
    BuiltinKind.Int16,
    BuiltinKind.Int32,
    BuiltinKind.Int64,
    BuiltinKind.UInt8,
    BuiltinKind.UInt16,
    BuiltinKind.UInt32,
    BuiltinKind.UInt64,
    // TODO give Reg own BuiltinType
    BuiltinKind.UInt8,
    BuiltinKind.UInt16,
    BuiltinKind.UInt32,
    BuiltinKind.UInt64,
    BuiltinKind.ISize,
    BuiltinKind.USize,
    BuiltinKind.Float32,
    BuiltinKind.Float64,
    BuiltinKind.Void,
}

func BuiltinKind tokKindToBuiltinKind(token.Kind kind) {
    return Tok2builtin[kind - Kind.KW_bool];
}

func void Parser.parseSingleTypeSpecifier(Parser* p, TypeRefHolder* ref, bool allow_qualifier) {
    u32 type_qualifier = 0;

    if (allow_qualifier) {
        // TODO give error if we get a qualifier
        type_qualifier = p.parseOptionalTypeQualifier();
        ref.setQualifiers(type_qualifier);
    }

    Kind kind = p.tok.kind;

    if (kind >= Kind.KW_bool && kind <= Kind.KW_void) {
        ref.setBuiltin(tokKindToBuiltinKind(p.tok.kind));
        p.consumeToken();
    } else if (kind == Kind.Identifier) {
        p.parseFullTypeIdentifier(ref);
    } else {
        p.error("expected type specifier");
    }

    u32 depth = 0;
    while (p.tok.kind == Kind.Star) {
        depth++;
        if (depth > 3) p.error("pointers have a maximum nesting of 3");
        ref.addPointer();
        p.consumeToken();
    }
}

// Syntax:
//   identifier
//   identifier.identifier
func void Parser.parseFullTypeIdentifier(Parser* p, TypeRefHolder* ref) {
    ref.setUser(p.tok.loc, p.tok.text_idx);
    p.consumeToken();

    if (p.tok.kind == Kind.Dot) {
        p.consumeToken();
        p.expectIdentifier();
        ref.setPrefix(p.tok.loc, p.tok.text_idx);
        p.consumeToken();
    }
}

// TEMP here
func void Parser.dump_token(Parser* p, const Token* tok) {
    if (tok.kind >= Kind.KW_as && tok.kind <= Kind.KW_while) {
        printf("%s%10s%s  %s\n", color.Green, kind2str(tok.kind), color.Normal, p.info.sm.loc2str(tok.loc));
        return;
    }
    printf("%10s  %s  ", kind2str(tok.kind), p.info.sm.loc2str(tok.loc));
    switch (tok.kind) {
    case Identifier:
        printf("  %s%s%s", color.Cyan, p.info.pool.idx2str(tok.text_idx), color.Normal);
        break;
    case NumberLiteral:
        printf("  (%u) %s%s%s", tok.radix, color.Cyan, p.info.pool.idx2str(tok.text_idx), color.Normal);
        break;
    case CharLiteral:
        printf("  %s'%c'%s", color.Cyan, tok.char_value, color.Normal);
        break;
    case StringLiteral:
        printf("  %s\"%s\"%s", color.Cyan, p.info.pool.idx2str(tok.text_idx), color.Normal);
        break;
    case Warning:
        printf("  %s%s%s", color.Yellow, tok.error_msg, color.Normal);
        break;
    case Error:
        printf("  %s%s%s", color.Red, tok.error_msg, color.Normal);
        break;
    default:
        break;
    }
    printf("\n");
}

func bool checkName(const char* name, bool isInterface) {
    char c = name[0];
    if (islower(c)) return true;
    if (c == '_' && isInterface) return true;
    return false;
}



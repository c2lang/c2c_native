/* Copyright 2022 Bas van den Berg
 */

module c2_parser;

import source_mgr local;
import c2_tokenizer local;
import ast_builder local;
import ast local;
import string_pool;
import tokens local;
import string_list;
import utils local;
import color;

import stdarg local;
import stdlib local;
import csetjmp local;
import ctype local;
import stdio local;

public type Parser struct {
    Tokenizer tokenizer;
    Token tok;
    SourceMgr* sm;
    i32 file_id;
    Builder* builder;
    string_pool.Pool* pool;

    bool is_interface; // TODO query component for this

    JmpBufTag jmpbuf;
    string_list.List* features;
    // IDEA: dont have error_msg, but just ptr and alloc in pool? (less memory if ok)
    char[256] error_msg;
} @(opaque)

public func Parser* create(SourceMgr* sm, i32 file_id, ast_builder.Builder* builder, string_pool.Pool* pool, string_list.List* features, bool is_interface) {
    Parser* p = calloc(1, sizeof(Parser));
    p.sm = sm;
    p.builder = builder;
    p.file_id = file_id;
    p.pool = pool;
    p.is_interface = is_interface;
    p.features = features;
    return p;
}

public func void Parser.free(Parser* p) {
    free(p);
}

public func bool Parser.parse(Parser* p) {
    p.error_msg[0] = 0;

#if DumpTokens
    u64 t1 = utils.now();
    p.tokenizer.init(p.pool, p.sm.get_content(p.file_id), p.sm.get_offset(p.file_id), p.features);
    p.tok.init();
    u32 token_count = 0;
    while (p.tok.more) {
        p.tokenizer.lex(&p.tok);
        dump_token(p.sm, &p.tok);
        token_count++;
    }
    u64 t2 = utils.now();
    printf("--- %u tokens (%llu usec) ---\n", token_count, t2 - t1);
#else
    i32 res = setjmp(&p.jmpbuf);
    if (res == 0) {

        p.tokenizer.init(p.pool, p.sm.get_content(p.file_id), p.sm.get_offset(p.file_id), p.features);
        p.tok.init();

        p.consumeToken();

        p.parseModule();
        p.parseImports();

        while (p.tok.more) {
            p.parseTopLevel();
        }
    } else {
        printf("%s\n", p.error_msg);
        return false;
    }
#endif
    return true;
}

func void Parser.consumeToken(Parser* p) {
    p.tokenizer.lex(&p.tok);

    //dump_token(p.sm, &p.tok);

    if (p.tok.kind == Kind.Error) p.error(p.tok.error_msg);
}

func void Parser.expectAndConsume(Parser* p, Kind kind) {
    if (p.tok.kind == kind) {
        p.consumeToken();
        return;
    }

    p.error("expected %s got %s", kind2str(kind), kind2str(p.tok.kind));
}

func void Parser.expectIdentifier(Parser* p) {
    if (p.tok.kind == Kind.Identifier) return;

    p.error("expected identifier");
}

func void Parser.error(Parser* p, const char* format, ...) @(noreturn) {
    char* cp = p.error_msg;
    cp += sprintf(cp, "%s: %serror:%s ", p.sm.loc2str(p.tok.loc), color.Red, color.Normal);
    Va_list args;
    va_start(args, format);
    vsnprintf(cp, sizeof(p.error_msg)-1, format, args);
    va_end(args);
    longjmp(&p.jmpbuf, 1);
}

func void Parser.parseModule(Parser* p) {
    p.expectAndConsume(Kind.KW_module);
    p.expectIdentifier();

    p.builder.actOnModule(p.tok.text_value, p.tok.loc, p.sm.getFileName(p.file_id));
    p.consumeToken();
    p.expectAndConsume(Kind.Semicolon);
}

func void Parser.parseImports(Parser* p) {
    while (p.tok.kind == Kind.KW_import) {
        p.consumeToken();
        p.expectIdentifier();
        const char* mod_name = p.tok.text_value;
        u32 mod_loc = p.tok.loc;

        const char* alias_name = nil;
        u32 alias_loc = 0;
        p.consumeToken();
        if (p.tok.kind == Kind.KW_as) {
            p.consumeToken();
            p.expectIdentifier();
            alias_name = p.tok.text_value;
            alias_loc = p.tok.loc;
            p.consumeToken();
        }
        bool islocal = false;
        if (p.tok.kind == Kind.KW_local) {
            p.consumeToken();
            islocal = true;
        }
        p.expectAndConsume(Kind.Semicolon);

        p.builder.actOnImport(mod_name, mod_loc, alias_name, alias_loc, islocal);
    }
}

func void Parser.parseTopLevel(Parser* p) {
#if ParserDebug
    printf("parseTopLevel\n");
#endif
    // TODO need next-token for array-entry

    bool is_public = p.parseOptionalAccessSpecifier();
    switch (p.tok.kind) {
        case Kind.KW_func:
            p.parseFuncDef(is_public);
            break;
        case Kind.KW_import:
            p.error("import after decls");
            break;
        case Kind.KW_static_assert:
            if (is_public) p.error("static_assert cannot be public");
            p.parseStaticAssert();
            break;
        case Kind.KW_type:
            p.parseTypeDef(is_public);
            break;
        case Kind.Eof:
            break;
        default:
            p.parseVarDef(is_public);
            break;
    }
}

func void Parser.parseOptionalAttributes(Parser* p) {
#if ParserDebug
    printf("parseOptionalAttributes\n");
#endif
    if (p.tok.kind != Kind.At) return;
    p.consumeToken();

    p.expectAndConsume(Kind.LParen);

    while (1) {
        p.expectIdentifier();
        const char* attr_id = p.tok.text_value;
        u32 attr_loc = p.tok.loc;
        p.consumeToken();

        u32 end_loc = attr_loc;
        if (p.tok.kind == Kind.Equal) {
        }

        p.builder.actOnAttr(/*D,*/ attr_id, attr_loc, end_loc /*, arg.get()*/);

        if (p.tok.kind != Kind.Comma) break;
        p.consumeToken();
    }

    p.expectAndConsume(Kind.RParen);
}

func void Parser.parseFuncDef(Parser* p, bool is_public) {
#if ParserDebug
    printf("parseFuncDef\n");
#endif
    p.consumeToken();

    QualType rtype = p.parseSingleTypeSpecifier(true);

    p.expectIdentifier();
    const char* func_name = p.tok.text_value;
    u32 func_loc = p.tok.loc;
    p.consumeToken();

    IdentifierExpr* prefix = nil;
    if (p.tok.kind == Kind.Dot) {
        p.consumeToken();
        p.expectIdentifier();

        prefix = p.builder.actOnIdentifier(func_loc, func_name);
        func_name = p.tok.text_value;
        func_loc = p.tok.loc;
        p.consumeToken();
    }

    if (!checkName(func_name, p.is_interface)) {
        // TODO pass loc along (current not correct)
        p.error("TODO checkname");
    }

    DeclList params;
    params.init(4);

    bool is_variadic = p.parseFunctionParams(&params, is_public, true);
    FunctionDecl* f = p.builder.actOnFunctionDecl(func_name, func_loc, is_public, rtype, prefix, cast<VarDecl**>(params.getDecls()), params.size(), is_variadic);
    params.free();

    p.parseOptionalAttributes(); // (f)

    if (p.is_interface) {
        if (p.tok.kind == Kind.LBrace) {
            p.error("interface functions cannot have a function body");
        }
        p.expectAndConsume(Kind.Semicolon);
        return;
    }

    CompoundStmt* body = p.parseCompoundStmt();
    p.builder.actOnFunctionBody(f, body);
}

func bool Parser.parseFunctionParams(Parser* p, DeclList* params, bool is_public, bool allow_defaults) {
#if ParserDebug
    printf("parseFunctionParams\n");
#endif
    p.expectAndConsume(Kind.LParen);

    bool is_variadic = false;

    // fast path for ()
    if (p.tok.kind == Kind.RParen) {
        p.consumeToken();
        return is_variadic;
    }

    // VarDeclList args
    while (1) {
        VarDecl* decl = p.parseParamDecl(is_public, allow_defaults);
        params.add(decl.asDecl());

        // TODO check for duplicate names here (if name not empty)
        if (p.tok.kind != Kind.Comma) break;
        p.consumeToken();

        if (p.tok.kind == Kind.Ellipsis) {
            is_variadic = true;
            p.consumeToken();
            break;
        }
    }

    p.expectAndConsume(Kind.RParen);
    return is_variadic;
}

/*
   Syntax:
    param_declaration ::= type_qualifier type_specifier IDENTIFIER param_default.
    param_default ::= EQUALS constant_expression.
*/
func VarDecl* Parser.parseParamDecl(Parser* p, bool is_public, bool allow_defaults) {
#if ParserDebug
    printf("parseParamDecl\n");
#endif
    if (p.tok.kind == Kind.KW_local) p.error("invalid local");

    QualType qt = p.parseTypeSpecifier(true);

    const char* name;
    SrcLoc loc = p.tok.loc;
    if (p.tok.kind == Kind.Identifier) {
        name = p.tok.text_value;
        p.consumeToken();
    } else {
        name = nil;
    }

    Expr* initValue = nil;
    if (p.tok.kind == Kind.Equal) {
        if (!allow_defaults) p.error("parameter with default value not allowed here");
        p.consumeToken();
        initValue = p.parseExpr();
    }

    return p.builder.actOnFunctionParam(name, loc, is_public, qt, initValue);
}

func QualType Parser.parseTypeSpecifier(Parser* p, bool allow_qualifier) {
#if ParserDebug
    printf("parseTypeSpecifier\n");
#endif
    QualType qt = p.parseSingleTypeSpecifier(allow_qualifier);
    return p.parseOptionalArray(qt);
}

func QualType Parser.parseOptionalArray(Parser* p, QualType base) {
#if ParserDebug
    printf("parseOptionalArray\n");
#endif
    if (p.tok.kind != Kind.LSquare) return base;
    p.consumeToken();

    bool is_incremental = false;

    // NOTE: 'inverse' order, so char[2][4] -> 2 x ( 4 x char )

    Expr* size = nil;
    if (p.tok.kind == Kind.RSquare) {
        // "[]"
        p.consumeToken();
    }
    // TODO fastpath for number + ] (need NextToken)
    else if (p.tok.kind == Kind.Plus) {
        p.consumeToken();
        is_incremental = true;
        p.expectAndConsume(Kind.RSquare);
    } else {
        size = p.parseExpr();
        p.expectAndConsume(Kind.RSquare);
    }

    base = p.parseOptionalArray(base);
    return p.builder.actOnArrayType(base, is_incremental, size);
}

func void Parser.parseVarDef(Parser* p, bool is_public) {
#if ParserDebug
    printf("parseVarDef\n");
#endif
    if (p.tok.kind == Kind.KW_local) p.error("local cannot be used at file scope");

    QualType qt = p.parseTypeSpecifier(true);
    p.expectIdentifier();

    const char* name = p.tok.text_value;
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    bool need_semi = true;
    Expr* initValue = nil;

    p.parseOptionalAttributes(); // TODO need Decl*

    if (p.tok.kind == Kind.Equal) {
        p.consumeToken();
        initValue = p.parseInitValue(&need_semi, false);
    }

    if (need_semi) p.expectAndConsume(Kind.Semicolon);

    p.builder.actOnGlobalVarDecl(name, loc, is_public, qt, initValue);
}

func void Parser.parseStaticAssert(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    p.expectAndConsume(Kind.LParen);
    Expr* lhs = p.parseExpr();
    p.expectAndConsume(Kind.Comma);
    Expr* rhs = p.parseExpr();
    p.expectAndConsume(Kind.RParen);
    p.expectAndConsume(Kind.Semicolon);
    p.builder.actOnStaticAssert(loc, lhs, rhs);
}

func bool Parser.parseOptionalAccessSpecifier(Parser* p) {
    if (p.tok.kind == Kind.KW_public) {
        p.consumeToken();
        return true;
    }
    return false;
}

func u32 Parser.parseOptionalTypeQualifier(Parser* p) {
    u32 qualifiers = 0;
    if (p.tok.kind == Kind.KW_const) {
        p.consumeToken();
        qualifiers |= QualType_Const;
    }
    if (p.tok.kind == Kind.KW_volatile) {
        p.consumeToken();
        qualifiers |= QualType_Volatile;
    }
    return qualifiers;
}

func QualType Parser.parseSingleTypeSpecifier(Parser* p, bool allow_qualifier) {
    u32 type_qualifier = 0;

    if (allow_qualifier) type_qualifier = p.parseOptionalTypeQualifier();

    QualType base;

    switch (p.tok.kind) {
    case Kind.KW_u8:   fallthrough;
    case Kind.KW_u16:  fallthrough;
    case Kind.KW_u32:  fallthrough;
    case Kind.KW_u64:  fallthrough;
    case Kind.KW_usize:  fallthrough;
    case Kind.KW_i8:  fallthrough;
    case Kind.KW_i16:  fallthrough;
    case Kind.KW_i32:  fallthrough;
    case Kind.KW_i64:  fallthrough;
    case Kind.KW_isize:  fallthrough;
    case Kind.KW_f32:  fallthrough;
    case Kind.KW_f64:  fallthrough;
    case Kind.KW_reg8:  fallthrough;
    case Kind.KW_reg16:  fallthrough;
    case Kind.KW_reg32:  fallthrough;
    case Kind.KW_reg64:  fallthrough;
    case Kind.KW_char:  fallthrough;
    case Kind.KW_void:  fallthrough;
    case Kind.KW_bool:
        base = p.builder.actOnBuiltinType(p.tok.kind);
        p.consumeToken();
        break;
    case Kind.Identifier:
        base = p.parseFullTypeIdentifier();
        break;
    default:
        p.error("expected type specifier");
        break;
    }

    while (p.tok.kind == Kind.Star) {
        base = p.builder.actOnPointerType(base, type_qualifier);
        type_qualifier = 0;
        p.consumeToken();
    }
    return p.builder.actOnTypeQualifier(base, type_qualifier);
}

// Syntax:
//   identifier
//   identifier.identifier
func QualType Parser.parseFullTypeIdentifier(Parser* p) {

    IdentifierExpr* id = p.builder.actOnIdentifier(p.tok.loc, p.tok.text_value);
    p.consumeToken();

    IdentifierExpr* prefix = nil;

    if (p.tok.kind == Kind.Dot) {
        p.consumeToken();
        p.expectIdentifier();
        prefix = id;
        id = p.builder.actOnIdentifier(p.tok.loc, p.tok.text_value);
        p.consumeToken();
    }
    return p.builder.actOnRefType(id, prefix);
}

// TEMP here
public func void dump_token(SourceMgr* sm, const Token* tok) {
    if (tok.kind >= Kind.KW_as && tok.kind <= Kind.KW_while) {
        printf("%s%10s%s  %s\n", color.Green, kind2str(tok.kind), color.Normal, sm.loc2str(tok.loc));
        return;
    }
    printf("%10s  %s  ", kind2str(tok.kind), sm.loc2str(tok.loc));
    switch (tok.kind) {
    case Kind.Identifier:
        printf("  %s%s%s", color.Cyan, tok.text_value, color.Normal);
        break;
    case Kind.NumberLiteral:
        printf("  (%u) %s%s%s", tok.radix, color.Cyan, tok.text_value, color.Normal);
        break;
    case Kind.CharLiteral:
        printf("  %s'%c'%s", color.Cyan, tok.char_value, color.Normal);
        break;
    case Kind.StringLiteral:
        printf("  %s\"%s\"%s", color.Cyan, tok.text_value, color.Normal);
        break;
    case Kind.Warning:
        printf("  %s%s%s", color.Yellow, tok.error_msg, color.Normal);
        break;
    case Kind.Error:
        printf("  %s%s%s", color.Red, tok.error_msg, color.Normal);
        break;
    default:
        break;
    }
    printf("\n");
}

func bool checkName(const char* name, bool isInterface) {
    char c = name[0];
    if (islower(c)) return true;
    if (c == '_' && isInterface) return true;
    return false;
}



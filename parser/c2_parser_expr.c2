/* Copyright 2022 Bas van den Berg
*/

module c2_parser;

import c2_tokenizer local;
import ast_builder local;   // is used!!
import ast local;
import ast_list;
import tokens local;
import utils local;
#if ParserDebug
import stdio local;
#endif

/// PrecedenceLevels - These have been altered from C99 to C2
/// In particular, addition now comes after bitwise and shifts
/// Bitwise is directly after shift and equality and relational have
/// the same precedence.

type Prec enum u8 {
    Unknown         = 0,    // Not binary operator.
    Comma           = 1,    // ,
    Assignment      = 2,    // =, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |=
    Conditional     = 3,    // ?
    LogicalAndOr    = 4,    // &&, ||
    Relational      = 5,    // ==, !=, >=, <=, >, <
    Additive        = 6,    // -, +
    Bitwise         = 7,    // ^, |, &
    Shift           = 8,    // <<, >>
    Multiplicative  = 9,    // *, /, %
}

func Expr* Parser.parseExpr(Parser* p) {
#if ParserDebug
    printf("parseExpr\n");
#endif
    Expr* lhs = p.parseAssignmentExpression();
    return p.parseRHSOfBinaryExpression(lhs, Prec.Comma);
}

func Expr* Parser.parseAssignmentExpression(Parser* p) {
#if ParserDebug
    printf("parseAssignmentExpression\n");
#endif
    Expr* lhs = p.parseCastExpr(false, false);
    return p.parseRHSOfBinaryExpression(lhs, Prec.Assignment);
}

const u8[128] BinOpPrecLookup = {
    [Kind.Comma] = Prec.Comma,

    [Kind.Equal] = Prec.Assignment,
    [Kind.StarEqual] = Prec.Assignment,
    [Kind.SlashEqual] = Prec.Assignment,
    [Kind.PercentEqual] = Prec.Assignment,
    [Kind.PlusEqual] = Prec.Assignment,
    [Kind.MinusEqual] = Prec.Assignment,
    [Kind.LessLessEqual] = Prec.Assignment,
    [Kind.GreaterGreaterEqual] = Prec.Assignment,
    [Kind.AmpEqual] = Prec.Assignment,
    [Kind.CaretEqual] = Prec.Assignment,
    [Kind.PipeEqual] = Prec.Assignment,

    [Kind.Question] = Prec.Conditional,

    [Kind.PipePipe] = Prec.LogicalAndOr,
    [Kind.AmpAmp] = Prec.LogicalAndOr,

    [Kind.ExclaimEqual] = Prec.Relational,
    [Kind.EqualEqual] = Prec.Relational,
    [Kind.LessEqual] = Prec.Relational,
    [Kind.Less] = Prec.Relational,
    [Kind.Greater] = Prec.Relational,
    [Kind.GreaterEqual] = Prec.Relational,

    [Kind.Plus] = Prec.Additive,
    [Kind.Minus] = Prec.Additive,

    [Kind.Pipe] = Prec.Bitwise,
    [Kind.Caret] = Prec.Bitwise,
    [Kind.Amp] = Prec.Bitwise,

    [Kind.LessLess] = Prec.Shift,
    [Kind.GreaterGreater] = Prec.Shift,

    [Kind.Percent] = Prec.Multiplicative,
    [Kind.Slash] = Prec.Multiplicative,
    [Kind.Star] = Prec.Multiplicative,
}

func Expr* Parser.parseRHSOfBinaryExpression(Parser* p, Expr* lhs, Prec minPrec) {
#if ParserDebug
    printf("parseRHSOfBinaryExpression\n");
#endif
    Prec nextTokPrec = BinOpPrecLookup[p.tok.kind];

    SrcLoc colonLoc = 0;
    while (1) {
        if (nextTokPrec < minPrec) return lhs;

        if (p.tok.kind == Kind.Comma) return lhs;

        Token opToken = p.tok;
        p.consumeToken();

        Expr* ternaryMiddle = nil;
        if (nextTokPrec == Prec.Conditional) {
            if (p.tok.kind == Kind.Colon) {
                p.error("TODO conditional expr"); // or warning?
            } else {
                ternaryMiddle = p.parseExpr();
            }

            if (p.tok.kind == Kind.Colon) {
                colonLoc = p.tok.loc;
                p.consumeToken();
            }
        }

        Expr* rhs = p.parseCastExpr(false, false);

        Prec thisPrec = nextTokPrec;
        nextTokPrec = BinOpPrecLookup[p.tok.kind];

        bool isRightAssoc = (thisPrec == Prec.Conditional || thisPrec == Prec.Assignment);

        if (thisPrec < nextTokPrec || (thisPrec == nextTokPrec && isRightAssoc)) {
            rhs = p.parseRHSOfBinaryExpression(rhs, thisPrec + !isRightAssoc);

            nextTokPrec = BinOpPrecLookup[p.tok.kind];
        }

        if (ternaryMiddle) {
            lhs = p.builder.actOnConditionalOperator(opToken.loc, colonLoc, lhs, ternaryMiddle, rhs);
        } else {
            lhs = p.builder.actOnBinaryOperator(opToken.loc, opToken.kind, lhs, rhs);
        }
    }
    return nil;
}

const u8[128] CastExprTokenLookup = {
    // TODO order actions by frequency (less jump)
    //[Kind.Comma] = Prec.Comma,
    [Kind.Identifier] = 1,
    [Kind.NumberLiteral] = 2,
    [Kind.CharLiteral] = 3,
    [Kind.StringLiteral] = 4,
    [Kind.LParen] = 5,
    [Kind.Star] = 6,
    [Kind.Tilde] = 6,
    [Kind.Minus] = 6,
    [Kind.Exclaim] = 6,
    [Kind.Amp] = 7,
    [Kind.KW_cast] = 8,
    [Kind.Plus] = 9,
    [Kind.PlusPlus] = 10,
    [Kind.MinusMinus] = 10,
    [Kind.KW_elemsof] = 11,
    [Kind.KW_enum_min] = 12,
    [Kind.KW_enum_max] = 12,
    [Kind.KW_false] = 13,
    [Kind.KW_true] = 13,
    [Kind.KW_nil] = 14,
    [Kind.KW_offsetof] = 15,
    [Kind.KW_sizeof] = 16,
    [Kind.KW_to_container] = 17,
}

func Expr* Parser.parseCastExpr(Parser* p, bool isUnaryExpr, bool isAddrOfOp) {
#if ParserDebug
    printf("parseCastExpression\n");
#endif
    // This handles all of cast-expression, unary-expression, postfix-expression,
    // and primary-expression.  We handle them together like this for efficiency
    // and to simplify handling of an expression starting with a '(' token: which
    // may be one of a parenthesized expression, cast-expression, compound literal
    // expression, or statement expression.
    //
    // If the parsed tokens consist of a primary-expression, the cases below
    // break out of the switch;  at the end we call ParsePostfixExpressionSuffix
    // to handle the postfix expression suffixes.  Cases that cannot be followed
    // by postfix exprs should return without invoking
    // ParsePostfixExpressionSuffix.

    Kind savedKind = p.tok.kind;
    Expr* res = nil;

    switch (CastExprTokenLookup[savedKind]) {
    case 0:
        p.error("syntax error");
        break;
    case 1:
        res = p.parseIdentifier().asExpr();
/*
        // Make sure to pass down the right value for isAddressOfOperand.
        if (isAddressOfOperand && isPostfixExpressionSuffixStart())
            isAddressOfOperand = false;
*/
        break;
    case 2:
        // TODO pass radix, base, etc
        res = p.builder.actOnIntegerLiteral(p.tok.loc, p.tok.text_value);
        p.consumeToken();
        break;
    case 3:
        res = p.builder.actOnCharLiteral(p.tok.loc, p.tok.char_value);
        p.consumeToken();
        break;
    case 4:
        res = p.parseStringLiteral();
        break;
    case 5:
        res = p.parseParenExpr();
        break;
    case 6:
        SrcLoc loc = p.tok.loc;
        p.consumeToken();
        res = p.parseCastExpr(false, false);
        return p.builder.actOnUnaryOperator(loc, savedKind, res);
    case 7:
        SrcLoc loc = p.tok.loc;
        p.consumeToken();
        res = p.parseCastExpr(false, true);
        return p.builder.actOnUnaryOperator(loc, savedKind, res);
    case 8:
        return p.parseExplicitCastExpr();
    case 9:
        // ignore unary +
        p.consumeToken();
        return p.parseCastExpr(false, false);
    case 10:
        SrcLoc loc = p.tok.loc;
        p.consumeToken();
        res = p.parseCastExpr(false, false);
        return p.builder.actOnUnaryOperator(loc, savedKind, res);
    case 11:
        res = p.parseElemsof();
        break; // TODO not return?
    case 12:
        return p.parseEnumMinMax(savedKind == Kind.KW_enum_min);
    case 13:
        res = p.builder.actOnBooleanConstant(p.tok.loc, savedKind == Kind.KW_true);
        p.consumeToken();
        break;
    case 14:
        res = p.builder.actOnNilExpr(p.tok.loc);
        p.consumeToken();
        break;
    case 15:
        return p.parseOffsetOfExpr();
    case 16:
        return p.parseSizeof();
    case 17:
        return p.parseToContainerExpr();
    }
    return p.parsePostfixExprSuffix(res);
}

func Expr* Parser.parsePostfixExprSuffix(Parser* p, Expr* lhs) {
#if ParserDebug
    printf("parsePostfixExprSuffix\n");
#endif

    while (1) {
        switch (p.tok.kind) {
        case Kind.Identifier:
            return lhs;
        case Kind.LParen:
            // C2: can only be call expr?
            lhs = p.parseCallExpr(lhs);
            break;
        case Kind.LSquare:
            p.consumeToken();
            Expr* idx = p.parseExpr();
            if (p.tok.kind  == Kind.Colon) {
                // BitOffset <expr> : <expr>
                SrcLoc colLoc = p.tok.loc;
                p.consumeToken();
                Expr* rhs = p.parseExpr();
                // TODO need colLoc?
                idx = p.builder.actOnBitOffsetExpr(colLoc, idx, rhs);
            }
            SrcLoc rloc = p.tok.loc;
            p.expectAndConsume(Kind.RSquare);
            lhs = p.builder.actOnArraySubscriptExpr(rloc, lhs, idx);
            break;
        case Kind.Dot:
            SrcLoc dot_loc = p.tok.loc;
            p.consumeToken();
            p.expectIdentifier();
            IdentifierExpr* rhs = p.parseIdentifier();
            lhs = p.builder.actOnMemberExpr(dot_loc, lhs, rhs);
            break;
        case Kind.PlusPlus: fallthrough;
        case Kind.MinusMinus:
            lhs = p.builder.actOnPostFixUnaryOperator(p.tok.loc, p.tok.kind, lhs);
            p.consumeToken();
            break;
        default:
            return lhs;
        }
    }
    // TODO should not come here
    return nil;
}

func Expr* Parser.parseCallExpr(Parser* p, Expr* fn) {
#if ParserDebug
    printf("parseCallExpr\n");
#endif
    p.consumeToken(); // '('

    ast_list.ExprList args;
    args.init(4);

    while (p.tok.kind != Kind.RParen) {

        args.add(p.parseExpr());

        if (p.tok.kind == Kind.RParen) break;
        p.expectAndConsume(Kind.Comma);
    }
    p.expectAndConsume(Kind.RParen);
    return p.builder.actOnCallExpr(fn, args.getExprs(), args.size());
}


func IdentifierExpr* Parser.parseIdentifier(Parser* p) {
    IdentifierExpr* e = p.builder.actOnIdentifier(p.tok.loc, p.tok.text_value);
    p.consumeToken();
    return e;
}

func Expr* Parser.parseStringLiteral(Parser* p) {
    Expr* e = p.builder.actOnStringLiteral(p.tok.loc, p.tok.text_value);
    p.consumeToken();
    return e;
}

func Expr* Parser.parseParenExpr(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    Expr* res = p.parseExpr();
    p.expectAndConsume(Kind.RParen);

    return p.builder.actOnParenExpr(loc, res);
}

func Expr* Parser.parseSizeof(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    p.expectAndConsume(Kind.LParen);

    Expr* res = nil;

    switch (p.tok.kind) {
    case Kind.Identifier:
/*
    if (canBeParsedAsStructType()) {
            Res = ParseTypeSpecifier(false);
            break;
        }
    }
*/
        fallthrough;
    case Kind.KW_char: fallthrough;
    case Kind.KW_f32: fallthrough;
    case Kind.KW_f64: fallthrough;
    case Kind.KW_i8:  fallthrough;
    case Kind.KW_i16: fallthrough;
    case Kind.KW_i32: fallthrough;
    case Kind.KW_i64: fallthrough;
    case Kind.KW_isize: fallthrough;
    case Kind.KW_reg8:  fallthrough;
    case Kind.KW_reg16: fallthrough;
    case Kind.KW_reg32: fallthrough;
    case Kind.KW_reg64: fallthrough;
    case Kind.KW_u8:  fallthrough;
    case Kind.KW_u16: fallthrough;
    case Kind.KW_u32: fallthrough;
    case Kind.KW_u64: fallthrough;
    case Kind.KW_usize: fallthrough;
    case Kind.KW_void:
        res = p.builder.actOnTypeExpr(p.tok.loc, p.parseTypeSpecifier(false));
        break;
    default:
        res = p.parseExpr();
        break;
    }

    p.expectAndConsume(Kind.RParen);
    return p.builder.actOnBuiltinExpr(loc, res, BuiltinExprKind.Sizeof);
}

func Expr* Parser.parseElemsof(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    p.expectAndConsume(Kind.LParen);

    p.expectIdentifier();

    Expr* res = p.parseIdentifier().asExpr();
    res = p.parsePostfixExprSuffix(res);

    p.expectAndConsume(Kind.RParen);
    return p.builder.actOnBuiltinExpr(loc, res, BuiltinExprKind.Elemsof);
}

func Expr* Parser.parseInitValue(Parser* p, bool* need_semi, bool allow_designators) {
    switch (p.tok.kind) {
    case Kind.LBrace:
        *need_semi = false;
        return p.parseInitList();
    case Kind.Dot:
        if (!allow_designators) p.error("designator not allowed here");
        return p.parseFieldDesignator(need_semi);
    case Kind.LSquare:
        if (!allow_designators) p.error("designator not allowed here");
        return p.parseArrayDesignator(need_semi);
    default:
        break;
    }
    *need_semi = true;
    return p.parseAssignmentExpression();
}

func Expr* Parser.parseInitList(Parser* p) {
    SrcLoc left = p.tok.loc;
    p.expectAndConsume(Kind.LBrace);

    ast_list.ExprList values;
    values.init(8);

    while (p.tok.kind != Kind.RBrace) {
        bool unused;
        Expr* e = p.parseInitValue(&unused, true);
        values.add(e);
        if (p.tok.kind == Kind.Comma) {
            p.consumeToken();
        } else {
            break;
        }
    }

    SrcLoc right = p.tok.loc;
    p.expectAndConsume(Kind.RBrace);
    Expr* e = p.builder.actOnInitList(left, right, values.getExprs(), values.size());
    values.free();
    return e;
}

func Expr* Parser.parseFieldDesignator(Parser* p, bool* need_semi) {
    p.consumeToken();   // .
    p.expectIdentifier();
    const char* field = p.tok.text_value;
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    p.expectAndConsume(Kind.Equal);
    Expr* value = p.parseInitValue(need_semi, false);

    return p.builder.actOnFieldDesignatedInit(field, loc, value);
}

func Expr* Parser.parseArrayDesignator(Parser* p, bool* need_semi) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();   // '['

    Expr* designator = p.parseAssignmentExpression();
    p.expectAndConsume(Kind.RSquare);
    p.expectAndConsume(Kind.Equal);

    Expr* initValue = p.parseInitValue(need_semi, false);
    return p.builder.actOnArrayDesignatedInit(loc, designator, initValue);
}

func Expr* Parser.parseExplicitCastExpr(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    p.expectAndConsume(Kind.Less);
    QualType qt = p.parseTypeSpecifier(true);
    p.expectAndConsume(Kind.Greater);

    p.expectAndConsume(Kind.LParen);
    Expr* expr = p.parseExpr();
    p.expectAndConsume(Kind.RParen);

    return p.builder.actOnExplicitCast(loc, qt, expr);
}

// Syntax:
//   'enum_min' '(' type-name ')'
//   'enum_max' '(' type-name ')'
func Expr* Parser.parseEnumMinMax(Parser* p, bool is_min) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();
    p.expectAndConsume(Kind.LParen);

    p.expectIdentifier();
    Expr* expr = p.parseExpr();
    p.expectAndConsume(Kind.RParen);

    return p.builder.actOnBuiltinExpr(loc, expr, is_min ? BuiltinExprKind.EnumMin : BuiltinExprKind.EnumMax);
}

func Expr* Parser.parseOffsetOfExpr(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();
    p.expectAndConsume(Kind.LParen);

    Expr* structExpr = p.parseFullIdentifier();

    p.expectAndConsume(Kind.Comma);

    Expr* member = p.parseFullIdentifier();

    p.expectAndConsume(Kind.RParen);

    return p.builder.actOnOffsetOfExpr(loc, structExpr, member);
}

func Expr* Parser.parseToContainerExpr(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();
    p.expectAndConsume(Kind.LParen);

    Expr* structExpr = p.parseFullIdentifier();

    p.expectAndConsume(Kind.Comma);

    Expr* member = p.parseFullIdentifier();

    p.expectAndConsume(Kind.Comma);

    Expr* pointer = p.parseExpr();

    p.expectAndConsume(Kind.RParen);

    return p.builder.actOnToContainerExpr(loc, structExpr, member, pointer);
}

// Syntax:
//   identifier
//   identifier.identifier
//   identifier.identifier.identifier etc
func Expr* Parser.parseFullIdentifier(Parser* p) {
    p.expectIdentifier();
    Expr* res = p.parseIdentifier().asExpr();

    while (p.tok.kind == Kind.Dot) {
        SrcLoc dot_loc = p.tok.loc;
        p.consumeToken();
        p.expectIdentifier();
        IdentifierExpr* rhs = p.parseIdentifier();

        res = p.builder.actOnMemberExpr(dot_loc, res, rhs);
    }
    return res;
}


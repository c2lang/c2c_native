/* Copyright 2022 Bas van den Berg
*/

module c2_parser;

import ast_builder local;
import ast local;
import tokens local;
import utils local;

func Stmt* Parser.parseStmt(Parser* p) {
    // NOTE: keep in order
    switch (p.tok.kind) {
    case Kind.LBrace:
        return p.parseCompoundStmt();
    case Kind.KW_if:
        return p.parseIfStmt();
    case Kind.KW_return:
        return p.parseReturnStmt();
    case Kind.KW_while:
        return p.parseWhileStmt();
    default:
        return nil; // TEMP
        break;
    }
    return nil;
}

func Stmt* Parser.parseCompoundStmt(Parser* p) {
    p.expectAndConsume(Kind.LBrace);

    // StmtList stmts;
    while (1) {
        if (p.tok.kind == Kind.RBrace) break;

        Stmt* s = p.parseStmt();
        // stmts.add(s);
    }

    p.expectAndConsume(Kind.RBrace);

    p.builder.actOnCompoundStmt(/* stmts */);

    return nil;
}

func Expr* Parser.parseCondition(Parser* p) {
    p.expectAndConsume(Kind.LParen);
    Expr* cond = p.parseExpr();
    p.expectAndConsume(Kind.RParen);
    return cond;
}

func Stmt* Parser.parseIfStmt(Parser* p) {
    p.consumeToken();

    Expr* cond = p.parseCondition();
    Stmt* then = p.parseStmt();

    Stmt* else_stmt = nil;
    if (p.tok.kind == Kind.KW_else) {
        p.consumeToken();
        else_stmt = p.parseStmt();
    }

    return p.builder.actOnIfStmt(cond, then, else_stmt);
}

func Stmt* Parser.parseReturnStmt(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    Expr* ret = nil;
    if (p.tok.kind != Kind.Semicolon) {
        ret = p.parseExpr();
    }

    p.expectAndConsume(Kind.Semicolon);
    return p.builder.actOnReturnStmt(loc, ret);
}

func Stmt* Parser.parseWhileStmt(Parser* p) {
    p.consumeToken();

    Expr* cond = p.parseCondition();
    Stmt* then = p.parseStmt();

    return p.builder.actOnWhileStmt(cond, then);
}


/* Copyright 2022 Bas van den Berg
*/

module c2_parser;

import ast_builder local;
import c2_tokenizer local;
import ast_utils local;
import ast local;
import tokens local;
import utils local;

#if 0
const u8[] StmtLookup[] = {
    switch (p.tok.kind) {
    case Kind.Identifier:
        return p.parseDeclOrStmt();
    case Kind.LBrace:
        return cast<Stmt*>(p.parseCompoundStmt());
    case Kind.RBrace:
        p.error("expected stmt");
        break;
    case Kind.KW_break:
        return p.parseBreakStmt();
    case Kind.KW_continue:
        return p.parseContinueStmt();
    case Kind.KW_do:
        return p.parseDoStmt();
    case Kind.KW_fallthrough:
        return p.parseFallthroughStmt();
    case Kind.KW_for:
        return p.parseForStmt();
    case Kind.KW_goto:
        return p.parseGotoStmt();
    case Kind.KW_if:
        return p.parseIfStmt();
    case Kind.KW_return:
        return p.parseReturnStmt();
    case Kind.KW_switch:
        return p.parseSwitchStmt();
    case Kind.KW_bool:   fallthrough;
    case Kind.KW_char:   fallthrough;
    case Kind.KW_const:   fallthrough;
    case Kind.KW_i8:    fallthrough;
    case Kind.KW_i16:   fallthrough;
    case Kind.KW_i32:   fallthrough;
    case Kind.KW_i64:   fallthrough;
    case Kind.KW_isize:   fallthrough;
    case Kind.KW_f32:   fallthrough;
    case Kind.KW_f64:   fallthrough;
    case Kind.KW_local:   fallthrough;
    case Kind.KW_reg8:    fallthrough;
    case Kind.KW_reg16:   fallthrough;
    case Kind.KW_reg32:   fallthrough;
    case Kind.KW_reg64:   fallthrough;
    case Kind.KW_u8:    fallthrough;
    case Kind.KW_u16:   fallthrough;
    case Kind.KW_u32:   fallthrough;
    case Kind.KW_u64:   fallthrough;
    case Kind.KW_usize:   fallthrough;
    case Kind.KW_volatile:   fallthrough;
    case Kind.KW_void:
        return p.parseDeclStmt(true, true);
    case Kind.KW_while:
        return p.parseWhileStmt();
    default:
        return p.parseExprStmt();
    }
}
#endif

func Stmt* Parser.parseStmt(Parser* p) {
#if ParserDebug
    printf("parseStmt\n");
#endif
    // TODO use Jump Table (combined one for multiple purposes?)
    // TODO also jump to Expr part, since most entries use parseExprStmt (dont lookup again in Expr)
    switch (p.tok.kind) {
    case Kind.Identifier:
        return p.parseDeclOrStmt();
    case Kind.LBrace:
        return cast<Stmt*>(p.parseCompoundStmt());
    case Kind.RBrace:
        p.error("expected stmt");
        break;
    case Kind.KW_break:
        return p.parseBreakStmt();
    case Kind.KW_continue:
        return p.parseContinueStmt();
    case Kind.KW_do:
        return p.parseDoStmt();
    case Kind.KW_fallthrough:
        return p.parseFallthroughStmt();
    case Kind.KW_for:
        return p.parseForStmt();
    case Kind.KW_goto:
        return p.parseGotoStmt();
    case Kind.KW_if:
        return p.parseIfStmt();
    case Kind.KW_return:
        return p.parseReturnStmt();
    case Kind.KW_switch:
        return p.parseSwitchStmt();
    case Kind.KW_bool:   fallthrough;
    case Kind.KW_char:   fallthrough;
    case Kind.KW_const:   fallthrough;
    case Kind.KW_i8:    fallthrough;
    case Kind.KW_i16:   fallthrough;
    case Kind.KW_i32:   fallthrough;
    case Kind.KW_i64:   fallthrough;
    case Kind.KW_isize:   fallthrough;
    case Kind.KW_f32:   fallthrough;
    case Kind.KW_f64:   fallthrough;
    case Kind.KW_local:   fallthrough;
    case Kind.KW_reg8:    fallthrough;
    case Kind.KW_reg16:   fallthrough;
    case Kind.KW_reg32:   fallthrough;
    case Kind.KW_reg64:   fallthrough;
    case Kind.KW_u8:    fallthrough;
    case Kind.KW_u16:   fallthrough;
    case Kind.KW_u32:   fallthrough;
    case Kind.KW_u64:   fallthrough;
    case Kind.KW_usize:   fallthrough;
    case Kind.KW_volatile:   fallthrough;
    case Kind.KW_void:
        return p.parseDeclStmt(true, true);
    case Kind.KW_while:
        return p.parseWhileStmt();
    default:
        return p.parseExprStmt();
    }
    return nil;
}

/*
    Declarations (type + name)
        a* b <init> -> yes
        a[] b <init> -> yes
        a[10] b -> yes
        a*[] b <init> -> yes
        a b <init> -> yes
        a.b c -> yes
    Assignments/Function calls
        a = ..     -> no
        a *= .. etc -> no
        a() -> no
        a[10] = .. -> no
        a.b.c .. -> no
        a->b -> no
        a.b->.. -> no
    // NOTE: Tok is first identifier
*/
func bool Parser.isTypeSpec(Parser* p) {
    Token t;

    // State: 0 = ID1, 1 = ID2, 2 = pointers, 3 = arrays
    u32 state = 0;
    u32 lookahead = 1;
    while (1) {
        Token t2 = p.tokenizer.lookahead(lookahead);
        switch (t2.kind) {
        case Kind.Identifier:
            goto type_done;
        case Kind.LSquare:
            lookahead = p.skipArray(lookahead);
            state = 3;
            break;
        case Kind.Star:
            if (state == 3) return false; // a[1] * ..
            state = 2;
            lookahead++;
            break;
        case Kind.Dot:
            if (state == 0) {
                Token t3 = p.tokenizer.lookahead(lookahead+1);
                if (t3.kind != Kind.Identifier) {
                    // syntax error
                    return false;
                }
                state = 2;
                lookahead += 2;
            } else {
                return false; // a.b.c
            }
            break;
        default:
            goto type_done;
        }
    }
type_done:
    // if token after type is identifier, it's a decl, otherwise it's not
    t = p.tokenizer.lookahead(lookahead);
    return t.kind == Kind.Identifier;
}

func u32 Parser.skipArray(Parser* p, u32 lookahead) {
    lookahead++;

    u32 depth =1;
    while (depth) {
        Token next = p.tokenizer.lookahead(lookahead);
        switch (next.kind) {
        case Kind.LSquare:
            depth++;
            break;
        case Kind.RSquare:
            depth--;
            break;
        case Kind.Eof:
            p.error("unexpected end-of-file");
            break;
        default:
            break;
        }
        lookahead++;
    }

    return lookahead;
}

/*
  Syntax:
    Number num = .     // id = type
    Utils.Type t = .  // id = module.type
    myfunc()        // id = func
    Mod.func()     // id = module.func
    count =         // id = var
    Mod.var =      // id = module.var
    id:             // id = label
*/
func Stmt* Parser.parseDeclOrStmt(Parser* p) {
    // assert(p.tok.kind == Kind.Identifier);
    bool isDecl = p.isTypeSpec();

    if (isDecl) return p.parseDeclStmt(true, true);

    Token next = p.tokenizer.lookahead(1);
    if (next.kind == Kind.Colon) return p.parseLabelStmt();

    return p.parseExprStmt();
}

func CompoundStmt* Parser.parseCompoundStmt(Parser* p) {
#if ParserDebug
    printf("parseCompoundStmt\n");
#endif
    p.expectAndConsume(Kind.LBrace);

    StmtList stmts;
    stmts.init();   // TODO register somewhere to free memory on error (register handler?)

    while (1) {
        if (p.tok.kind == Kind.RBrace) break;

        Stmt* s = p.parseStmt();
        stmts.add(s);
    }

    p.expectAndConsume(Kind.RBrace);

    CompoundStmt* s = p.builder.actOnCompoundStmt(stmts.getData(), stmts.size());
    stmts.free();

    return s;
}

func Stmt* Parser.parseBreakStmt(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    p.expectAndConsume(Kind.Semicolon);
    return p.builder.actOnBreakStmt(loc);
}

func Stmt* Parser.parseContinueStmt(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    p.expectAndConsume(Kind.Semicolon);
    return p.builder.actOnContinueStmt(loc);
}

func Stmt* Parser.parseFallthroughStmt(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    p.expectAndConsume(Kind.Semicolon);
    return p.builder.actOnFallthroughStmt(loc);
}

func Stmt* Parser.parseCondition(Parser* p) {
    p.expectAndConsume(Kind.LParen);

    Stmt* s;
    if (p.isDeclaration()) {
        p.error("TODO parseCondition");
        s = nil;
    } else {
        Expr* cond = p.parseExpr();
        s = cond.asStmt();
    }
    p.expectAndConsume(Kind.RParen);
    return s;
}

func Stmt* Parser.parseIfStmt(Parser* p) {
    p.consumeToken();

    Stmt* cond = p.parseCondition();
    Stmt* then = p.parseStmt();

    Stmt* else_stmt = nil;
    if (p.tok.kind == Kind.KW_else) {
        p.consumeToken();
        else_stmt = p.parseStmt();
    }

    return p.builder.actOnIfStmt(cond, then, else_stmt);
}

func Stmt* Parser.parseReturnStmt(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    Expr* ret = nil;
    if (p.tok.kind != Kind.Semicolon) {
        ret = p.parseExpr();
    }

    p.expectAndConsume(Kind.Semicolon);
    return p.builder.actOnReturnStmt(loc, ret);
}

func Stmt* Parser.parseSwitchStmt(Parser* p) {
    p.consumeToken();
    Stmt* cond = p.parseCondition();

    p.expectAndConsume(Kind.LBrace);

    StmtList cases;
    cases.init();

    while (p.tok.kind != Kind.RBrace) {
        Stmt* c = nil;
        switch (p.tok.kind) {
        case Kind.KW_case:
            c = p.parseCaseStmt();
            break;
        case Kind.KW_default:
            c = p.parseDefaultStmt();
            break;
        default:
            p.error("expected case or default");
            break;
        }
        cases.add(c);
    }

    p.expectAndConsume(Kind.RBrace);

    Stmt* s = p.builder.actOnSwitchStmt(cond, cases.getData(), cases.size());
    cases.free();
    return s;
}

func Stmt* Parser.parseCaseStmt(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    Expr* cond = p.parseExpr();

    p.expectAndConsume(Kind.Colon);

    StmtList stmts;
    stmts.init();

    bool more = true;
    while (more) {
        switch (p.tok.kind) {
        case Kind.RBrace: fallthrough;
        case Kind.KW_case:  fallthrough;
        case Kind.KW_default:
            more = false;
            break;
        default:
            stmts.add(p.parseStmt());
            break;
        }
    }

    Stmt* s = p.builder.actOnCaseStmt(loc, cond, stmts.getData(), stmts.size());
    stmts.free();
    return s;
}

func Stmt* Parser.parseDefaultStmt(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    p.expectAndConsume(Kind.Colon);

    StmtList stmts;
    stmts.init();

    bool more = true;
    while (more) {
        switch (p.tok.kind) {
        case Kind.RBrace: fallthrough;
        case Kind.KW_case:  fallthrough;
        case Kind.KW_default:
            more = false;
            break;
        default:
            stmts.add(p.parseStmt());
            break;
        }
    }

    Stmt* s = p.builder.actOnDefaultStmt(loc, stmts.getData(), stmts.size());
    stmts.free();
    return s;
}

func Stmt* Parser.parseDoStmt(Parser* p) {
    p.consumeToken();

    Stmt* then = p.parseStmt();
    p.expectAndConsume(Kind.KW_while);
    Stmt* cond = p.parseCondition();

    p.expectAndConsume(Kind.Semicolon);
    return p.builder.actOnDoStmt(cond, then);
}

func Stmt* Parser.parseForStmt(Parser* p) {
    p.consumeToken();

    p.expectAndConsume(Kind.LParen);

    // init
    Stmt* init_ = nil;
    if (p.tok.kind != Kind.Semicolon) {
        if (p.isDeclaration()) {
            init_ = p.parseDeclStmt(false, false);
        } else {
            init_ = p.parseExprStmt();
        }
    }
    p.expectAndConsume(Kind.Semicolon);

    // cond
    Stmt* cond = nil;
    if (p.tok.kind != Kind.Semicolon) {
        cond = p.parseExpr().asStmt();
    }
    p.expectAndConsume(Kind.Semicolon);

    // incr
    Expr* incr = nil;
    if (p.tok.kind != Kind.RParen) {
        incr = p.parseExpr();
    }
    p.expectAndConsume(Kind.RParen);

    Stmt* body = p.parseStmt();

    return p.builder.actOnForStmt(init_, cond, incr, body);
}

func Stmt* Parser.parseWhileStmt(Parser* p) {
    p.consumeToken();

    Stmt* cond = p.parseCondition();
    Stmt* then = p.parseStmt();

    return p.builder.actOnWhileStmt(cond, then);
}

func Stmt* Parser.parseDeclStmt(Parser* p, bool checkSemi, bool allowLocal) {
#if ParserDebug
    printf("parseDeclStmt\n");
#endif
    bool has_local = false;
    if (p.tok.kind == Kind.KW_local) {
        has_local = true;
        if (!allowLocal) p.error("local is not allowed here");
        p.consumeToken();
    }

    QualType qt = p.parseTypeSpecifier(true);

    p.expectIdentifier();

    const char* name = p.tok.text_value;
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    // TODO same as parseVarDef()
    bool need_semi = true;
    Expr* initValue = nil;
    if (p.tok.kind == Kind.Equal) {
        p.consumeToken();
        initValue = p.parseInitValue(&need_semi, false);
    }

    Stmt* s = p.builder.actOnVarDeclStmt(name, loc, qt, initValue, has_local);
    if (checkSemi && need_semi) {
        p.expectAndConsume(Kind.Semicolon);
    }

    return s;
}

func Stmt* Parser.parseExprStmt(Parser* p) {
    Expr* e = p.parseExpr();
    p.expectAndConsume(Kind.Semicolon);
    return e.asStmt();
}

func Stmt* Parser.parseLabelStmt(Parser* p) {
#if ParserDebug
    printf("parseLabelStmt\n");
#endif
    const char* name =  p.tok.text_value;
    SrcLoc loc = p.tok.loc;
    p.consumeToken(); // identifier
    p.expectAndConsume(Kind.Colon);
    return p.builder.actOnLabelStmt(name, loc);
}

func Stmt* Parser.parseGotoStmt(Parser* p) {
#if ParserDebug
    printf("parseLabelStmt\n");
#endif
    p.consumeToken();
    p.expectIdentifier();
    const char* name =  p.tok.text_value;
    SrcLoc loc = p.tok.loc;
    return p.builder.actOnGotoStmt(name, loc);
}

func bool Parser.isDeclaration(Parser* p) {
    switch (p.tok.kind) {
    case Kind.Identifier:
        return p.isTypeSpec();
    case Kind.KW_bool:   fallthrough;
    case Kind.KW_char:   fallthrough;
    case Kind.KW_const:   fallthrough;
    case Kind.KW_i8:    fallthrough;
    case Kind.KW_i16:   fallthrough;
    case Kind.KW_i32:   fallthrough;
    case Kind.KW_i64:   fallthrough;
    case Kind.KW_isize:   fallthrough;
    case Kind.KW_f32:   fallthrough;
    case Kind.KW_f64:   fallthrough;
    case Kind.KW_local:   fallthrough;
    case Kind.KW_reg8:    fallthrough;
    case Kind.KW_reg16:   fallthrough;
    case Kind.KW_reg32:   fallthrough;
    case Kind.KW_reg64:   fallthrough;
    case Kind.KW_u8:    fallthrough;
    case Kind.KW_u16:   fallthrough;
    case Kind.KW_u32:   fallthrough;
    case Kind.KW_u64:   fallthrough;
    case Kind.KW_usize:   fallthrough;
    case Kind.KW_volatile:   fallthrough;
    case Kind.KW_void:
        return true;
    default:
        break;
    }
    return false;
}


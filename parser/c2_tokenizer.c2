/* Copyright 2022 Bas van den Berg
*/

module c2_tokenizer;

import ast_context;
import constants;
import string_list;
import tokens local;
import utils local;

import string;
import ctype local;
import stdarg local;

public const u32 MaxLookahead = 16;  // must be multiple of 2

type Keyword struct {
    const char* name;
    Kind kind;
    u8 len;
}

const Keyword*[] keywords = {
    Keywords_a,
    Keywords_b,
    Keywords_c,
    Keywords_d,
    Keywords_e,
    Keywords_f,
    Keywords_g,
    nil,
    Keywords_i,
    nil,
    nil,
    Keywords_l,
    Keywords_m,
    Keywords_n,
    Keywords_o,
    Keywords_p,
    nil,
    Keywords_r,
    Keywords_s,
    Keywords_t,
    Keywords_u,
    Keywords_v,
    Keywords_w,
    nil,
    nil,
    nil,
}

const Keyword[] Keywords_a = {
    { "as", Kind.KW_as, 2 },
    { "asm", Kind.KW_asm, 3 },
    { "auto", Kind.KW_auto, 4, },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_b = {
    { "bool", Kind.KW_bool, 4 },
    { "break", Kind.KW_break, 5 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_c = {
    { "case", Kind.KW_case, 4 },
    { "cast", Kind.KW_cast, 4 },
    { "char", Kind.KW_char, 4 },
    { "const", Kind.KW_const, 5 },
    { "continue", Kind.KW_continue, 8 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_d = {
    { "default", Kind.KW_default, 7 },
    { "do", Kind.KW_do, 2 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_e = {
    { "elemsof", Kind.KW_elemsof, 7 },
    { "else", Kind.KW_else, 4 },
    { "enum", Kind.KW_enum, 4 },
    { "enum_max", Kind.KW_enum_max, 8 },
    { "enum_min", Kind.KW_enum_min, 8 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_f = {
    { "f32", Kind.KW_f32, 3 },
    { "f64", Kind.KW_f64, 3 },
    { "fallthrough", Kind.KW_fallthrough, 11 },
    { "false", Kind.KW_false, 5 },
    { "for", Kind.KW_for, 3 },
    { "func", Kind.KW_func, 4 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_g = {
    { "goto", Kind.KW_goto, 4 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_i = {
    { "i16", Kind.KW_i16, 3 },
    { "i32", Kind.KW_i32, 3 },
    { "i64", Kind.KW_i64, 3 },
    { "i8", Kind.KW_i8, 2 },
    { "if", Kind.KW_if, 2 },
    { "import", Kind.KW_import, 6 },
    { "isize", Kind.KW_isize, 5 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_l = {
    { "local", Kind.KW_local, 5 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_m = {
    { "module", Kind.KW_module, 6 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_n = {
    { "nil", Kind.KW_nil, 3 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_o = {
    { "offsetof", Kind.KW_offsetof, 8 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_p = {
    { "public", Kind.KW_public, 6 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_r = {
    { "reg16", Kind.KW_reg16, 5 },
    { "reg32", Kind.KW_reg32, 5 },
    { "reg64", Kind.KW_reg64, 5 },
    { "reg8", Kind.KW_reg8, 4 },
    { "return", Kind.KW_return, 6 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_s = {
    { "sizeof", Kind.KW_sizeof, 6 },
    { "sswitch", Kind.KW_sswitch, 7 },
    { "static_assert", Kind.KW_static_assert, 13 },
    { "struct", Kind.KW_struct, 6 },
    { "switch", Kind.KW_switch, 6 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_t = {
    { "to_container", Kind.KW_to_container, 12 },
    { "true", Kind.KW_true, 4 },
    { "type", Kind.KW_type, 4 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_u = {
    { "u16", Kind.KW_u16, 3 },
    { "u32", Kind.KW_u32, 3 },
    { "u64", Kind.KW_u64, 3 },
    { "u8", Kind.KW_u8, 2 },
    { "union", Kind.KW_union, 5 },
    { "usize", Kind.KW_usize, 5 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_v = {
    { "void", Kind.KW_void, 4 },
    { "volatile", Kind.KW_volatile, 8 },
    { nil, Kind.None, 0 },
}
const Keyword[] Keywords_w = {
    { "while", Kind.KW_while, 5 },
    { nil, Kind.None, 0 },
}

// TODO order by frequency
type Action enum u8 {
    INVALID = 0,
    TABSPACE,
    IDENT_OR_KEYWORD,
    IDENT,
    DIGIT,
    LPAREN,
    RPAREN,
    LSQUARE,
    RSQUARE,
    NEWLINE,
    EXCLAIM,
    DQUOTE,
    SQUOTE,
    POUND,
    STAR,
    PLUS,
    MINUS,
    COMMA,
    DOT,
    PERCENT,
    SLASH,
    COLON,
    SEMI_COLON,
    LESS,
    EQUAL,
    GREATER,
    QUESTION,
    AT,
    AMP,
    CARET,
    LBRACE,
    RBRACE,
    PIPE,
    TILDE,
    CR,
    EOF,
}

const u8[128] Char_lookup = {
// 0 - 15
   [  0]  = Action.EOF,
   ['\t'] = Action.TABSPACE,
   ['\n'] = Action.NEWLINE,
   ['\r'] = Action.CR,
// 16 - 31
// 32 - 47
    [' '] = Action.TABSPACE,
    ['!'] = Action.EXCLAIM,
    ['"'] = Action.DQUOTE,
    ['#'] = Action.POUND,
    ['%'] = Action.PERCENT,
    ['&'] = Action.AMP,
   ['\''] = Action.SQUOTE,
    ['('] = Action.LPAREN,
    [')'] = Action.RPAREN,
    ['*'] = Action.STAR,
    ['+'] = Action.PLUS,
    [','] = Action.COMMA,
    ['-'] = Action.MINUS,
    ['.'] = Action.DOT,
    ['/'] = Action.SLASH,
// 48 - 63
    ['0'] = Action.DIGIT,
    ['1'] = Action.DIGIT,
    ['2'] = Action.DIGIT,
    ['3'] = Action.DIGIT,
    ['4'] = Action.DIGIT,
    ['5'] = Action.DIGIT,
    ['6'] = Action.DIGIT,
    ['7'] = Action.DIGIT,
    ['8'] = Action.DIGIT,
    ['9'] = Action.DIGIT,
    [':'] = Action.COLON,
    [';'] = Action.SEMI_COLON,
    ['<'] = Action.LESS,
    ['='] = Action.EQUAL,
    ['>'] = Action.GREATER,
    ['?'] = Action.QUESTION,
// 64 - 79
    ['@'] = Action.AT,
    ['A'] = Action.IDENT,
    ['B'] = Action.IDENT,
    ['C'] = Action.IDENT,
    ['D'] = Action.IDENT,
    ['E'] = Action.IDENT,
    ['F'] = Action.IDENT,
    ['G'] = Action.IDENT,
    ['H'] = Action.IDENT,
    ['I'] = Action.IDENT,
    ['J'] = Action.IDENT,
    ['K'] = Action.IDENT,
    ['L'] = Action.IDENT,
    ['M'] = Action.IDENT,
    ['N'] = Action.IDENT,
    ['O'] = Action.IDENT,
// 80 - 95
    ['P'] = Action.IDENT,
    ['Q'] = Action.IDENT,
    ['R'] = Action.IDENT,
    ['S'] = Action.IDENT,
    ['T'] = Action.IDENT,
    ['U'] = Action.IDENT,
    ['V'] = Action.IDENT,
    ['W'] = Action.IDENT,
    ['X'] = Action.IDENT,
    ['Y'] = Action.IDENT,
    ['Z'] = Action.IDENT,
    ['['] = Action.LSQUARE,
    // '\'
    [']'] = Action.RSQUARE,
    ['^'] = Action.CARET,
    //'_'
// 96 - 111
    ['a'] = Action.IDENT_OR_KEYWORD,
    ['b'] = Action.IDENT_OR_KEYWORD,
    ['c'] = Action.IDENT_OR_KEYWORD,
    ['d'] = Action.IDENT_OR_KEYWORD,
    ['e'] = Action.IDENT_OR_KEYWORD,
    ['f'] = Action.IDENT_OR_KEYWORD,
    ['g'] = Action.IDENT_OR_KEYWORD,
    ['h'] = Action.IDENT,
    ['i'] = Action.IDENT_OR_KEYWORD,
    ['j'] = Action.IDENT,
    ['k'] = Action.IDENT,
    ['l'] = Action.IDENT_OR_KEYWORD,
    ['m'] = Action.IDENT_OR_KEYWORD,
    ['n'] = Action.IDENT_OR_KEYWORD,
    ['o'] = Action.IDENT_OR_KEYWORD,
// 112 -] 127
    ['p'] = Action.IDENT_OR_KEYWORD,
    ['q'] = Action.IDENT,
    ['r'] = Action.IDENT_OR_KEYWORD,
    ['s'] = Action.IDENT_OR_KEYWORD,
    ['t'] = Action.IDENT_OR_KEYWORD,
    ['u'] = Action.IDENT_OR_KEYWORD,
    ['v'] = Action.IDENT_OR_KEYWORD,
    ['w'] = Action.IDENT_OR_KEYWORD,
    ['x'] = Action.IDENT,
    ['y'] = Action.IDENT,
    ['z'] = Action.IDENT,
    ['{'] = Action.LBRACE,
    ['|'] = Action.PIPE,
    ['}'] = Action.RBRACE,
    ['~'] = Action.TILDE,
}

const u8[128] Identifier_char = {
    ['0'] = 1,
    ['1'] = 1,
    ['2'] = 1,
    ['3'] = 1,
    ['4'] = 1,
    ['5'] = 1,
    ['6'] = 1,
    ['7'] = 1,
    ['8'] = 1,
    ['9'] = 1,
    ['A'] = 1,
    ['B'] = 1,
    ['C'] = 1,
    ['D'] = 1,
    ['E'] = 1,
    ['F'] = 1,
    ['G'] = 1,
    ['H'] = 1,
    ['I'] = 1,
    ['J'] = 1,
    ['K'] = 1,
    ['L'] = 1,
    ['M'] = 1,
    ['N'] = 1,
    ['O'] = 1,
    ['P'] = 1,
    ['Q'] = 1,
    ['R'] = 1,
    ['S'] = 1,
    ['T'] = 1,
    ['U'] = 1,
    ['V'] = 1,
    ['W'] = 1,
    ['X'] = 1,
    ['Y'] = 1,
    ['Z'] = 1,
    ['_'] = 1,
    ['a'] = 1,
    ['b'] = 1,
    ['c'] = 1,
    ['d'] = 1,
    ['e'] = 1,
    ['f'] = 1,
    ['g'] = 1,
    ['h'] = 1,
    ['i'] = 1,
    ['j'] = 1,
    ['k'] = 1,
    ['l'] = 1,
    ['m'] = 1,
    ['n'] = 1,
    ['o'] = 1,
    ['p'] = 1,
    ['q'] = 1,
    ['r'] = 1,
    ['s'] = 1,
    ['t'] = 1,
    ['u'] = 1,
    ['v'] = 1,
    ['w'] = 1,
    ['x'] = 1,
    ['y'] = 1,
    ['z'] = 1,
}

func const Keyword* check_keyword(const char* cp) {
    const Keyword* table = keywords[*cp - 'a'];
    u32 i = 0;
    while (table[i].name) {
        const char* word = cp;
        const char* kw = table[i].name;
        u32 idx = 0;
        while (1) {
            char a = kw[idx];
            char b = word[idx];
            if (a == 0) {
                if (!Identifier_char[b]) return &table[i];
                break;
            }
            if (a != b) {
                if (b < a) return nil;
                break;
            }
            idx++;
        }
        i++;
    }

    return nil;
}

public type Token struct {
    SrcLoc loc;
    Kind kind;
    bool more;
    u8 radix;   // for NumberLiteral
    union {
        const char* error_msg;  // ERROR
        const char* text_value; // Identifier, NumberLiteral
        u8 char_value; // CharLiteral
    }
}

public func void Token.init(Token* tok) {
    string.memset(tok, 0, sizeof(Token));
    tok.more = true;
}

public type Feature struct {
    bool is_if;
    bool enabled;
}

public type Tokenizer struct {
    const char* cur;
    SrcLoc loc_start;
    const char* input_start;

    // TODO move this to Parser?
    Token[MaxLookahead] next;
    u32 next_count;
    u32 next_head;  // index of next token (circular index into next)
    const char* line_start;

    ast_context.Context* context;

    // Feature handling
    Feature[constants.MaxFeatureDepth] feature_stack;
    u32 feature_count;
    const string_list.List* features;

    char[256] error_msg;
}

public func void Tokenizer.init(Tokenizer* t,
                                ast_context.Context* c,
                                const char* input,
                                SrcLoc loc_start,
                                const string_list.List* features)
{
    string.memset(t, 0, sizeof(Tokenizer));
    t.cur = input;
    t.input_start = input;
    t.loc_start = loc_start;
    t.line_start = input;
    t.context = c;
    t.features = features;
    for (u32 i=0; i<MaxLookahead; i++) {
        t.next[i].init();
    }
}

public func void Tokenizer.lex(Tokenizer* t, Token* result) {
    if (t.next_count) {
        string.memcpy(result, &t.next[t.next_head], sizeof(Token));

        t.next_head = (t.next_head + 1) % MaxLookahead;
        t.next_count--;
        return;
    }
    t.lex_internal(result);
}


func  void Tokenizer.lex_internal(Tokenizer* t, Token* result) {
    // TODO if end/error stop (dont retry) (t.done = 1)

    while (1) {
        Action act = Char_lookup[*t.cur];
        switch (act) {
        case Action.INVALID:
            t.error(result, "invalid char '%c'", *t.cur);
            return;
        case Action.TABSPACE:
            t.cur++;
            continue;
        case Action.IDENT_OR_KEYWORD:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            const Keyword* kw = check_keyword(t.cur);
            if (kw) {
                result.kind = kw.kind;
                t.cur += kw.len;
            } else {
                t.lex_identifier(result);
            }
            return;
        case Action.IDENT:
            t.lex_identifier(result);
            return;
        case Action.DIGIT:
            t.lex_number(result);
            return;
        case Action.LPAREN:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            result.kind = Kind.LParen;
            t.cur++;
            return;
        case Action.RPAREN:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            result.kind = Kind.RParen;
            t.cur++;
            return;
        case Action.LSQUARE:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            result.kind = Kind.LSquare;
            t.cur++;
            return;
        case Action.RSQUARE:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            result.kind = Kind.RSquare;
            t.cur++;
            return;
        case Action.NEWLINE:
            t.cur++;
            t.line_start = t.cur;
            continue;
        case Action.EXCLAIM:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            t.cur++;
            if (*t.cur == '=') {
                result.kind = Kind.ExclaimEqual;
                t.cur++;
            } else {
                result.kind = Kind.Exclaim;
            }
            return;
        case Action.DQUOTE:
            t.lex_string_literal(result);
            return;
        case Action.SQUOTE:
            t.lex_char_literal(result);
            return;
        case Action.POUND:
            if (t.lex_feature_cmd(result)) return;
            if (!t.is_enabled()) {
                if (t.skip_feature(result)) return;
            }
            continue;
        case Action.STAR:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            t.cur++;
            if (*t.cur == '=') {
                result.kind = Kind.StarEqual;
                t.cur++;
            } else {
                result.kind = Kind.Star;
            }
            return;
        case Action.PLUS:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            t.cur++;
            if (*t.cur == '+') {
                t.cur++;
                result.kind = Kind.PlusPlus;
                return;
            }
            if (*t.cur == '=') {
                t.cur++;
                result.kind = Kind.PlusEqual;
                return;
            }
            result.kind = Kind.Plus;
            return;
        case Action.MINUS:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            t.cur++;
            if (*t.cur == '-') {
                t.cur++;
                result.kind = Kind.MinusMinus;
                return;
            }
            if (*t.cur == '=') {
                t.cur++;
                result.kind = Kind.MinusEqual;
                return;
            }
            result.kind = Kind.Minus;
            return;
        case Action.COMMA:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            result.kind = Kind.Comma;
            t.cur++;
            return;
        case Action.DOT:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            t.cur++;
            if (t.cur[0] == '.' && t.cur[1] == '.') {
                t.cur += 2;
                result.kind = Kind.Ellipsis;
            } else {
                result.kind = Kind.Dot;
            }
            return;
        case Action.PERCENT:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            t.cur++;
            if (*t.cur == '=') {
                result.kind = Kind.PercentEqual;
                t.cur++;
                return;
            }
            result.kind = Kind.Percent;
            return;
        case Action.SLASH:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            t.cur++;
            if (*t.cur == '=') {
                result.kind = Kind.SlashEqual;
                t.cur++;
                return;
            }
            if (*t.cur == '/') {
                t.skip_line_comment();
                continue;
            }
            if (*t.cur == '*') {
                t.skip_block_comment();
                continue;
            }
            result.kind = Kind.Slash;
            return;
        case Action.COLON:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            result.kind = Kind.Colon;
            t.cur++;
            return;
        case Action.SEMI_COLON:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            result.kind = Kind.Semicolon;
            t.cur++;
            return;
        case Action.LESS:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            t.cur++;
            if (*t.cur == '=') {
                t.cur++;
                result.kind = Kind.LessEqual;
                return;
            }
            if (*t.cur == '<') {
                t.cur++;
                if (*t.cur == '=') {
                    t.cur++;
                    result.kind = Kind.LessLessEqual;
                }
                result.kind = Kind.LessLess;
                return;
            }
            result.kind = Kind.Less;
            return;
        case Action.EQUAL:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            t.cur++;
            if (*t.cur == '=') {
                result.kind = Kind.EqualEqual;
                t.cur++;
            } else {
                result.kind = Kind.Equal;
            }
            return;
        case Action.GREATER:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            t.cur++;
            if (*t.cur == '=') {
                t.cur++;
                result.kind = Kind.GreaterEqual;
                return;
            }
            if (*t.cur == '>') {
                t.cur++;
                if (*t.cur == '=') {
                    t.cur++;
                    result.kind = Kind.GreaterGreaterEqual;
                }
                result.kind = Kind.GreaterGreater;
                return;
            }
            result.kind = Kind.Greater;
            return;
        case Action.QUESTION:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            result.kind = Kind.Question;
            t.cur++;
            return;
        case Action.AT:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            result.kind = Kind.At;
            t.cur++;
            return;
        case Action.AMP:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            t.cur++;
            if (*t.cur == '&') {
                result.kind = Kind.AmpAmp;
                t.cur++;
                return;
            }
            if (*t.cur == '=') {
                result.kind = Kind.AmpEqual;
                t.cur++;
                return;
            }
            result.kind = Kind.Amp;
            return;
        case Action.CARET:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            t.cur++;
            if (*t.cur == '=') {
                t.cur++;
                result.kind = Kind.CaretEqual;
                return;
            }
            result.kind = Kind.Caret;
            return;
        case Action.LBRACE:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            result.kind = Kind.LBrace;
            t.cur++;
            return;
        case Action.RBRACE:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            result.kind = Kind.RBrace;
            t.cur++;
            return;
        case Action.PIPE:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            t.cur++;
            if (*t.cur == '|') {
                result.kind = Kind.PipePipe;
                t.cur++;
                return;
            }
            if (*t.cur == '=') {
                result.kind = Kind.PipeEqual;
                t.cur++;
                return;
            }
            result.kind = Kind.Pipe;
            return;
        case Action.TILDE:
            result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            result.kind = Kind.Tilde;
            t.cur++;
            return;
        case Action.CR:
            t.cur++;
            if (*t.cur != '\n') {
                t.error(result, "unexpected char 0x%02X", *t.cur);
                return;
            }
            t.cur++;
            return;
        case Action.EOF:
            result.loc = 0; //t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
            result.kind = Kind.Eof;
            result.more = false;
            return;
        }
    }
}

public func Token Tokenizer.lookahead(Tokenizer* t, u32 n) {
    // assert(n > 0);
    // assert(n <= MaxLookahead);
    while (t.next_count < n) {
        const u32 slot = (t.next_head + t.next_count) % MaxLookahead;
        t.lex_internal(&t.next[slot]);
        t.next_count++;
    }

    u32 slot = (t.next_head + n - 1) % MaxLookahead;
    return t.next[slot];
}

func void Tokenizer.error(Tokenizer* t, Token* result, const char* format, ...) {
    Va_list args;
    va_start(args, format);
    vsnprintf(t.error_msg, sizeof(t.error_msg)-1, format, args);
    va_end(args);

    result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
    result.kind = Kind.Error;
    result.error_msg = t.error_msg;
    result.more = false;
}

func void Tokenizer.lex_identifier(Tokenizer* t, Token* result) {
    // NOTE: result.loc are already set
    result.kind = Kind.Identifier;
    result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
    const char* start = t.cur;
    const char* end = t.cur + 1;
    while (Identifier_char[*end]) end++;

    usize len = cast<usize>(end - start);
    if (len > constants.MaxIdentifierLen) {
        t.error(result, "identifier too long (max %u)", constants.MaxIdentifierLen);
        return;
    }
    t.cur += len;
    result.text_value = t.context.alloc_str(start, len);
}

func bool is_octal(char c) {
    return (c >= '0' && c <= '7');
}

func void Tokenizer.lex_number(Tokenizer* t, Token* result) {
    result.kind = Kind.NumberLiteral;
    result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
    const char* orig = t.cur;
    const char* start;
    // special case for hex numbers
    if (t.cur[0] == '0') {
        if (t.cur[1] == 'x') {
            result.radix = 16;
            start = t.cur + 2;
            t.cur += 2;
            while (isxdigit(*t.cur)) t.cur++;
        } else {
            start = t.cur + 1;
            t.cur++;
            result.radix = 8;
            while (is_octal(*t.cur)) t.cur++;
            if (isxdigit(*t.cur)) {
                t.error(result, "invalid digit '%c' in octal constant", *t.cur);
                return;
            }
        }
    } else {
        result.radix = 10;
        start = t.cur;
        while (isdigit(*t.cur)) t.cur++;
    }

    usize len = cast<usize>(t.cur - start);
    result.text_value = t.context.alloc_str(start, len);
}

func void Tokenizer.lex_char_literal(Tokenizer* t, Token* result) {
    result.kind = Kind.CharLiteral;
    result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);

    if (t.cur[1] == '\\') {
        t.cur++;
        switch (t.cur[1]) {
        case 'n':
            result.char_value = '\n';
            break;
        case 'r':
            result.char_value = '\r';
            break;
        case 't':
            result.char_value = '\t';
            break;
        case '\\':
            result.char_value = '\\';
            break;
        case '\'':
            result.char_value = '\'';
            break;
        default:
            t.error(result, "unknown escape sequence \\%c", t.cur[1]);
            return;
        }
    } else {
        result.char_value = cast<u8>(t.cur[1]);
    }

    if (t.cur[2] != '\'') {
        t.error(result, "missing terminating ' character");
        return;
    }

    t.cur += 3;
}

func void Tokenizer.lex_string_literal(Tokenizer* t, Token* result) {
    result.kind = Kind.StringLiteral;
    result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
    t.cur++;
    const char* start = t.cur;
    usize len;

    while (1) {
        switch (*t.cur) {
        case 0: fallthrough;
        case '\r': fallthrough;
        case '\n':
            t.cur--;
            t.error(result, "unterminated string");
            return;
        case '\\':
            t.cur++;
            switch (*t.cur) {
            case '0':
                break;
            case 'r':
                break;
            case 'n':
                break;
            case 't':
                break;
            case '"':
                break;
            case '\\':
                break;
            default:
                t.cur--;
                t.error(result, "unknown escape sequence \\%c", *t.cur);
                return;
            }
            t.cur++;
            break;
        case '"':
            goto out;
            break;
        default:
            t.cur++;
            break;
        }
    }
out:
    len = cast<u32>(t.cur - start);
    t.cur++;    // skip end delimiter
    result.text_value = t.context.alloc_str(start, len);
}

func void Tokenizer.skip_line_comment(Tokenizer* t) {
    t.cur += 2;
    const char* start = t.cur;
    const char* end = start;

    while (*end) {
        if (*end == '\r' || *end == '\n') break;
        end++;
    }

    usize len = cast<usize>(end - start);
    t.cur += len;
}

func void Tokenizer.skip_block_comment(Tokenizer* t) {
    t.cur += 2;
    while (*t.cur) {
        if (t.cur[0] == '*' && t.cur[1] == '/') break;
        t.cur++;
    }
    t.cur += 2;
}

func bool Tokenizer.skip_line(Tokenizer* t, Token* result) {
    // only expect whitespace + newline
    while (*t.cur != '\n') {
        if (!isspace(*t.cur)) {
            t.error(result, "unexpected character '%c'", *t.cur);
            return true;
        }
        t.cur++;
    }
    return false;
}

func bool compare_word(const char* cur, const char* expect) {
    while (*expect) {
        if (*cur != *expect) return false;
        cur++;
        expect++;
    }
    return !Identifier_char[*cur];
}

// return true if we pass result
func bool Tokenizer.lex_feature_cmd(Tokenizer* t, Token* result) {
    if (t.cur != t.line_start) {
        t.error(result, "#if/#else/#endif must be at start of line");
        return true;
    }
/*
    Syntax:
        #if <selection>
        #else
        #endif
        #error "msg"

    later:
        AND OR NOT
        #warn "msg"
*/
    t.cur++;    // skip #

    if (compare_word(t.cur, "if")) {
        t.cur += 2;
        if (t.handle_if(result)) return true;
    } else if (compare_word(t.cur, "else")) {
        t.cur += 4;
        if (t.skip_line(result)) return true;
        if (t.handle_else(result)) return true;
    } else if (compare_word(t.cur, "endif")) {
        t.cur += 5;
        if (t.skip_line(result)) return true;
        if (t.handle_endif(result)) return true;
    } else if (compare_word(t.cur, "error")) {
        t.cur += 5;
        return t.parse_error_warn(result, true);
    } else if (compare_word(t.cur, "warn")) {
        t.cur += 4;
        return t.parse_error_warn(result, false);
    } else {
        t.error(result, "unknown feature-selection command");
        return true;
    }
    return false;
}

func bool Tokenizer.parse_error_warn(Tokenizer* t, Token* result, bool is_error) {
    // NOTE: #warn/#error must always have good syntax, even in dis-abled feature!

    t.cur++;    // skip SPACE
    if (*t.cur != '"') {
        t.error(result, "expect '\"'");
        return true;
    }
    t.cur++;
    const char* start = t.cur;
    while (*t.cur != '\"') {
        switch (*t.cur) {
        case 0: fallthrough;
        case '\r': fallthrough;
        case '\n':
            t.error(result, "unterminated string");
            return true;
        case '\"':
            break;
        default:
            t.cur++;
            break;
        }
    }
    usize len = cast<usize>(t.cur - start);
    t.cur++;
    if (len > constants.MaxIdentifierLen) {
        t.error(result, "error msg too long (max %u bytes)", constants.MaxErrorMsgLen);
        return true;
    }
    char[constants.MaxErrorMsgLen+1] msg;
    string.memcpy(msg, start, len);
    msg[len] = 0;

    if (t.is_enabled()) {
        if (is_error) {
            t.cur = t.line_start;
            t.error(result, "%s", msg);
        } else {
            string.strcpy(t.error_msg, msg);
            result.loc = t.loc_start + cast<SrcLoc>(t.line_start - t.input_start);
            result.kind = Kind.Warning;
            result.error_msg = t.error_msg;
        }
        return true;
    }
    return false;
}

func bool Tokenizer.is_enabled(const Tokenizer* t) @(inline) {
    for (u32 i=0; i<t.feature_count; i++) {
        if (!t.feature_stack[i].enabled) return false;
    }
    return true;
}

func bool Tokenizer.handle_if(Tokenizer* t, Token* result) {
    // Syntax: 0 | 1 | FEATURE | FEATURE=<value>

    if (t.feature_count >= constants.MaxFeatureDepth) {
        t.error(result, "feature nesting too much");
        return true;
    }

    //t.skip_whitespace();
    t.cur++;    // just skip space

    bool enabled = false;
    Action act = Char_lookup[*t.cur];
    switch (act) {
    case Action.INVALID:
        t.error(result, "invalid char '%c'", *t.cur);
        return true;
    case Action.IDENT_OR_KEYWORD: fallthrough;
    case Action.IDENT:
        if (t.parse_feature(result, &enabled)) return true;
        break;
    case Action.DIGIT:
        if (*t.cur != '0') enabled = true;
        t.cur++;
        break;
    case Action.EOF:
        t.cur--;
        t.error(result, "expected feature");
        return true;
    default:
        t.error(result, "invalid feature value");
        return true;
    }

    Feature* next = &t.feature_stack[t.feature_count];
    next.is_if = true;
    next.enabled = enabled;
    t.feature_count++;
    return false;
}

func bool Tokenizer.parse_feature(Tokenizer* t, Token* result, bool* enabled) {
    const char* start = t.cur;
    while (Identifier_char[*t.cur]) t.cur++;

    usize len = cast<usize>(t.cur - start);
    if (len > constants.MaxFeatureName) {
        t.error(result, "feature name too long (max %u)", constants.MaxFeatureName);
        return true;
    }

    char[constants.MaxFeatureName+1] name;
    string.memcpy(name, start, len);
    name[len] = 0;

    if (t.features.contains(name)) *enabled = true;
    return false;
}

func bool Tokenizer.handle_else(Tokenizer* t, Token* result) {
    if (t.feature_count == 0) {
        t.error(result, "#else without #if");
        return true;
    }
    Feature* top = &t.feature_stack[t.feature_count-1];
    if (!top.is_if) {
        t.error(result, "#else in #else");
        return true;
    }
    top.is_if = false;
    top.enabled = !top.enabled;
    return false;
}

func bool Tokenizer.handle_endif(Tokenizer* t, Token* result) {
    if (t.feature_count == 0) {
        t.error(result, "#endif without #if/#else");
        return true;
    }
    Feature* top = &t.feature_stack[t.feature_count-1];
    t.feature_count--;
    return false;
}

func bool Tokenizer.skip_feature(Tokenizer* t, Token* result) {
    while (1) {
        Action act = Char_lookup[*t.cur];
        switch (act) {
        case Action.INVALID:
            t.error(result, "invalid char '%c'", *t.cur);
            return true;
        case Action.NEWLINE:
            t.cur++;
            t.line_start = t.cur;
            break;
        case Action.DQUOTE:
            t.skip_string_literal();
            break;
        case Action.SQUOTE:
            t.skip_char_literal();
            break;
        case Action.POUND:
            if (t.lex_feature_cmd(result)) return true;
            if (t.is_enabled()) return false;
            break;
        default:
            t.cur++;
            break;
        }
    }
    return false;
}

func void Tokenizer.skip_string_literal(Tokenizer* t) {
    t.cur++;

    while (1) {
        switch (*t.cur) {
        case 0:
            return;
        case '\r':
            t.cur++;
            return;
        case '\n':
            return;
        case '"':
            t.cur++;
            return;
        default:
            t.cur++;
            break;
        }
    }
}

func void Tokenizer.skip_char_literal(Tokenizer* t) {
    t.cur++;

    while (1) {
        switch (*t.cur) {
        case 0:
            return;
        case '\'':
            t.cur++;
            return;
        default:
            t.cur++;
            break;
        }
    }
}


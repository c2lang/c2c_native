/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module token;

import src_loc local;
import string;

public type Kind enum u8 {
    None,
    Identifier,         // abc
    IntegerLiteral,     // 123
    FloatLiteral,       // 3.1415
    CharLiteral,        // 'c'
    StringLiteral,      // "abc"
    LParen,             // (
    RParen,             // )
    LSquare,            // [
    RSquare,            // ]
    LBrace,             // {
    RBrace,             // }
    Exclaim,            // !
    ExclaimEqual,       // !=
    Star,               // *
    StarEqual,          // *=
    Amp,                // &
    AmpAmp,             // &&
    AmpEqual,           // &=
    Pipe,               // |
    PipePipe,           // ||
    PipeEqual,          // |=
    Equal,              // =
    EqualEqual,         // ==
    Semicolon,          // ;
    Colon,              // :
    At,                 // @
    Caret,              // ^
    CaretEqual,         // ^=
    Question,           // ?
    Dot,                // .
    Ellipsis,           // ...
    Comma,              // ,
    Plus,               // +
    PlusPlus,           // ++
    PlusEqual,          // +=
    Minus,              // -
    MinusMinus,         // --
    MinusEqual,         // -=
    Tilde,              // ~
    Slash,              // /
    SlashEqual,         // /=
    Percent,            // %
    PercentEqual,       // %=
    Less,               // <
    LessLess,           // <<
    LessEqual,          // <=
    LessLessEqual,      // <<=
    Greater,            // >
    GreaterGreater,     // >>
    GreaterEqual,       // >=
    GreaterGreaterEqual, // >>=
    // builtin-types
    KW_bool,    // keep as first BuiltinType, since we check range
    KW_char,
    KW_i8,
    KW_i16,
    KW_i32,
    KW_i64,
    KW_u8,
    KW_u16,
    KW_u32,
    KW_u64,
    KW_reg8,
    KW_reg16,
    KW_reg32,
    KW_reg64,
    KW_isize,
    KW_usize,
    KW_f32,
    KW_f64,
    KW_void,        // keep as last BuiltinType, since we check range
    // other keywords
    KW_as,
    KW_asm,
    KW_assert,
    KW_auto,
    KW_break,
    KW_case,
    KW_cast,
    KW_const,
    KW_continue,
    KW_default,
    KW_do,
    KW_elemsof,
    KW_else,
    KW_enum_max,
    KW_enum_min,
    KW_enum,
    KW_fallthrough,
    KW_false,
    KW_for,
    KW_func,
    KW_goto,
    KW_if,
    KW_import,
    KW_local,
    KW_module,
    KW_nil,
    KW_offsetof,
    KW_public,
    KW_return,
    KW_sizeof,
    KW_sswitch,
    KW_static_assert,
    KW_struct,
    KW_switch,
    KW_template,
    KW_to_container,
    KW_true,
    KW_type,
    KW_union,
    KW_volatile,
    KW_while,
    // Special Token
    Eof,
    Warning,
    Error,
}

// NOTE: keep in sync with TokenKind
const char*[] token_names = {
    "none",
    "identifier",
    "integer",
    "float",
    "character",
    "string",
    "(",
    ")",
    "[",
    "]",
    "{",
    "}",
    "!",
    "!=",
    "*",
    "*=",
    "&",
    "&&",
    "&=",
    "|",
    "||",
    "|=",
    "=",
    "==",
    ";",
    ":",
    "@",
    "^",
    "^=",
    "?",
    ".",
    "...",
    ",",
    "+",
    "++",
    "+=",
    "-",
    "--",
    "-=",
    "~",
    "/",
    "/=",
    "%",
    "%=",
    "<",
    "<<",
    "<=",
    "<<=",
    ">",
    ">>",
    ">=",
    ">>=",
    "bool",
    "char",
    "i8",
    "i16",
    "i32",
    "i64",
    "u8",
    "u16",
    "u32",
    "u64",
    "reg8",
    "reg16",
    "reg32",
    "reg64",
    "isize",
    "usize",
    "f32",
    "f64",
    "void",
    "as",
    "asm",
    "assert",
    "auto",
    "break",
    "case",
    "cast",
    "const",
    "continue",
    "default",
    "do",
    "elemsof",
    "else",
    "enum_max",
    "enum_min",
    "enum",
    "falltrhough",
    "false",
    "for",
    "func",
    "goto",
    "if",
    "import",
    "local",
    "module",
    "nil",
    "offsetof",
    "public",
    "return",
    "sizeof",
    "sswitch",
    "static_assert",
    "struct",
    "switch",
    "template",
    "to_container",
    "true",
    "type",
    "union",
    "volatile",
    "while",
    "eof",
    "warning",
    "error",
}

static_assert(elemsof(Kind), elemsof(token_names));

public func const char* kind2str(Kind kind) @(inline) {
    return token_names[kind];
}

public type Token struct {
    SrcLoc loc;
    Kind kind;
    bool more;
    u8 radix;   // for IntegerLiteral (2,8,10,16) and CharLiteral
    union {
        const char* error_msg;  // ERROR
        struct {
            u32 text_idx;  // Identifier
            u32 text_len;  // StringLiteral, includes 0
        }
        u64 int_value;     // IntegerLiteral
        f64 float_value;   // FloatLiteral
        u8 char_value;     // CharLiteral
    }
}

public func void Token.init(Token* tok) {
    string.memset(tok, 0, sizeof(Token));
    tok.more = true;
}


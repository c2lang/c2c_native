/* Copyright 2022-2023 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module plugin_main;

import ast local;
import attr;
import console;
import plugin_info;
import src_loc local;
import string_buffer;
import utils;

import stdlib local;
import string;

public plugin_info.Plugin handle @(export) = {
    .load = load,
    .unload = unload,
    .init = plugin_init,
    .post_parse = nil,
    .post_analysis = generate_tests,
    .name = "UnitTest 1.0",
}

type Plugin struct {
    plugin_info.Info* info;
    u32 attr_name;
    DeclList decls;
}

func void* load(const char* options, bool show_timing, bool show_debug) {
    Plugin* p = calloc(1, sizeof(Plugin));
    p.decls.init(16);

    console.init();
    console.setTiming(show_timing);
    console.setDebug(show_debug);

    return p;
}

func void unload(void* arg) {
    Plugin* p = arg;
    p.decls.free();
    free(arg);
}

func void plugin_init(void* arg, plugin_info.Info* info) {
    Plugin* p = arg;
    p.info = info;
    p.decls.clear();
    ast.setGlobals(info.ast_globals);
    ast.builtins = info.ast_builtins;

    p.attr_name = info.astPool.addStr("unittest", true);
    info.registerAttr(p.attr_name, handle_attr, p);

    generate_types(p);
}

func void generate_types(Plugin *p) {
    // generate: public type TestFn func void(void* t);

    string_buffer.Buf* out = string_buffer.create(1024, false, 2);

    out.add("module c2test;\n\n");
    out.add("public type TestFn func void(void* t);\n\n");

    out.add("public type Test struct {\n");
    out.add("   const char* name;\n");
    out.add("   TestFn fn;\n");
    out.add("}\n\n");

    out.add("public type Group struct {\n");
    out.add("   const char* name;\n");
    out.add("   u32 fixture_size;\n");
    out.add("   TestFn setup;\n");
    out.add("   TestFn teardown;\n");
    out.add("   u32 num_tests;\n");
    out.add("   const Test* tests;\n");
    out.add("}\n\n");

    // use parser to parse, create generated-file
    u32 name = p.info.auxPool.addStr("generated", false);
    i32 file_id = p.info.sm.addGenerated(out, name);

    p.info.parser.parse(file_id, false);
}

func bool handle_attr(void* arg, Decl* d, SrcLoc loc, u32 name, const attr.Value* value) {
    Plugin* p = arg;
    assert(name  == p.attr_name);

    // TODO union?
    if (!d.isStructType()) {
        p.info.diags.error(loc, "attribute 'unittest' can only be applied to structs");
        return false;
    }

    p.decls.add(d);
    return true;
}

func void generate_tests(void* arg) {
    Plugin* p = arg;
    console.debug("unittest: generating tests");

    u32 setup_name = p.info.astPool.addStr("setup", true);
    u32 teardown_name = p.info.astPool.addStr("teardown", true);

    Decl** decls = p.decls.getDecls();
    for (u32 i=0; i<p.decls.size(); i++) {
        StructTypeDecl* std = cast<StructTypeDecl*>(decls[i]);
        u32 num_funcs = std.getNumStructFunctions();
        const FunctionDecl** fns = std.getStructFunctions();
        for (u32 j=0; j<num_funcs; j++) {
            const Decl* fn = cast<Decl*>(fns[j]);
            if (fn.getNameIdx() == setup_name) {
                console.warn("setup");
                // TODO check prototype: void(Test* t)
                fn.dump();
                continue;
            }
            if (fn.getNameIdx() == teardown_name) {
                // TODO check prototype: void(Test* t)
                console.warn("teardown");
                fn.dump();
                continue;
            }
            // check if starts with 'test', otherwise helper function
            const char* name = fn.getName();
            if (string.strncmp("test", name, 4) != 0) continue;

            // TODO check prototype: void(Test* t)
            console.warn("test");
            fn.dump();
        }
    }
}


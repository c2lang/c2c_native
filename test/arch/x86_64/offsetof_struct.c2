// @warnings{no-unused}

module test;

type S1 struct {
    u32 f1;
    u32 f2;
    u32 f3;
    u32 f4;
    u32 f5;
}

static_assert(0, offsetof(S1, f1));
static_assert(4, offsetof(S1, f2));
static_assert(8, offsetof(S1, f3));
static_assert(12, offsetof(S1, f4));
static_assert(16, offsetof(S1, f5));


type S2 struct {
    u8 f1;
    u16 f2;
    u32 f3;
    void* f4;
    u8[3] f5;
    u32 f6;
}
static_assert(0, offsetof(S2, f1));
static_assert(2, offsetof(S2, f2));
static_assert(4, offsetof(S2, f3));
static_assert(8, offsetof(S2, f4));
static_assert(16, offsetof(S2, f5));
static_assert(20, offsetof(S2, f6));

type S2p struct @(packed) {
    u8 f1;
    u16 f2;
    u32 f3;
    void* f4;
    u8[3] f5;
    u32 f6;
}

static_assert(0, offsetof(S2p, f1));
static_assert(1, offsetof(S2p, f2));
static_assert(3, offsetof(S2p, f3));
static_assert(7, offsetof(S2p, f4));
static_assert(15, offsetof(S2p, f5));
static_assert(18, offsetof(S2p, f6));

type S3 struct {
    u32[10] array1;
    u32 f1;
    u32[4] array2;
    u32 f2;
}
static_assert(0, offsetof(S3, array1));
static_assert(40, offsetof(S3, f1));
static_assert(44, offsetof(S3, array2));
static_assert(60, offsetof(S3, f2));


type S4 struct {
    u32 m;
    struct sub {
        u16 m2;
        u16 m2b;
    }
    struct {
        u32 m3;
    }
    u32 m4;
}
static_assert(4, offsetof(S4, sub));
static_assert(4, offsetof(S4, sub.m2));
static_assert(6, offsetof(S4, sub.m2b));
static_assert(8, offsetof(S4, m3));
static_assert(12, offsetof(S4, m4));

type S5 struct {
    u8 m;
    struct {
        u8 m2;
        u32 m3;
    }
}
static_assert(12, sizeof(S5));
static_assert(4, offsetof(S5, m2));
static_assert(8, offsetof(S5, m3));

type S6 struct {
    u8 m;
    struct {
        u8 m2;
        u16 m3;
    }
}
static_assert(6, sizeof(S6));
static_assert(2, offsetof(S6, m2));
static_assert(4, offsetof(S6, m3));

type S7 struct {
    u8 m;
    struct {
        void* m2;
        u16 m3;
    }
}
static_assert(24, sizeof(S7));
static_assert(8, offsetof(S7, m2));
static_assert(16, offsetof(S7, m3));


// @warnings{no-unused}
module test;

type S0 union {
    u8 m1;
    u16 m2;
    u32 m3;
    struct {
        u32 m4;
        u16 m5;
    }
}
static_assert(8, sizeof(S0));
static_assert(0, offsetof(S0, m1));
static_assert(0, offsetof(S0, m2));
static_assert(0, offsetof(S0, m3));
static_assert(0, offsetof(S0, m4));
static_assert(4, offsetof(S0, m5));

type S1 struct {
    u8 m1;
    union {
        u8 m2;
        u16 m3;
    }
}
static_assert(4, sizeof(S1));
static_assert(2, offsetof(S1, m2));
static_assert(2, offsetof(S1, m3));

type S1p struct @(packed) {
    u8 m1;
    union {
        u8 m2;
        u16 m3;
    }
}
static_assert(3, sizeof(S1p));
static_assert(1, offsetof(S1p, m2));
static_assert(1, offsetof(S1p, m3));

type S2 struct {
    u8 m1;
    union {
        u8 m2;
        u16 m3;
        u32 m4;
    }
}
static_assert(8, sizeof(S2));
static_assert(4, offsetof(S2, m2));
static_assert(4, offsetof(S2, m3));
static_assert(4, offsetof(S2, m4));

type S2p struct @(packed) {
    u8 m1;
    union {
        u8 m2;
        u16 m3;
        u32 m4;
    }
}
static_assert(5, sizeof(S2p));
static_assert(1, offsetof(S2p, m2));
static_assert(1, offsetof(S2p, m3));
static_assert(1, offsetof(S2p, m4));

type S3 struct {
    u8 m1;
    union {
        u8 m2;
        u8 m3;
    }
    u16 m4;
}
static_assert(4, sizeof(S3));
static_assert(1, offsetof(S3, m3));
static_assert(2, offsetof(S3, m4));

type S4 union {
    u8 m1;
    u16 m2;
    struct {
        u32 m3;
        u16 m4;
    }
}
static_assert(4, sizeof(S3));
static_assert(1, offsetof(S3, m3));
static_assert(2, offsetof(S3, m4));


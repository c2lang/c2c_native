// @warnings{no-unused}
module test;

type Type struct {
    i32 x;
    i32 y;
}

type Enum enum u8 {
    AA,
    BB,
}

Type[] types = {
    { 1, 2 },
    { 3, 4 },
}


func void test_ok() {
    i32 i;
    i32* ip = &i;

    Type t;
    Type* tp = &t;

    void* d = &types;

    Type[2] t2;
    Type* t2p = &t2[0];
    Type* t3p = &test.types[0];
    i32* b = &types[0].x;
}

func void test1() {
    i32 a = &nil;   // @error{cannot take the address of an rvalue of type 'void*'}
}

func void test2() {
    i32 a = &10;        // @error{cannot take the address of an rvalue of type 'i32'}
}

func void test3() {
    void* a = &test;        // @error{cannot take the address of a module}
}

func void test4() {
    void* a = &test_ok;        // @error{cannot take the address of a function}
}

func void test5() {
    void* a = &Type;        // @error{cannot take the address of a type}
}

func void test6() {
    i32 a = &sizeof(i32); // @error{cannot take the address of an rvalue of type 'u32'}
}

func void test7() {
    i32 a = &Enum.BB;       // @error{cannot take the address of an enum constant}
}


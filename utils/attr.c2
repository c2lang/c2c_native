module ast_attr;

import string_pool;

// note: keep Attr prefix because Kind already exists a lot
public type AttrKind enum u8 {
    Unknown,
    Export,         // Type | Func | Var
    Packed,         // Struct
    Unused,         // Type | Func | Var
    UnusedParams,   // Type | Func
    Section,        //        Func | Var
    NoReturn,       //        Func
    Inline,         //        Func
    Aligned,        // Type | Func | Var  TODO allowed for var/func??
    Weak,           //        Func | Var
    Opaque,         // Struct
    CName,          // Type | Func | Var, only in interface
    NoTypeDef,      // Type, only interface files
}

const char*[] attrKind_names = {
    "",
    "export",
    "packed",
    "unused",
    "unused_params",
    "section",
    "noreturn",
    "inline",
    "aligned",
    "weak",
    "opaque",
    "cname",
    "no_typedef",
}

static_assert(elemsof(AttrKind), elemsof(attrKind_names));

u32[elemsof(AttrKind)] name_indexes;

// Note: only meant for printing (since not allocated in StringPool)
public func const char* kind2name(AttrKind k) {
    return attrKind_names[k];
}

public func void init(string_pool.Pool* pool) {
    // skip unused
    for (u32 i=1; i<elemsof(attrKind_names); i++) {
        name_indexes[i] = pool.addStr(attrKind_names[i], true);
    }
}

public func const AttrKind find(u32 name_idx) {
    // skip unused
    for (u32 i=1; i<elemsof(name_indexes); i++) {
        if (name_idx == name_indexes[i]) return cast<AttrKind>(i);
    }
    return AttrKind.Unknown;
}

